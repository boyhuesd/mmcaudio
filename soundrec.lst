;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 19/07/2013 2:38:39 CH
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF004EF2C  	GOTO        2136
0x0004	0x0000      	NOP
0x0006	0x0000      	NOP
0x0008	0xF000EF00  	GOTO        0
0x000C	0x0000      	NOP
0x000E	0x0000      	NOP
0x0010	0x0000      	NOP
0x0012	0x0000      	NOP
0x0014	0x0000      	NOP
0x0016	0x0000      	NOP
0x0018	0xD7F3      	BRA         0
_UART1_Write:
;__Lib_UART_c67.c,58 :: 		
;__Lib_UART_c67.c,59 :: 		
L_UART1_Write3:
0x001C	0xB2AC      	BTFSC       TXSTA, 1 
0x001E	0xD002      	BRA         L_UART1_Write4
;__Lib_UART_c67.c,60 :: 		
0x0020	0x0000      	NOP
0x0022	0xD7FC      	BRA         L_UART1_Write3
L_UART1_Write4:
;__Lib_UART_c67.c,61 :: 		
0x0024	0xFFADC129  	MOVFF       FARG_UART1_Write_data_, TXREG
;__Lib_UART_c67.c,62 :: 		
L_end_UART1_Write:
0x0028	0x0012      	RETURN      0
; end of _UART1_Write
_SPI1_Write:
;__Lib_SPI_c345.c,76 :: 		
;__Lib_SPI_c345.c,79 :: 		
0x002A	0xFFC9C129  	MOVFF       FARG_SPI1_Write_data_, SSPBUF
;__Lib_SPI_c345.c,80 :: 		
L_SPI1_Write8:
0x002E	0xB0C7      	BTFSC       SSPSTAT, 0 
0x0030	0xD002      	BRA         L_SPI1_Write9
;__Lib_SPI_c345.c,81 :: 		
0x0032	0x0000      	NOP
0x0034	0xD7FC      	BRA         L_SPI1_Write8
L_SPI1_Write9:
;__Lib_SPI_c345.c,82 :: 		
0x0036	0xF000CFC9  	MOVFF       SSPBUF, R0
;__Lib_SPI_c345.c,84 :: 		
L_end_SPI1_Write:
0x003A	0x0012      	RETURN      0
; end of _SPI1_Write
_____DoIFC:
;__Lib_System.c,93 :: 		
;__Lib_System.c,94 :: 		
0x003C	0x50F2      	MOVF        INTCON, 0, 0
;__Lib_System.c,95 :: 		
0x003E	0x6E02      	MOVWF       R2, 0
;__Lib_System.c,96 :: 		
0x0040	0x9EF2      	BCF         INTCON, 7 
;__Lib_System.c,97 :: 		
0x0042	0x0005      	PUSH
;__Lib_System.c,98 :: 		
0x0044	0x6AFF      	CLRF        TOSU, 0
;__Lib_System.c,99 :: 		
0x0046	0x5001      	MOVF        R1, 0, 0
;__Lib_System.c,100 :: 		
0x0048	0x6EFE      	MOVWF       TOSH, 0
;__Lib_System.c,101 :: 		
0x004A	0x5000      	MOVF        R0, 0, 0
;__Lib_System.c,102 :: 		
0x004C	0x6EFD      	MOVWF       TOSL, 0
;__Lib_System.c,103 :: 		
0x004E	0xBE02      	BTFSC       R2, 7, 0
;__Lib_System.c,104 :: 		
0x0050	0x8EF2      	BSF         INTCON, 7, 0
;__Lib_System.c,105 :: 		
;__Lib_System.c,107 :: 		
L_end_____DoIFC:
0x0052	0x0012      	RETURN      0
; end of _____DoIFC
_Div_16x16_U:
;__Lib_Math.c,102 :: 		
;__Lib_Math.c,109 :: 		
0x0054	0x6A08      	CLRF        R8, 0
;__Lib_Math.c,110 :: 		
0x0056	0x6A09      	CLRF        R9, 0
;__Lib_Math.c,111 :: 		
0x0058	0x0E10      	MOVLW       16
;__Lib_Math.c,112 :: 		
0x005A	0x6E0C      	MOVWF       R12, 0
;__Lib_Math.c,113 :: 		
0x005C	0x3401      	RLCF        R1, 0, 0
;__Lib_Math.c,114 :: 		
0x005E	0x3608      	RLCF        R8, 1, 0
;__Lib_Math.c,115 :: 		
0x0060	0x3609      	RLCF        R9, 1, 0
;__Lib_Math.c,116 :: 		
0x0062	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c,117 :: 		
0x0064	0x5E08      	SUBWF       R8, 1, 0
;__Lib_Math.c,118 :: 		
0x0066	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,119 :: 		
0x0068	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_Math.c,120 :: 		
0x006A	0x3C05      	INCFSZ      R5, 0, 0
;__Lib_Math.c,121 :: 		
0x006C	0x5E09      	SUBWF       R9, 1, 0
;__Lib_Math.c,122 :: 		
0x006E	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_Math.c,123 :: 		
0x0070	0xD007      	BRA         $+16
;__Lib_Math.c,124 :: 		
0x0072	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c,125 :: 		
0x0074	0x2608      	ADDWF       R8, 1, 0
;__Lib_Math.c,126 :: 		
0x0076	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,127 :: 		
0x0078	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_Math.c,128 :: 		
0x007A	0x3C05      	INCFSZ      R5, 0, 0
;__Lib_Math.c,129 :: 		
0x007C	0x2609      	ADDWF       R9, 1, 0
;__Lib_Math.c,130 :: 		
0x007E	0x90D8      	BCF         STATUS, 0, 0
;__Lib_Math.c,131 :: 		
0x0080	0x3600      	RLCF        R0, 1, 0
;__Lib_Math.c,132 :: 		
0x0082	0x3601      	RLCF        R1, 1, 0
;__Lib_Math.c,133 :: 		
0x0084	0x2E0C      	DECFSZ      R12, 1, 0
;__Lib_Math.c,134 :: 		
0x0086	0xD7EA      	BRA         $-42
;__Lib_Math.c,136 :: 		
L_end_Div_16x16_U:
0x0088	0x0012      	RETURN      0
; end of _Div_16x16_U
_UART_Write:
;__Lib_UART_c67.c,119 :: 		
;__Lib_UART_c67.c,120 :: 		
0x008A	0xFFE1C10B  	MOVFF       _UART_Wr_Ptr+2, FSR1L
0x008E	0xFFE2C10C  	MOVFF       _UART_Wr_Ptr+3, FSR1H
0x0092	0xFFE6C128  	MOVFF       FARG_UART_Write__data, POSTINC1
0x0096	0xF000C109  	MOVFF       _UART_Wr_Ptr, R0
0x009A	0xF001C10A  	MOVFF       _UART_Wr_Ptr+1, R1
0x009E	0xDFCE      	RCALL       _____DoIFC
;__Lib_UART_c67.c,121 :: 		
L_end_UART_Write:
0x00A0	0x0012      	RETURN      0
; end of _UART_Write
_SPI1_Read:
;__Lib_SPI_c345.c,67 :: 		
;__Lib_SPI_c345.c,68 :: 		
0x00A2	0xFFC9C128  	MOVFF       FARG_SPI1_Read_buffer, SSPBUF
;__Lib_SPI_c345.c,69 :: 		
L_SPI1_Read6:
0x00A6	0xB0C7      	BTFSC       SSPSTAT, 0 
0x00A8	0xD002      	BRA         L_SPI1_Read7
;__Lib_SPI_c345.c,70 :: 		
0x00AA	0x0000      	NOP
0x00AC	0xD7FC      	BRA         L_SPI1_Read6
L_SPI1_Read7:
;__Lib_SPI_c345.c,71 :: 		
0x00AE	0xF000CFC9  	MOVFF       SSPBUF, R0
;__Lib_SPI_c345.c,72 :: 		
L_end_SPI1_Read:
0x00B2	0x0012      	RETURN      0
; end of _SPI1_Read
_sendCMD:
;soundrec.c,309 :: 		sendCMD(uint8_t cmd, uint32_t arg)
;soundrec.c,311 :: 		uint8_t retryTimes = 0;
0x00B4	0x0101      	MOVLB       1
0x00B6	0x6B26      	CLRF        sendCMD_retryTimes_L0, 1
;soundrec.c,314 :: 		spiWrite(0xff);
0x00B8	0x0EFF      	MOVLW       255
0x00BA	0x6F29      	MOVWF       FARG_SPI1_Write_data_, 1
0x00BC	0xDFB6      	RCALL       _SPI1_Write
;soundrec.c,315 :: 		do
L_sendCMD56:
;soundrec.c,317 :: 		spiReadData = spiRead();
0x00BE	0x0EFF      	MOVLW       255
0x00C0	0x0101      	MOVLB       1
0x00C2	0x6F28      	MOVWF       FARG_SPI1_Read_buffer, 1
0x00C4	0xDFEE      	RCALL       _SPI1_Read
0x00C6	0xF0EEC000  	MOVFF       R0, _spiReadData
;soundrec.c,319 :: 		while (spiReadData != 0xff);
0x00CA	0x0100      	MOVLB       0
0x00CC	0x51EE      	MOVF        _spiReadData, 0, 1
0x00CE	0x0AFF      	XORLW       255
0x00D0	0xE1F6      	BNZ         L_sendCMD56
;soundrec.c,323 :: 		spiWrite(0b01000000 | cmd);
0x00D2	0x0E40      	MOVLW       64
0x00D4	0x0101      	MOVLB       1
0x00D6	0x1121      	IORWF       FARG_sendCMD_cmd, 0, 1
0x00D8	0x6F29      	MOVWF       FARG_SPI1_Write_data_, 1
0x00DA	0xDFA7      	RCALL       _SPI1_Write
;soundrec.c,324 :: 		spiWrite((uint8_t) (arg >> 24));
0x00DC	0xF000C125  	MOVFF       FARG_sendCMD_arg+3, R0
0x00E0	0x6A01      	CLRF        R1 
0x00E2	0x6A02      	CLRF        R2 
0x00E4	0x6A03      	CLRF        R3 
0x00E6	0xF129C000  	MOVFF       R0, FARG_SPI1_Write_data_
0x00EA	0xDF9F      	RCALL       _SPI1_Write
;soundrec.c,325 :: 		spiWrite((uint8_t) (arg >> 16));
0x00EC	0xF000C124  	MOVFF       FARG_sendCMD_arg+2, R0
0x00F0	0xF001C125  	MOVFF       FARG_sendCMD_arg+3, R1
0x00F4	0x6A02      	CLRF        R2 
0x00F6	0x6A03      	CLRF        R3 
0x00F8	0xF129C000  	MOVFF       R0, FARG_SPI1_Write_data_
0x00FC	0xDF96      	RCALL       _SPI1_Write
;soundrec.c,326 :: 		spiWrite((uint8_t) (arg >> 8));
0x00FE	0xF000C123  	MOVFF       FARG_sendCMD_arg+1, R0
0x0102	0xF001C124  	MOVFF       FARG_sendCMD_arg+2, R1
0x0106	0xF002C125  	MOVFF       FARG_sendCMD_arg+3, R2
0x010A	0x6A03      	CLRF        R3 
0x010C	0xF129C000  	MOVFF       R0, FARG_SPI1_Write_data_
0x0110	0xDF8C      	RCALL       _SPI1_Write
;soundrec.c,327 :: 		spiWrite((uint8_t) arg);
0x0112	0xF129C122  	MOVFF       FARG_sendCMD_arg, FARG_SPI1_Write_data_
0x0116	0xDF89      	RCALL       _SPI1_Write
;soundrec.c,328 :: 		spiWrite(0x95); // default CRC for SPI protocol
0x0118	0x0E95      	MOVLW       149
0x011A	0x0101      	MOVLB       1
0x011C	0x6F29      	MOVWF       FARG_SPI1_Write_data_, 1
0x011E	0xDF85      	RCALL       _SPI1_Write
;soundrec.c,329 :: 		spiReadData = spiRead();
0x0120	0x0EFF      	MOVLW       255
0x0122	0x0101      	MOVLB       1
0x0124	0x6F28      	MOVWF       FARG_SPI1_Read_buffer, 1
0x0126	0xDFBD      	RCALL       _SPI1_Read
0x0128	0xF0EEC000  	MOVFF       R0, _spiReadData
;soundrec.c,331 :: 		while (retryTimes < 10)
L_sendCMD59:
0x012C	0x0E0A      	MOVLW       10
0x012E	0x0101      	MOVLB       1
0x0130	0x5D26      	SUBWF       sendCMD_retryTimes_L0, 0, 1
0x0132	0xE20E      	BC          L_sendCMD60
;soundrec.c,333 :: 		if (spiReadData == 0)
0x0134	0x0100      	MOVLB       0
0x0136	0x51EE      	MOVF        _spiReadData, 0, 1
0x0138	0x0A00      	XORLW       0
0x013A	0xE101      	BNZ         L_sendCMD61
;soundrec.c,335 :: 		break;
0x013C	0xD009      	BRA         L_sendCMD60
;soundrec.c,336 :: 		}
L_sendCMD61:
;soundrec.c,337 :: 		spiReadData = spiRead();
0x013E	0x0EFF      	MOVLW       255
0x0140	0x0101      	MOVLB       1
0x0142	0x6F28      	MOVWF       FARG_SPI1_Read_buffer, 1
0x0144	0xDFAE      	RCALL       _SPI1_Read
0x0146	0xF0EEC000  	MOVFF       R0, _spiReadData
;soundrec.c,338 :: 		retryTimes++;
0x014A	0x0101      	MOVLB       1
0x014C	0x2B26      	INCF        sendCMD_retryTimes_L0, 1, 1
;soundrec.c,339 :: 		}
0x014E	0xD7EE      	BRA         L_sendCMD59
L_sendCMD60:
0x0150	0x0101      	MOVLB       1
;soundrec.c,341 :: 		if (retryTimes >= 10)
0x0152	0x0E0A      	MOVLW       10
0x0154	0x5D26      	SUBWF       sendCMD_retryTimes_L0, 0, 1
0x0156	0xE303      	BNC         L_sendCMD62
;soundrec.c,343 :: 		return 1; // command rejected
0x0158	0x0E01      	MOVLW       1
0x015A	0x6E00      	MOVWF       R0 
0x015C	0xD001      	BRA         L_end_sendCMD
;soundrec.c,344 :: 		}
L_sendCMD62:
;soundrec.c,347 :: 		return 0; // command accepted
0x015E	0x6A00      	CLRF        R0 
;soundrec.c,349 :: 		}
L_end_sendCMD:
0x0160	0x0012      	RETURN      0
; end of _sendCMD
_WordToStr:
;__Lib_Conversions.c,84 :: 		
;__Lib_Conversions.c,89 :: 		
0x0162	0x0101      	MOVLB       1
0x0164	0x6B25      	CLRF        WordToStr_len_L0, 1
L_WordToStr6:
0x0166	0x0E05      	MOVLW       5
0x0168	0x5D25      	SUBWF       WordToStr_len_L0, 0, 1
0x016A	0xE20A      	BC          L_WordToStr7
;__Lib_Conversions.c,90 :: 		
0x016C	0x5125      	MOVF        WordToStr_len_L0, 0, 1
0x016E	0x2523      	ADDWF       FARG_WordToStr_output, 0, 1
0x0170	0x6EE1      	MOVWF       FSR1L 
0x0172	0x0E00      	MOVLW       0
0x0174	0x2124      	ADDWFC      FARG_WordToStr_output+1, 0, 1
0x0176	0x6EE2      	MOVWF       FSR1H 
0x0178	0x0E20      	MOVLW       32
0x017A	0x6EE6      	MOVWF       POSTINC1 
;__Lib_Conversions.c,89 :: 		
0x017C	0x2B25      	INCF        WordToStr_len_L0, 1, 1
;__Lib_Conversions.c,90 :: 		
0x017E	0xD7F3      	BRA         L_WordToStr6
L_WordToStr7:
;__Lib_Conversions.c,91 :: 		
0x0180	0x5125      	MOVF        WordToStr_len_L0, 0, 1
0x0182	0x2523      	ADDWF       FARG_WordToStr_output, 0, 1
0x0184	0x6EE1      	MOVWF       FSR1L 
0x0186	0x0E00      	MOVLW       0
0x0188	0x2124      	ADDWFC      FARG_WordToStr_output+1, 0, 1
0x018A	0x6EE2      	MOVWF       FSR1H 
0x018C	0x6AE6      	CLRF        POSTINC1 
0x018E	0x0725      	DECF        WordToStr_len_L0, 1, 1
;__Lib_Conversions.c,93 :: 		
L_WordToStr9:
;__Lib_Conversions.c,94 :: 		
0x0190	0x5125      	MOVF        WordToStr_len_L0, 0, 1
0x0192	0x2523      	ADDWF       FARG_WordToStr_output, 0, 1
0x0194	0x6F26      	MOVWF       FLOC__WordToStr, 1
0x0196	0x0E00      	MOVLW       0
0x0198	0x2124      	ADDWFC      FARG_WordToStr_output+1, 0, 1
0x019A	0x6F27      	MOVWF       FLOC__WordToStr+1, 1
0x019C	0x0E0A      	MOVLW       10
0x019E	0x6E04      	MOVWF       R4 
0x01A0	0x0E00      	MOVLW       0
0x01A2	0x6E05      	MOVWF       R5 
0x01A4	0xF000C121  	MOVFF       FARG_WordToStr_input, R0
0x01A8	0xF001C122  	MOVFF       FARG_WordToStr_input+1, R1
0x01AC	0xDF53      	RCALL       _Div_16x16_U
0x01AE	0xF000C008  	MOVFF       R8, R0
0x01B2	0xF001C009  	MOVFF       R9, R1
0x01B6	0x0E30      	MOVLW       48
0x01B8	0x2600      	ADDWF       R0, 1 
0x01BA	0xFFE1C126  	MOVFF       FLOC__WordToStr, FSR1L
0x01BE	0xFFE2C127  	MOVFF       FLOC__WordToStr+1, FSR1H
0x01C2	0xFFE6C000  	MOVFF       R0, POSTINC1
;__Lib_Conversions.c,95 :: 		
0x01C6	0x0E0A      	MOVLW       10
0x01C8	0x6E04      	MOVWF       R4 
0x01CA	0x0E00      	MOVLW       0
0x01CC	0x6E05      	MOVWF       R5 
0x01CE	0xF000C121  	MOVFF       FARG_WordToStr_input, R0
0x01D2	0xF001C122  	MOVFF       FARG_WordToStr_input+1, R1
0x01D6	0xDF3E      	RCALL       _Div_16x16_U
0x01D8	0xF121C000  	MOVFF       R0, FARG_WordToStr_input
0x01DC	0xF122C001  	MOVFF       R1, FARG_WordToStr_input+1
;__Lib_Conversions.c,96 :: 		
0x01E0	0x0E00      	MOVLW       0
0x01E2	0x1801      	XORWF       R1, 0 
0x01E4	0xE102      	BNZ         L__WordToStr109
0x01E6	0x0E00      	MOVLW       0
0x01E8	0x1800      	XORWF       R0, 0 
L__WordToStr109:
0x01EA	0xE101      	BNZ         L_WordToStr11
;__Lib_Conversions.c,97 :: 		
0x01EC	0xD002      	BRA         L_WordToStr10
L_WordToStr11:
;__Lib_Conversions.c,98 :: 		
0x01EE	0x0725      	DECF        WordToStr_len_L0, 1, 1
;__Lib_Conversions.c,99 :: 		
0x01F0	0xD7CF      	BRA         L_WordToStr9
L_WordToStr10:
;__Lib_Conversions.c,100 :: 		
L_end_WordToStr:
0x01F2	0x0012      	RETURN      0
; end of _WordToStr
_UART_Write_Text:
;__Lib_UART_c67.c,123 :: 		
;__Lib_UART_c67.c,124 :: 		
0x01F4	0x0101      	MOVLB       1
0x01F6	0x6B24      	CLRF        UART_Write_Text_counter_L0, 1
;__Lib_UART_c67.c,126 :: 		
0x01F8	0xFFE9C121  	MOVFF       FARG_UART_Write_Text_uart_text, FSR0L
0x01FC	0xFFEAC122  	MOVFF       FARG_UART_Write_Text_uart_text+1, FSR0H
0x0200	0xF123CFEE  	MOVFF       POSTINC0, UART_Write_Text_data__L0
;__Lib_UART_c67.c,127 :: 		
L_UART_Write_Text16:
0x0204	0x5123      	MOVF        UART_Write_Text_data__L0, 0, 1
0x0206	0x0A00      	XORLW       0
0x0208	0xE00E      	BZ          L_UART_Write_Text17
;__Lib_UART_c67.c,128 :: 		
0x020A	0xF128C123  	MOVFF       UART_Write_Text_data__L0, FARG_UART_Write__data
0x020E	0xDF3D      	RCALL       _UART_Write
;__Lib_UART_c67.c,129 :: 		
0x0210	0x0101      	MOVLB       1
0x0212	0x2B24      	INCF        UART_Write_Text_counter_L0, 1, 1
;__Lib_UART_c67.c,130 :: 		
0x0214	0x5124      	MOVF        UART_Write_Text_counter_L0, 0, 1
0x0216	0x2521      	ADDWF       FARG_UART_Write_Text_uart_text, 0, 1
0x0218	0x6EE9      	MOVWF       FSR0L 
0x021A	0x0E00      	MOVLW       0
0x021C	0x2122      	ADDWFC      FARG_UART_Write_Text_uart_text+1, 0, 1
0x021E	0x6EEA      	MOVWF       FSR0H 
0x0220	0xF123CFEE  	MOVFF       POSTINC0, UART_Write_Text_data__L0
;__Lib_UART_c67.c,131 :: 		
0x0224	0xD7EF      	BRA         L_UART_Write_Text16
L_UART_Write_Text17:
;__Lib_UART_c67.c,132 :: 		
L_end_UART_Write_Text:
0x0226	0x0012      	RETURN      0
; end of _UART_Write_Text
_command:
;soundrec.c,132 :: 		command(char command, uint32_t fourbyte_arg, char CRCbits)
;soundrec.c,134 :: 		spiWrite(0xff);
0x0228	0x0EFF      	MOVLW       255
0x022A	0x0101      	MOVLB       1
0x022C	0x6F29      	MOVWF       FARG_SPI1_Write_data_, 1
0x022E	0xDEFD      	RCALL       _SPI1_Write
;soundrec.c,135 :: 		spiWrite(0b01000000 | command);
0x0230	0x0E40      	MOVLW       64
0x0232	0x0101      	MOVLB       1
0x0234	0x1121      	IORWF       FARG_command_command, 0, 1
0x0236	0x6F29      	MOVWF       FARG_SPI1_Write_data_, 1
0x0238	0xDEF8      	RCALL       _SPI1_Write
;soundrec.c,136 :: 		spiWrite((uint8_t) (fourbyte_arg >> 24));
0x023A	0xF000C125  	MOVFF       FARG_command_fourbyte_arg+3, R0
0x023E	0x6A01      	CLRF        R1 
0x0240	0x6A02      	CLRF        R2 
0x0242	0x6A03      	CLRF        R3 
0x0244	0xF129C000  	MOVFF       R0, FARG_SPI1_Write_data_
0x0248	0xDEF0      	RCALL       _SPI1_Write
;soundrec.c,137 :: 		spiWrite((uint8_t) (fourbyte_arg >> 16));
0x024A	0xF000C124  	MOVFF       FARG_command_fourbyte_arg+2, R0
0x024E	0xF001C125  	MOVFF       FARG_command_fourbyte_arg+3, R1
0x0252	0x6A02      	CLRF        R2 
0x0254	0x6A03      	CLRF        R3 
0x0256	0xF129C000  	MOVFF       R0, FARG_SPI1_Write_data_
0x025A	0xDEE7      	RCALL       _SPI1_Write
;soundrec.c,138 :: 		spiWrite((uint8_t) (fourbyte_arg >> 8));
0x025C	0xF000C123  	MOVFF       FARG_command_fourbyte_arg+1, R0
0x0260	0xF001C124  	MOVFF       FARG_command_fourbyte_arg+2, R1
0x0264	0xF002C125  	MOVFF       FARG_command_fourbyte_arg+3, R2
0x0268	0x6A03      	CLRF        R3 
0x026A	0xF129C000  	MOVFF       R0, FARG_SPI1_Write_data_
0x026E	0xDEDD      	RCALL       _SPI1_Write
;soundrec.c,139 :: 		spiWrite((uint8_t) (fourbyte_arg));
0x0270	0xF129C122  	MOVFF       FARG_command_fourbyte_arg, FARG_SPI1_Write_data_
0x0274	0xDEDA      	RCALL       _SPI1_Write
;soundrec.c,140 :: 		spiWrite(CRCbits);
0x0276	0xF129C126  	MOVFF       FARG_command_CRCbits, FARG_SPI1_Write_data_
0x027A	0xDED7      	RCALL       _SPI1_Write
;soundrec.c,141 :: 		spiReadData = spiRead();
0x027C	0x0EFF      	MOVLW       255
0x027E	0x0101      	MOVLB       1
0x0280	0x6F28      	MOVWF       FARG_SPI1_Read_buffer, 1
0x0282	0xDF0F      	RCALL       _SPI1_Read
0x0284	0xF0EEC000  	MOVFF       R0, _spiReadData
;soundrec.c,142 :: 		}
L_end_command:
0x0288	0x0012      	RETURN      0
; end of _command
_SPI1_Init_Advanced:
;__Lib_SPI_c345.c,40 :: 		
;__Lib_SPI_c345.c,41 :: 		
0x028A	0x0EA2      	MOVLW       _SPI1_Read
0x028C	0x0101      	MOVLB       1
0x028E	0x6F01      	MOVWF       _SPI_Rd_Ptr, 1
0x0290	0x0E00      	MOVLW       hi_addr(_SPI1_Read)
0x0292	0x6F02      	MOVWF       _SPI_Rd_Ptr+1, 1
0x0294	0x0E28      	MOVLW       FARG_SPI1_Read_buffer
0x0296	0x6F03      	MOVWF       _SPI_Rd_Ptr+2, 1
0x0298	0x0E01      	MOVLW       hi_addr(FARG_SPI1_Read_buffer)
0x029A	0x6F04      	MOVWF       _SPI_Rd_Ptr+3, 1
;__Lib_SPI_c345.c,42 :: 		
0x029C	0x0E2A      	MOVLW       _SPI1_Write
0x029E	0x6F05      	MOVWF       _SPI_Wr_Ptr, 1
0x02A0	0x0E00      	MOVLW       hi_addr(_SPI1_Write)
0x02A2	0x6F06      	MOVWF       _SPI_Wr_Ptr+1, 1
0x02A4	0x0E29      	MOVLW       FARG_SPI1_Write_data_
0x02A6	0x6F07      	MOVWF       _SPI_Wr_Ptr+2, 1
0x02A8	0x0E01      	MOVLW       hi_addr(FARG_SPI1_Write_data_)
0x02AA	0x6F08      	MOVWF       _SPI_Wr_Ptr+3, 1
;__Lib_SPI_c345.c,44 :: 		
0x02AC	0x9A94      	BCF         TRISC5_bit, BitPos(TRISC5_bit+0) 
;__Lib_SPI_c345.c,45 :: 		
0x02AE	0x5117      	MOVF        FARG_SPI1_Init_Advanced_master, 0, 1
0x02B0	0x0A04      	XORLW       4
0x02B2	0xE102      	BNZ         L_SPI1_Init_Advanced0
0x02B4	0x8694      	BSF         TRISC3_bit, BitPos(TRISC3_bit+0) 
0x02B6	0xD001      	BRA         L_SPI1_Init_Advanced1
L_SPI1_Init_Advanced0:
;__Lib_SPI_c345.c,46 :: 		
0x02B8	0x9694      	BCF         TRISC3_bit, BitPos(TRISC3_bit+0) 
L_SPI1_Init_Advanced1:
;__Lib_SPI_c345.c,47 :: 		
0x02BA	0x8894      	BSF         TRISC4_bit, BitPos(TRISC4_bit+0) 
;__Lib_SPI_c345.c,49 :: 		
0x02BC	0x6AC6      	CLRF        SSPCON1 
;__Lib_SPI_c345.c,50 :: 		
0x02BE	0x5117      	MOVF        FARG_SPI1_Init_Advanced_master, 0, 1
0x02C0	0x12C6      	IORWF       SSPCON1, 1 
;__Lib_SPI_c345.c,51 :: 		
0x02C2	0x5119      	MOVF        FARG_SPI1_Init_Advanced_clock_idle, 0, 1
0x02C4	0x12C6      	IORWF       SSPCON1, 1 
;__Lib_SPI_c345.c,52 :: 		
0x02C6	0x5118      	MOVF        FARG_SPI1_Init_Advanced_data_sample, 0, 1
0x02C8	0x12C7      	IORWF       SSPSTAT, 1 
;__Lib_SPI_c345.c,54 :: 		
0x02CA	0x5319      	MOVF        FARG_SPI1_Init_Advanced_clock_idle, 1, 1
0x02CC	0xE005      	BZ          L_SPI1_Init_Advanced2
;__Lib_SPI_c345.c,55 :: 		
0x02CE	0x511A      	MOVF        FARG_SPI1_Init_Advanced_transmit_edge, 0, 1
0x02D0	0x0A00      	XORLW       0
0x02D2	0xB4D8      	BTFSC       STATUS, 2 
;__Lib_SPI_c345.c,56 :: 		
0x02D4	0x8CC7      	BSF         SSPSTAT, 6 
L_SPI1_Init_Advanced3:
;__Lib_SPI_c345.c,57 :: 		
0x02D6	0xD003      	BRA         L_SPI1_Init_Advanced4
L_SPI1_Init_Advanced2:
;__Lib_SPI_c345.c,59 :: 		
0x02D8	0x531A      	MOVF        FARG_SPI1_Init_Advanced_transmit_edge, 1, 1
0x02DA	0xA4D8      	BTFSS       STATUS, 2 
;__Lib_SPI_c345.c,60 :: 		
0x02DC	0x8CC7      	BSF         SSPSTAT, 6 
L_SPI1_Init_Advanced5:
;__Lib_SPI_c345.c,61 :: 		
L_SPI1_Init_Advanced4:
;__Lib_SPI_c345.c,62 :: 		
0x02DE	0x8AC6      	BSF         SSPCON1, 5 
;__Lib_SPI_c345.c,63 :: 		
L_end_SPI1_Init_Advanced:
0x02E0	0x0012      	RETURN      0
; end of _SPI1_Init_Advanced
___CC2DW:
;__Lib_System.c,21 :: 		
;__Lib_System.c,23 :: 		
_CC2DL_Loop1:
;__Lib_System.c,24 :: 		
0x02E2	0x0009      	TBLRD*+
;__Lib_System.c,25 :: 		
0x02E4	0xFFE6CFF5  	MOVFF       TABLAT, POSTINC1
;__Lib_System.c,26 :: 		
0x02E8	0x0600      	DECF        R0, 1, 0
;__Lib_System.c,27 :: 		
0x02EA	0xE1FB      	BNZ         _CC2DL_Loop1
;__Lib_System.c,28 :: 		
0x02EC	0x0601      	DECF        R1, 1, 0
;__Lib_System.c,29 :: 		
0x02EE	0xE1F9      	BNZ         _CC2DL_Loop1
;__Lib_System.c,31 :: 		
L_end___CC2DW:
0x02F0	0x0012      	RETURN      0
; end of ___CC2DW
_UART1_Init:
;__Lib_UART_c67.c,15 :: 		
;__Lib_UART_c67.c,18 :: 		
0x02F2	0x0E1C      	MOVLW       _UART1_Write
0x02F4	0x0101      	MOVLB       1
0x02F6	0x6F09      	MOVWF       _UART_Wr_Ptr, 1
0x02F8	0x0E00      	MOVLW       hi_addr(_UART1_Write)
0x02FA	0x6F0A      	MOVWF       _UART_Wr_Ptr+1, 1
0x02FC	0x0E29      	MOVLW       FARG_UART1_Write_data_
0x02FE	0x6F0B      	MOVWF       _UART_Wr_Ptr+2, 1
0x0300	0x0E01      	MOVLW       hi_addr(FARG_UART1_Write_data_)
0x0302	0x6F0C      	MOVWF       _UART_Wr_Ptr+3, 1
;__Lib_UART_c67.c,19 :: 		
0x0304	0x0EFF      	MOVLW       _UART1_Read
0x0306	0x0100      	MOVLB       0
0x0308	0x6FF1      	MOVWF       _UART_Rd_Ptr, 1
0x030A	0x0EFF      	MOVLW       hi_addr(_UART1_Read)
0x030C	0x6FF2      	MOVWF       _UART_Rd_Ptr+1, 1
0x030E	0x0E00      	MOVLW       0
0x0310	0x6FF3      	MOVWF       _UART_Rd_Ptr+2, 1
0x0312	0x0E00      	MOVLW       0
0x0314	0x6FF4      	MOVWF       _UART_Rd_Ptr+3, 1
;__Lib_UART_c67.c,20 :: 		
0x0316	0x0EFF      	MOVLW       _UART1_Data_Ready
0x0318	0x6FF5      	MOVWF       _UART_Rdy_Ptr, 1
0x031A	0x0EFF      	MOVLW       hi_addr(_UART1_Data_Ready)
0x031C	0x6FF6      	MOVWF       _UART_Rdy_Ptr+1, 1
0x031E	0x0E00      	MOVLW       0
0x0320	0x6FF7      	MOVWF       _UART_Rdy_Ptr+2, 1
0x0322	0x0E00      	MOVLW       0
0x0324	0x6FF8      	MOVWF       _UART_Rdy_Ptr+3, 1
;__Lib_UART_c67.c,21 :: 		
0x0326	0x0EFF      	MOVLW       _UART1_Tx_Idle
0x0328	0x6FF9      	MOVWF       _UART_Tx_Idle_Ptr, 1
0x032A	0x0EFF      	MOVLW       hi_addr(_UART1_Tx_Idle)
0x032C	0x6FFA      	MOVWF       _UART_Tx_Idle_Ptr+1, 1
0x032E	0x0E00      	MOVLW       0
0x0330	0x6FFB      	MOVWF       _UART_Tx_Idle_Ptr+2, 1
0x0332	0x0E00      	MOVLW       0
0x0334	0x6FFC      	MOVWF       _UART_Tx_Idle_Ptr+3, 1
;__Lib_UART_c67.c,23 :: 		
0x0336	0x8AAC      	BSF         TXSTA, 5 
;__Lib_UART_c67.c,24 :: 		
0x0338	0x0E90      	MOVLW       144
0x033A	0x6EAB      	MOVWF       RCSTA 
;__Lib_UART_c67.c,25 :: 		
0x033C	0x8E94      	BSF         TRISC7_bit, BitPos(TRISC7_bit+0) 
;__Lib_UART_c67.c,26 :: 		
0x033E	0x9C94      	BCF         TRISC6_bit, BitPos(TRISC6_bit+0) 
;__Lib_UART_c67.c,28 :: 		
L_UART1_Init0:
0x0340	0xAA9E      	BTFSS       PIR1, 5 
0x0342	0xD003      	BRA         L_UART1_Init1
;__Lib_UART_c67.c,29 :: 		
0x0344	0xF000CFAE  	MOVFF       RCREG, R0
0x0348	0xD7FB      	BRA         L_UART1_Init0
L_UART1_Init1:
;__Lib_UART_c67.c,30 :: 		
L_end_UART1_Init:
0x034A	0x0012      	RETURN      0
; end of _UART1_Init
_mmcInit:
;soundrec.c,145 :: 		mmcInit(void)
;soundrec.c,148 :: 		volatile uint8_t error = 0;
0x034C	0x0101      	MOVLB       1
0x034E	0x6B00      	CLRF        mmcInit_error_L0, 1
;soundrec.c,150 :: 		Delay_ms(2);
0x0350	0x0E0D      	MOVLW       13
0x0352	0x6E0C      	MOVWF       R12, 0
0x0354	0x0EFB      	MOVLW       251
0x0356	0x6E0D      	MOVWF       R13, 0
L_mmcInit9:
0x0358	0x2E0D      	DECFSZ      R13, 1, 0
0x035A	0xD7FE      	BRA         L_mmcInit9
0x035C	0x2E0C      	DECFSZ      R12, 1, 0
0x035E	0xD7FC      	BRA         L_mmcInit9
0x0360	0x0000      	NOP
0x0362	0x0000      	NOP
;soundrec.c,151 :: 		Mmc_Chip_Select = 1;
0x0364	0x848B      	BSF         LATC2_bit, BitPos(LATC2_bit+0) 
;soundrec.c,152 :: 		for (u = 0; u < 10; u++)
0x0366	0x0100      	MOVLB       0
0x0368	0x6BFF      	CLRF        mmcInit_u_L0, 1
L_mmcInit10:
0x036A	0x0E0A      	MOVLW       10
0x036C	0x5DFF      	SUBWF       mmcInit_u_L0, 0, 1
0x036E	0xE207      	BC          L_mmcInit11
;soundrec.c,154 :: 		spiWrite(0xff);
0x0370	0x0EFF      	MOVLW       255
0x0372	0x0101      	MOVLB       1
0x0374	0x6F29      	MOVWF       FARG_SPI1_Write_data_, 1
0x0376	0xDE59      	RCALL       _SPI1_Write
;soundrec.c,152 :: 		for (u = 0; u < 10; u++)
0x0378	0x0100      	MOVLB       0
0x037A	0x2BFF      	INCF        mmcInit_u_L0, 1, 1
;soundrec.c,155 :: 		}
0x037C	0xD7F6      	BRA         L_mmcInit10
L_mmcInit11:
;soundrec.c,156 :: 		Mmc_Chip_Select = 0;
0x037E	0x948B      	BCF         LATC2_bit, BitPos(LATC2_bit+0) 
;soundrec.c,157 :: 		Delay_ms(1);
0x0380	0x0E07      	MOVLW       7
0x0382	0x6E0C      	MOVWF       R12, 0
0x0384	0x0E7D      	MOVLW       125
0x0386	0x6E0D      	MOVWF       R13, 0
L_mmcInit13:
0x0388	0x2E0D      	DECFSZ      R13, 1, 0
0x038A	0xD7FE      	BRA         L_mmcInit13
0x038C	0x2E0C      	DECFSZ      R12, 1, 0
0x038E	0xD7FC      	BRA         L_mmcInit13
;soundrec.c,158 :: 		command(0, 0, 0x95);
0x0390	0x0101      	MOVLB       1
0x0392	0x6B21      	CLRF        FARG_command_command, 1
0x0394	0x6B22      	CLRF        FARG_command_fourbyte_arg, 1
0x0396	0x6B23      	CLRF        FARG_command_fourbyte_arg+1, 1
0x0398	0x6B24      	CLRF        FARG_command_fourbyte_arg+2, 1
0x039A	0x6B25      	CLRF        FARG_command_fourbyte_arg+3, 1
0x039C	0x0E95      	MOVLW       149
0x039E	0x6F26      	MOVWF       FARG_command_CRCbits, 1
0x03A0	0xDF43      	RCALL       _command
;soundrec.c,159 :: 		count = 0;
0x03A2	0x0100      	MOVLB       0
0x03A4	0x6BED      	CLRF        _count, 1
;soundrec.c,160 :: 		while ((spiReadData != 1) && (count < 10))
L_mmcInit14:
0x03A6	0x51EE      	MOVF        _spiReadData, 0, 1
0x03A8	0x0A01      	XORLW       1
0x03AA	0xE010      	BZ          L_mmcInit15
0x03AC	0x0E0A      	MOVLW       10
0x03AE	0x5DED      	SUBWF       _count, 0, 1
0x03B0	0xE20D      	BC          L_mmcInit15
L__mmcInit144:
;soundrec.c,162 :: 		spiReadData = spiRead();
0x03B2	0x0EFF      	MOVLW       255
0x03B4	0x0101      	MOVLB       1
0x03B6	0x6F28      	MOVWF       FARG_SPI1_Read_buffer, 1
0x03B8	0xDE74      	RCALL       _SPI1_Read
0x03BA	0xF0EEC000  	MOVFF       R0, _spiReadData
;soundrec.c,163 :: 		count++;
0x03BE	0x0100      	MOVLB       0
0x03C0	0x51ED      	MOVF        _count, 0, 1
0x03C2	0x0F01      	ADDLW       1
0x03C4	0x6E00      	MOVWF       R0 
0x03C6	0xF0EDC000  	MOVFF       R0, _count
;soundrec.c,164 :: 		}
0x03CA	0xD7ED      	BRA         L_mmcInit14
L_mmcInit15:
;soundrec.c,165 :: 		if (count >= 10)
0x03CC	0x0E0A      	MOVLW       10
0x03CE	0x5DED      	SUBWF       _count, 0, 1
0x03D0	0xE303      	BNC         L_mmcInit18
;soundrec.c,167 :: 		error = initERROR_CMD0;
0x03D2	0x0E01      	MOVLW       1
0x03D4	0x0101      	MOVLB       1
0x03D6	0x6F00      	MOVWF       mmcInit_error_L0, 1
;soundrec.c,168 :: 		}
L_mmcInit18:
0x03D8	0x0101      	MOVLB       1
;soundrec.c,169 :: 		command(1, 0, 0xff);
0x03DA	0x0E01      	MOVLW       1
0x03DC	0x6F21      	MOVWF       FARG_command_command, 1
0x03DE	0x6B22      	CLRF        FARG_command_fourbyte_arg, 1
0x03E0	0x6B23      	CLRF        FARG_command_fourbyte_arg+1, 1
0x03E2	0x6B24      	CLRF        FARG_command_fourbyte_arg+2, 1
0x03E4	0x6B25      	CLRF        FARG_command_fourbyte_arg+3, 1
0x03E6	0x0EFF      	MOVLW       255
0x03E8	0x6F26      	MOVWF       FARG_command_CRCbits, 1
0x03EA	0xDF1E      	RCALL       _command
;soundrec.c,170 :: 		count = 0;
0x03EC	0x0100      	MOVLB       0
0x03EE	0x6BED      	CLRF        _count, 1
;soundrec.c,171 :: 		while ((spiReadData != 0) && (count < 1000))
L_mmcInit19:
0x03F0	0x51EE      	MOVF        _spiReadData, 0, 1
0x03F2	0x0A00      	XORLW       0
0x03F4	0xE020      	BZ          L_mmcInit20
0x03F6	0x0E80      	MOVLW       128
0x03F8	0x6E00      	MOVWF       R0 
0x03FA	0x0E80      	MOVLW       128
0x03FC	0x0A03      	XORLW       3
0x03FE	0x5C00      	SUBWF       R0, 0 
0x0400	0xE102      	BNZ         L__mmcInit151
0x0402	0x0EE8      	MOVLW       232
0x0404	0x5DED      	SUBWF       _count, 0, 1
L__mmcInit151:
0x0406	0xE217      	BC          L_mmcInit20
L__mmcInit143:
;soundrec.c,173 :: 		command(1, 0, 0xff);
0x0408	0x0E01      	MOVLW       1
0x040A	0x0101      	MOVLB       1
0x040C	0x6F21      	MOVWF       FARG_command_command, 1
0x040E	0x6B22      	CLRF        FARG_command_fourbyte_arg, 1
0x0410	0x6B23      	CLRF        FARG_command_fourbyte_arg+1, 1
0x0412	0x6B24      	CLRF        FARG_command_fourbyte_arg+2, 1
0x0414	0x6B25      	CLRF        FARG_command_fourbyte_arg+3, 1
0x0416	0x0EFF      	MOVLW       255
0x0418	0x6F26      	MOVWF       FARG_command_CRCbits, 1
0x041A	0xDF06      	RCALL       _command
;soundrec.c,174 :: 		spiReadData = spiRead();
0x041C	0x0EFF      	MOVLW       255
0x041E	0x0101      	MOVLB       1
0x0420	0x6F28      	MOVWF       FARG_SPI1_Read_buffer, 1
0x0422	0xDE3F      	RCALL       _SPI1_Read
0x0424	0xF0EEC000  	MOVFF       R0, _spiReadData
;soundrec.c,175 :: 		count++;
0x0428	0x0100      	MOVLB       0
0x042A	0x51ED      	MOVF        _count, 0, 1
0x042C	0x0F01      	ADDLW       1
0x042E	0x6E00      	MOVWF       R0 
0x0430	0xF0EDC000  	MOVFF       R0, _count
;soundrec.c,176 :: 		}
0x0434	0xD7DD      	BRA         L_mmcInit19
L_mmcInit20:
;soundrec.c,177 :: 		if (count >= 1000)
0x0436	0x0E80      	MOVLW       128
0x0438	0x6E00      	MOVWF       R0 
0x043A	0x0E80      	MOVLW       128
0x043C	0x0A03      	XORLW       3
0x043E	0x5C00      	SUBWF       R0, 0 
0x0440	0xE102      	BNZ         L__mmcInit152
0x0442	0x0EE8      	MOVLW       232
0x0444	0x5DED      	SUBWF       _count, 0, 1
L__mmcInit152:
0x0446	0xE303      	BNC         L_mmcInit23
;soundrec.c,179 :: 		error = initERROR_CMD1;
0x0448	0x0E02      	MOVLW       2
0x044A	0x0101      	MOVLB       1
0x044C	0x6F00      	MOVWF       mmcInit_error_L0, 1
;soundrec.c,180 :: 		}
L_mmcInit23:
0x044E	0x0101      	MOVLB       1
;soundrec.c,181 :: 		command(16, 512, 0xff);
0x0450	0x0E10      	MOVLW       16
0x0452	0x6F21      	MOVWF       FARG_command_command, 1
0x0454	0x0E00      	MOVLW       0
0x0456	0x6F22      	MOVWF       FARG_command_fourbyte_arg, 1
0x0458	0x0E02      	MOVLW       2
0x045A	0x6F23      	MOVWF       FARG_command_fourbyte_arg+1, 1
0x045C	0x0E00      	MOVLW       0
0x045E	0x6F24      	MOVWF       FARG_command_fourbyte_arg+2, 1
0x0460	0x6F25      	MOVWF       FARG_command_fourbyte_arg+3, 1
0x0462	0x0EFF      	MOVLW       255
0x0464	0x6F26      	MOVWF       FARG_command_CRCbits, 1
0x0466	0xDEE0      	RCALL       _command
;soundrec.c,182 :: 		count = 0;
0x0468	0x0100      	MOVLB       0
0x046A	0x6BED      	CLRF        _count, 1
;soundrec.c,183 :: 		while ((spiReadData != 0) && (count < 1000))
L_mmcInit24:
0x046C	0x51EE      	MOVF        _spiReadData, 0, 1
0x046E	0x0A00      	XORLW       0
0x0470	0xE016      	BZ          L_mmcInit25
0x0472	0x0E80      	MOVLW       128
0x0474	0x6E00      	MOVWF       R0 
0x0476	0x0E80      	MOVLW       128
0x0478	0x0A03      	XORLW       3
0x047A	0x5C00      	SUBWF       R0, 0 
0x047C	0xE102      	BNZ         L__mmcInit153
0x047E	0x0EE8      	MOVLW       232
0x0480	0x5DED      	SUBWF       _count, 0, 1
L__mmcInit153:
0x0482	0xE20D      	BC          L_mmcInit25
L__mmcInit142:
;soundrec.c,185 :: 		spiReadData = spiRead();
0x0484	0x0EFF      	MOVLW       255
0x0486	0x0101      	MOVLB       1
0x0488	0x6F28      	MOVWF       FARG_SPI1_Read_buffer, 1
0x048A	0xDE0B      	RCALL       _SPI1_Read
0x048C	0xF0EEC000  	MOVFF       R0, _spiReadData
;soundrec.c,186 :: 		count++;
0x0490	0x0100      	MOVLB       0
0x0492	0x51ED      	MOVF        _count, 0, 1
0x0494	0x0F01      	ADDLW       1
0x0496	0x6E00      	MOVWF       R0 
0x0498	0xF0EDC000  	MOVFF       R0, _count
;soundrec.c,187 :: 		}
0x049C	0xD7E7      	BRA         L_mmcInit24
L_mmcInit25:
;soundrec.c,188 :: 		if (count >= 1000)
0x049E	0x0E80      	MOVLW       128
0x04A0	0x6E00      	MOVWF       R0 
0x04A2	0x0E80      	MOVLW       128
0x04A4	0x0A03      	XORLW       3
0x04A6	0x5C00      	SUBWF       R0, 0 
0x04A8	0xE102      	BNZ         L__mmcInit154
0x04AA	0x0EE8      	MOVLW       232
0x04AC	0x5DED      	SUBWF       _count, 0, 1
L__mmcInit154:
0x04AE	0xE303      	BNC         L_mmcInit28
;soundrec.c,190 :: 		error = initERROR_CMD16;
0x04B0	0x0E03      	MOVLW       3
0x04B2	0x0101      	MOVLB       1
0x04B4	0x6F00      	MOVWF       mmcInit_error_L0, 1
;soundrec.c,191 :: 		}
L_mmcInit28:
;soundrec.c,192 :: 		return error;
0x04B6	0xF000C100  	MOVFF       mmcInit_error_L0, R0
;soundrec.c,193 :: 		}
L_end_mmcInit:
0x04BA	0x0012      	RETURN      0
; end of _mmcInit
_IntToStr:
;__Lib_Conversions.c,146 :: 		
;__Lib_Conversions.c,152 :: 		
0x04BC	0x0101      	MOVLB       1
0x04BE	0x6B1D      	CLRF        IntToStr_negative_L0, 1
0x04C0	0x6B1E      	CLRF        IntToStr_negative_L0+1, 1
;__Lib_Conversions.c,153 :: 		
0x04C2	0xF11FC117  	MOVFF       FARG_IntToStr_input, IntToStr_inword_L0
0x04C6	0xF120C118  	MOVFF       FARG_IntToStr_input+1, IntToStr_inword_L0+1
;__Lib_Conversions.c,154 :: 		
0x04CA	0x0E80      	MOVLW       128
0x04CC	0x1918      	XORWF       FARG_IntToStr_input+1, 0, 1
0x04CE	0x6E00      	MOVWF       R0 
0x04D0	0x0E80      	MOVLW       128
0x04D2	0x5C00      	SUBWF       R0, 0 
0x04D4	0xE102      	BNZ         L__IntToStr115
0x04D6	0x0E00      	MOVLW       0
0x04D8	0x5D17      	SUBWF       FARG_IntToStr_input, 0, 1
L__IntToStr115:
0x04DA	0xE20B      	BC          L_IntToStr23
;__Lib_Conversions.c,155 :: 		
0x04DC	0x0E01      	MOVLW       1
0x04DE	0x6F1D      	MOVWF       IntToStr_negative_L0, 1
0x04E0	0x0E00      	MOVLW       0
0x04E2	0x6F1E      	MOVWF       IntToStr_negative_L0+1, 1
;__Lib_Conversions.c,156 :: 		
0x04E4	0x5117      	MOVF        FARG_IntToStr_input, 0, 1
0x04E6	0x0800      	SUBLW       0
0x04E8	0x6F1F      	MOVWF       IntToStr_inword_L0, 1
0x04EA	0xF120C118  	MOVFF       FARG_IntToStr_input+1, IntToStr_inword_L0+1
0x04EE	0x0E00      	MOVLW       0
0x04F0	0x5720      	SUBFWB      IntToStr_inword_L0+1, 1, 1
;__Lib_Conversions.c,157 :: 		
L_IntToStr23:
;__Lib_Conversions.c,158 :: 		
0x04F2	0xF121C11F  	MOVFF       IntToStr_inword_L0, FARG_WordToStr_input
0x04F6	0xF122C120  	MOVFF       IntToStr_inword_L0+1, FARG_WordToStr_input+1
0x04FA	0xF123C119  	MOVFF       FARG_IntToStr_output, FARG_WordToStr_output
0x04FE	0xF124C11A  	MOVFF       FARG_IntToStr_output+1, FARG_WordToStr_output+1
0x0502	0xDE2F      	RCALL       _WordToStr
;__Lib_Conversions.c,160 :: 		
0x0504	0x0E06      	MOVLW       6
0x0506	0x6F1B      	MOVWF       IntToStr_i_L0, 1
0x0508	0x0E00      	MOVLW       0
0x050A	0x6F1C      	MOVWF       IntToStr_i_L0+1, 1
;__Lib_Conversions.c,161 :: 		
L_IntToStr24:
0x050C	0x0E00      	MOVLW       0
0x050E	0x6E00      	MOVWF       R0 
0x0510	0x511C      	MOVF        IntToStr_i_L0+1, 0, 1
0x0512	0x5C00      	SUBWF       R0, 0 
0x0514	0xE102      	BNZ         L__IntToStr116
0x0516	0x511B      	MOVF        IntToStr_i_L0, 0, 1
0x0518	0x0800      	SUBLW       0
L__IntToStr116:
0x051A	0xE219      	BC          L_IntToStr25
;__Lib_Conversions.c,162 :: 		
0x051C	0x511B      	MOVF        IntToStr_i_L0, 0, 1
0x051E	0x2519      	ADDWF       FARG_IntToStr_output, 0, 1
0x0520	0x6EE1      	MOVWF       FSR1L 
0x0522	0x511C      	MOVF        IntToStr_i_L0+1, 0, 1
0x0524	0x211A      	ADDWFC      FARG_IntToStr_output+1, 0, 1
0x0526	0x6EE2      	MOVWF       FSR1H 
0x0528	0x0E01      	MOVLW       1
0x052A	0x5D1B      	SUBWF       IntToStr_i_L0, 0, 1
0x052C	0x6E00      	MOVWF       R0 
0x052E	0x0E00      	MOVLW       0
0x0530	0x591C      	SUBWFB      IntToStr_i_L0+1, 0, 1
0x0532	0x6E01      	MOVWF       R1 
0x0534	0x5000      	MOVF        R0, 0 
0x0536	0x2519      	ADDWF       FARG_IntToStr_output, 0, 1
0x0538	0x6EE9      	MOVWF       FSR0L 
0x053A	0x5001      	MOVF        R1, 0 
0x053C	0x211A      	ADDWFC      FARG_IntToStr_output+1, 0, 1
0x053E	0x6EEA      	MOVWF       FSR0H 
0x0540	0xFFE6CFEE  	MOVFF       POSTINC0, POSTINC1
;__Lib_Conversions.c,163 :: 		
0x0544	0x0E01      	MOVLW       1
0x0546	0x5F1B      	SUBWF       IntToStr_i_L0, 1, 1
0x0548	0x0E00      	MOVLW       0
0x054A	0x5B1C      	SUBWFB      IntToStr_i_L0+1, 1, 1
;__Lib_Conversions.c,164 :: 		
0x054C	0xD7DF      	BRA         L_IntToStr24
L_IntToStr25:
;__Lib_Conversions.c,165 :: 		
0x054E	0xFFE1C119  	MOVFF       FARG_IntToStr_output, FSR1L
0x0552	0xFFE2C11A  	MOVFF       FARG_IntToStr_output+1, FSR1H
0x0556	0x0E20      	MOVLW       32
0x0558	0x6EE6      	MOVWF       POSTINC1 
;__Lib_Conversions.c,166 :: 		
0x055A	0x511D      	MOVF        IntToStr_negative_L0, 0, 1
0x055C	0x111E      	IORWF       IntToStr_negative_L0+1, 0, 1
0x055E	0xE01A      	BZ          L_IntToStr26
;__Lib_Conversions.c,167 :: 		
0x0560	0x6B1B      	CLRF        IntToStr_i_L0, 1
0x0562	0x6B1C      	CLRF        IntToStr_i_L0+1, 1
;__Lib_Conversions.c,168 :: 		
L_IntToStr27:
0x0564	0x511B      	MOVF        IntToStr_i_L0, 0, 1
0x0566	0x2519      	ADDWF       FARG_IntToStr_output, 0, 1
0x0568	0x6EE9      	MOVWF       FSR0L 
0x056A	0x511C      	MOVF        IntToStr_i_L0+1, 0, 1
0x056C	0x211A      	ADDWFC      FARG_IntToStr_output+1, 0, 1
0x056E	0x6EEA      	MOVWF       FSR0H 
0x0570	0x50EE      	MOVF        POSTINC0, 0 
0x0572	0x0A20      	XORLW       32
0x0574	0xE103      	BNZ         L_IntToStr28
0x0576	0x4B1B      	INFSNZ      IntToStr_i_L0, 1, 1
0x0578	0x2B1C      	INCF        IntToStr_i_L0+1, 1, 1
0x057A	0xD7F4      	BRA         L_IntToStr27
L_IntToStr28:
;__Lib_Conversions.c,169 :: 		
0x057C	0x0E01      	MOVLW       1
0x057E	0x5F1B      	SUBWF       IntToStr_i_L0, 1, 1
0x0580	0x0E00      	MOVLW       0
0x0582	0x5B1C      	SUBWFB      IntToStr_i_L0+1, 1, 1
;__Lib_Conversions.c,170 :: 		
0x0584	0x511B      	MOVF        IntToStr_i_L0, 0, 1
0x0586	0x2519      	ADDWF       FARG_IntToStr_output, 0, 1
0x0588	0x6EE1      	MOVWF       FSR1L 
0x058A	0x511C      	MOVF        IntToStr_i_L0+1, 0, 1
0x058C	0x211A      	ADDWFC      FARG_IntToStr_output+1, 0, 1
0x058E	0x6EE2      	MOVWF       FSR1H 
0x0590	0x0E2D      	MOVLW       45
0x0592	0x6EE6      	MOVWF       POSTINC1 
L_IntToStr26:
;__Lib_Conversions.c,171 :: 		
L_end_IntToStr:
0x0594	0x0012      	RETURN      0
; end of _IntToStr
_writeMultipleBlock:
;soundrec.c,352 :: 		writeMultipleBlock(void)
;soundrec.c,364 :: 		do
L_writeMultipleBlock64:
;soundrec.c,366 :: 		if (!(sendCMD(25, 0))) // write command accepted
0x0596	0x0E19      	MOVLW       25
0x0598	0x0101      	MOVLB       1
0x059A	0x6F21      	MOVWF       FARG_sendCMD_cmd, 1
0x059C	0x6B22      	CLRF        FARG_sendCMD_arg, 1
0x059E	0x6B23      	CLRF        FARG_sendCMD_arg+1, 1
0x05A0	0x6B24      	CLRF        FARG_sendCMD_arg+2, 1
0x05A2	0x6B25      	CLRF        FARG_sendCMD_arg+3, 1
0x05A4	0xDD87      	RCALL       _sendCMD
0x05A6	0x5200      	MOVF        R0, 1 
0x05A8	0xE102      	BNZ         L_writeMultipleBlock67
;soundrec.c,368 :: 		error = 0;
0x05AA	0x6B00      	CLRF        writeMultipleBlock_error_L0, 1
;soundrec.c,369 :: 		break;
0x05AC	0xD00B      	BRA         L_writeMultipleBlock65
;soundrec.c,370 :: 		}
L_writeMultipleBlock67:
;soundrec.c,373 :: 		error = 1;
0x05AE	0x0E01      	MOVLW       1
0x05B0	0x6F00      	MOVWF       writeMultipleBlock_error_L0, 1
;soundrec.c,374 :: 		retry++;
0x05B2	0x0100      	MOVLB       0
0x05B4	0x51FF      	MOVF        writeMultipleBlock_retry_L0, 0, 1
0x05B6	0x0F01      	ADDLW       1
0x05B8	0x6E00      	MOVWF       R0 
0x05BA	0xF0FFC000  	MOVFF       R0, writeMultipleBlock_retry_L0
;soundrec.c,377 :: 		while (retry < 50);
0x05BE	0x0E32      	MOVLW       50
0x05C0	0x5DFF      	SUBWF       writeMultipleBlock_retry_L0, 0, 1
0x05C2	0xE3E9      	BNC         L_writeMultipleBlock64
L_writeMultipleBlock65:
;soundrec.c,379 :: 		if (!error)
0x05C4	0x0101      	MOVLB       1
0x05C6	0x5300      	MOVF        writeMultipleBlock_error_L0, 1, 1
0x05C8	0xA4D8      	BTFSS       STATUS, 2 
0x05CA	0xD09C      	BRA         L_writeMultipleBlock69
;soundrec.c,381 :: 		spiWrite(0xff);
0x05CC	0x0EFF      	MOVLW       255
0x05CE	0x6F29      	MOVWF       FARG_SPI1_Write_data_, 1
0x05D0	0xDD2C      	RCALL       _SPI1_Write
;soundrec.c,382 :: 		spiWrite(0xff);
0x05D2	0x0EFF      	MOVLW       255
0x05D4	0x0101      	MOVLB       1
0x05D6	0x6F29      	MOVWF       FARG_SPI1_Write_data_, 1
0x05D8	0xDD28      	RCALL       _SPI1_Write
;soundrec.c,383 :: 		spiWrite(0xff); // Dummy clock
0x05DA	0x0EFF      	MOVLW       255
0x05DC	0x0101      	MOVLB       1
0x05DE	0x6F29      	MOVWF       FARG_SPI1_Write_data_, 1
0x05E0	0xDD24      	RCALL       _SPI1_Write
;soundrec.c,384 :: 		numberOfSectors = 0; // Initialize the number of sector
0x05E2	0x0100      	MOVLB       0
0x05E4	0x6BEF      	CLRF        _numberOfSectors, 1
0x05E6	0x6BF0      	CLRF        _numberOfSectors+1, 1
;soundrec.c,385 :: 		rejected = 0;
0x05E8	0x6A65      	CLRF        _rejected 
0x05EA	0x6A66      	CLRF        _rejected+1 
;soundrec.c,386 :: 		while (SLCT) // repeat until Select button pressed
L_writeMultipleBlock70:
0x05EC	0xA483      	BTFSS       RD2_bit, BitPos(RD2_bit+0) 
0x05EE	0xD071      	BRA         L_writeMultipleBlock71
;soundrec.c,388 :: 		spiWrite(0b11111100); // Data token for CMD 25
0x05F0	0x0EFC      	MOVLW       252
0x05F2	0x0101      	MOVLB       1
0x05F4	0x6F29      	MOVWF       FARG_SPI1_Write_data_, 1
0x05F6	0xDD19      	RCALL       _SPI1_Write
;soundrec.c,389 :: 		for (g = 0; g < 512; g++)
0x05F8	0x0101      	MOVLB       1
0x05FA	0x6B17      	CLRF        writeMultipleBlock_g_L0, 1
0x05FC	0x6B18      	CLRF        writeMultipleBlock_g_L0+1, 1
L_writeMultipleBlock72:
0x05FE	0x0E02      	MOVLW       2
0x0600	0x5D18      	SUBWF       writeMultipleBlock_g_L0+1, 0, 1
0x0602	0xE102      	BNZ         L__writeMultipleBlock161
0x0604	0x0E00      	MOVLW       0
0x0606	0x5D17      	SUBWF       writeMultipleBlock_g_L0, 0, 1
L__writeMultipleBlock161:
0x0608	0xE215      	BC          L_writeMultipleBlock73
;soundrec.c,391 :: 		spiWrite((uint8_t) g);
0x060A	0xF129C117  	MOVFF       writeMultipleBlock_g_L0, FARG_SPI1_Write_data_
0x060E	0xDD0D      	RCALL       _SPI1_Write
;soundrec.c,395 :: 		Delay_us(15);
0x0610	0x0E18      	MOVLW       24
0x0612	0x6E0D      	MOVWF       R13, 0
L_writeMultipleBlock75:
0x0614	0x2E0D      	DECFSZ      R13, 1, 0
0x0616	0xD7FE      	BRA         L_writeMultipleBlock75
0x0618	0x0000      	NOP
0x061A	0x0000      	NOP
;soundrec.c,389 :: 		for (g = 0; g < 512; g++)
0x061C	0x0E01      	MOVLW       1
0x061E	0x0101      	MOVLB       1
0x0620	0x2517      	ADDWF       writeMultipleBlock_g_L0, 0, 1
0x0622	0x6E00      	MOVWF       R0 
0x0624	0x0E00      	MOVLW       0
0x0626	0x2118      	ADDWFC      writeMultipleBlock_g_L0+1, 0, 1
0x0628	0x6E01      	MOVWF       R1 
0x062A	0xF117C000  	MOVFF       R0, writeMultipleBlock_g_L0
0x062E	0xF118C001  	MOVFF       R1, writeMultipleBlock_g_L0+1
;soundrec.c,399 :: 		} // write a block of 512 bytes data
0x0632	0xD7E5      	BRA         L_writeMultipleBlock72
L_writeMultipleBlock73:
;soundrec.c,400 :: 		spiWrite(0xff);
0x0634	0x0EFF      	MOVLW       255
0x0636	0x6F29      	MOVWF       FARG_SPI1_Write_data_, 1
0x0638	0xDCF8      	RCALL       _SPI1_Write
;soundrec.c,401 :: 		spiWrite(0xff); // 2 bytes CRC
0x063A	0x0EFF      	MOVLW       255
0x063C	0x0101      	MOVLB       1
0x063E	0x6F29      	MOVWF       FARG_SPI1_Write_data_, 1
0x0640	0xDCF4      	RCALL       _SPI1_Write
;soundrec.c,403 :: 		count = 0;
0x0642	0x0100      	MOVLB       0
0x0644	0x6BED      	CLRF        _count, 1
;soundrec.c,404 :: 		while (count < 30)
L_writeMultipleBlock76:
0x0646	0x0E1E      	MOVLW       30
0x0648	0x5DED      	SUBWF       _count, 0, 1
0x064A	0xE21E      	BC          L_writeMultipleBlock77
;soundrec.c,406 :: 		spiReadData = spiRead();
0x064C	0x0EFF      	MOVLW       255
0x064E	0x0101      	MOVLB       1
0x0650	0x6F28      	MOVWF       FARG_SPI1_Read_buffer, 1
0x0652	0xDD27      	RCALL       _SPI1_Read
0x0654	0xF0EEC000  	MOVFF       R0, _spiReadData
;soundrec.c,407 :: 		if ((spiReadData & 0b00011111) == 0x05)
0x0658	0x0E1F      	MOVLW       31
0x065A	0x0100      	MOVLB       0
0x065C	0x15EE      	ANDWF       _spiReadData, 0, 1
0x065E	0x6E01      	MOVWF       R1 
0x0660	0x5001      	MOVF        R1, 0 
0x0662	0x0A05      	XORLW       5
0x0664	0xE10B      	BNZ         L_writeMultipleBlock78
;soundrec.c,411 :: 		numberOfSectors++;
0x0666	0x0E01      	MOVLW       1
0x0668	0x25EF      	ADDWF       _numberOfSectors, 0, 1
0x066A	0x6E00      	MOVWF       R0 
0x066C	0x0E00      	MOVLW       0
0x066E	0x21F0      	ADDWFC      _numberOfSectors+1, 0, 1
0x0670	0x6E01      	MOVWF       R1 
0x0672	0xF0EFC000  	MOVFF       R0, _numberOfSectors
0x0676	0xF0F0C001  	MOVFF       R1, _numberOfSectors+1
;soundrec.c,412 :: 		break;
0x067A	0xD006      	BRA         L_writeMultipleBlock77
;soundrec.c,413 :: 		}
L_writeMultipleBlock78:
;soundrec.c,414 :: 		count++;
0x067C	0x51ED      	MOVF        _count, 0, 1
0x067E	0x0F01      	ADDLW       1
0x0680	0x6E00      	MOVWF       R0 
0x0682	0xF0EDC000  	MOVFF       R0, _count
;soundrec.c,415 :: 		}
0x0686	0xD7DF      	BRA         L_writeMultipleBlock76
L_writeMultipleBlock77:
;soundrec.c,416 :: 		if (count >= 30)
0x0688	0x0E1E      	MOVLW       30
0x068A	0x5DED      	SUBWF       _count, 0, 1
0x068C	0xE317      	BNC         L_writeMultipleBlock79
;soundrec.c,418 :: 		UWR("Data rejected!");
0x068E	0x0E81      	MOVLW       ?lstr13_soundrec
0x0690	0x0101      	MOVLB       1
0x0692	0x6F21      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x0694	0x0E00      	MOVLW       hi_addr(?lstr13_soundrec)
0x0696	0x6F22      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x0698	0xDDAD      	RCALL       _UART_Write_Text
0x069A	0x0E0D      	MOVLW       13
0x069C	0x6F28      	MOVWF       FARG_UART_Write__data, 1
0x069E	0xDCF5      	RCALL       _UART_Write
0x06A0	0x0E0A      	MOVLW       10
0x06A2	0x0101      	MOVLB       1
0x06A4	0x6F28      	MOVWF       FARG_UART_Write__data, 1
0x06A6	0xDCF1      	RCALL       _UART_Write
;soundrec.c,419 :: 		rejected++;
0x06A8	0x0E01      	MOVLW       1
0x06AA	0x2465      	ADDWF       _rejected, 0 
0x06AC	0x6E00      	MOVWF       R0 
0x06AE	0x0E00      	MOVLW       0
0x06B0	0x2066      	ADDWFC      _rejected+1, 0 
0x06B2	0x6E01      	MOVWF       R1 
0x06B4	0xF065C000  	MOVFF       R0, _rejected
0x06B8	0xF066C001  	MOVFF       R1, _rejected+1
;soundrec.c,420 :: 		}
L_writeMultipleBlock79:
;soundrec.c,421 :: 		do // check if the card is busy
L_writeMultipleBlock80:
;soundrec.c,423 :: 		spiReadData = spiRead();
0x06BC	0x0EFF      	MOVLW       255
0x06BE	0x0101      	MOVLB       1
0x06C0	0x6F28      	MOVWF       FARG_SPI1_Read_buffer, 1
0x06C2	0xDCEF      	RCALL       _SPI1_Read
0x06C4	0xF0EEC000  	MOVFF       R0, _spiReadData
;soundrec.c,425 :: 		while (spiReadData != 0xff);
0x06C8	0x0100      	MOVLB       0
0x06CA	0x51EE      	MOVF        _spiReadData, 0, 1
0x06CC	0x0AFF      	XORLW       255
0x06CE	0xE1F6      	BNZ         L_writeMultipleBlock80
;soundrec.c,426 :: 		}
0x06D0	0xD78D      	BRA         L_writeMultipleBlock70
L_writeMultipleBlock71:
;soundrec.c,429 :: 		spiWrite(0b11111101);
0x06D2	0x0EFD      	MOVLW       253
0x06D4	0x0101      	MOVLB       1
0x06D6	0x6F29      	MOVWF       FARG_SPI1_Write_data_, 1
0x06D8	0xDCA8      	RCALL       _SPI1_Write
;soundrec.c,430 :: 		spiWrite(0xff);
0x06DA	0x0EFF      	MOVLW       255
0x06DC	0x0101      	MOVLB       1
0x06DE	0x6F29      	MOVWF       FARG_SPI1_Write_data_, 1
0x06E0	0xDCA4      	RCALL       _SPI1_Write
;soundrec.c,431 :: 		spiReadData = spiRead();
0x06E2	0x0EFF      	MOVLW       255
0x06E4	0x0101      	MOVLB       1
0x06E6	0x6F28      	MOVWF       FARG_SPI1_Read_buffer, 1
0x06E8	0xDCDC      	RCALL       _SPI1_Read
0x06EA	0xF0EEC000  	MOVFF       R0, _spiReadData
;soundrec.c,432 :: 		while (spiReadData != 0xff) // check if the card is busy
L_writeMultipleBlock83:
0x06EE	0x0100      	MOVLB       0
0x06F0	0x51EE      	MOVF        _spiReadData, 0, 1
0x06F2	0x0AFF      	XORLW       255
0x06F4	0xE007      	BZ          L_writeMultipleBlock84
;soundrec.c,434 :: 		spiReadData = spiRead();
0x06F6	0x0EFF      	MOVLW       255
0x06F8	0x0101      	MOVLB       1
0x06FA	0x6F28      	MOVWF       FARG_SPI1_Read_buffer, 1
0x06FC	0xDCD2      	RCALL       _SPI1_Read
0x06FE	0xF0EEC000  	MOVFF       R0, _spiReadData
;soundrec.c,435 :: 		}
0x0702	0xD7F5      	BRA         L_writeMultipleBlock83
L_writeMultipleBlock84:
;soundrec.c,436 :: 		}
L_writeMultipleBlock69:
;soundrec.c,437 :: 		return error;
0x0704	0xF000C100  	MOVFF       writeMultipleBlock_error_L0, R0
;soundrec.c,438 :: 		}
L_end_writeMultipleBlock:
0x0708	0x0012      	RETURN      0
; end of _writeMultipleBlock
_readMultipleBlock:
;soundrec.c,442 :: 		readMultipleBlock(void)
;soundrec.c,446 :: 		volatile uint16_t sectorIndex = 0;
0x070A	0x0101      	MOVLB       1
0x070C	0x6B19      	CLRF        readMultipleBlock_sectorIndex_L0, 1
0x070E	0x6B1A      	CLRF        readMultipleBlock_sectorIndex_L0+1, 1
0x0710	0x6B00      	CLRF        readMultipleBlock_retry_L0, 1
;soundrec.c,450 :: 		do
L_readMultipleBlock85:
;soundrec.c,452 :: 		if (!(sendCMD(18, 0))) // read multiple block command accepted
0x0712	0x0E12      	MOVLW       18
0x0714	0x6F21      	MOVWF       FARG_sendCMD_cmd, 1
0x0716	0x6B22      	CLRF        FARG_sendCMD_arg, 1
0x0718	0x6B23      	CLRF        FARG_sendCMD_arg+1, 1
0x071A	0x6B24      	CLRF        FARG_sendCMD_arg+2, 1
0x071C	0x6B25      	CLRF        FARG_sendCMD_arg+3, 1
0x071E	0xDCCA      	RCALL       _sendCMD
0x0720	0x5200      	MOVF        R0, 1 
0x0722	0xE103      	BNZ         L_readMultipleBlock88
;soundrec.c,454 :: 		error = 0;
0x0724	0x0100      	MOVLB       0
0x0726	0x6BFF      	CLRF        readMultipleBlock_error_L0, 1
;soundrec.c,455 :: 		break;
0x0728	0xD00C      	BRA         L_readMultipleBlock86
;soundrec.c,456 :: 		}
L_readMultipleBlock88:
0x072A	0x0100      	MOVLB       0
;soundrec.c,459 :: 		error = 1;
0x072C	0x0E01      	MOVLW       1
0x072E	0x6FFF      	MOVWF       readMultipleBlock_error_L0, 1
;soundrec.c,460 :: 		retry++;
0x0730	0x0101      	MOVLB       1
0x0732	0x5100      	MOVF        readMultipleBlock_retry_L0, 0, 1
0x0734	0x0F01      	ADDLW       1
0x0736	0x6E00      	MOVWF       R0 
0x0738	0xF100C000  	MOVFF       R0, readMultipleBlock_retry_L0
;soundrec.c,463 :: 		while (retry < 50);
0x073C	0x0E32      	MOVLW       50
0x073E	0x5D00      	SUBWF       readMultipleBlock_retry_L0, 0, 1
0x0740	0xE3E8      	BNC         L_readMultipleBlock85
L_readMultipleBlock86:
;soundrec.c,465 :: 		if (!error)
0x0742	0x0100      	MOVLB       0
0x0744	0x53FF      	MOVF        readMultipleBlock_error_L0, 1, 1
0x0746	0xA4D8      	BTFSS       STATUS, 2 
0x0748	0xD084      	BRA         L_readMultipleBlock90
;soundrec.c,467 :: 		while (SLCT)
L_readMultipleBlock91:
0x074A	0xA483      	BTFSS       RD2_bit, BitPos(RD2_bit+0) 
0x074C	0xD03F      	BRA         L_readMultipleBlock92
;soundrec.c,470 :: 		do
L_readMultipleBlock93:
;soundrec.c,472 :: 		spiReadData = spiRead();
0x074E	0x0EFF      	MOVLW       255
0x0750	0x0101      	MOVLB       1
0x0752	0x6F28      	MOVWF       FARG_SPI1_Read_buffer, 1
0x0754	0xDCA6      	RCALL       _SPI1_Read
0x0756	0xF0EEC000  	MOVFF       R0, _spiReadData
;soundrec.c,474 :: 		while (spiReadData != 0xfe);
0x075A	0x0100      	MOVLB       0
0x075C	0x51EE      	MOVF        _spiReadData, 0, 1
0x075E	0x0AFE      	XORLW       254
0x0760	0xE1F6      	BNZ         L_readMultipleBlock93
;soundrec.c,476 :: 		for (g = 0; g < 512; g++)
0x0762	0x0101      	MOVLB       1
0x0764	0x6B17      	CLRF        readMultipleBlock_g_L0, 1
0x0766	0x6B18      	CLRF        readMultipleBlock_g_L0+1, 1
L_readMultipleBlock96:
0x0768	0x0E02      	MOVLW       2
0x076A	0x5D18      	SUBWF       readMultipleBlock_g_L0+1, 0, 1
0x076C	0xE102      	BNZ         L__readMultipleBlock163
0x076E	0x0E00      	MOVLW       0
0x0770	0x5D17      	SUBWF       readMultipleBlock_g_L0, 0, 1
L__readMultipleBlock163:
0x0772	0xE215      	BC          L_readMultipleBlock97
;soundrec.c,482 :: 		DACOUT = spiRead();
0x0774	0x0EFF      	MOVLW       255
0x0776	0x6F28      	MOVWF       FARG_SPI1_Read_buffer, 1
0x0778	0xDC94      	RCALL       _SPI1_Read
0x077A	0xFF8AC000  	MOVFF       R0, LATB
;soundrec.c,483 :: 		Delay_us(17);
0x077E	0x0E1C      	MOVLW       28
0x0780	0x6E0D      	MOVWF       R13, 0
L_readMultipleBlock99:
0x0782	0x2E0D      	DECFSZ      R13, 1, 0
0x0784	0xD7FE      	BRA         L_readMultipleBlock99
;soundrec.c,476 :: 		for (g = 0; g < 512; g++)
0x0786	0x0E01      	MOVLW       1
0x0788	0x0101      	MOVLB       1
0x078A	0x2517      	ADDWF       readMultipleBlock_g_L0, 0, 1
0x078C	0x6E00      	MOVWF       R0 
0x078E	0x0E00      	MOVLW       0
0x0790	0x2118      	ADDWFC      readMultipleBlock_g_L0+1, 0, 1
0x0792	0x6E01      	MOVWF       R1 
0x0794	0xF117C000  	MOVFF       R0, readMultipleBlock_g_L0
0x0798	0xF118C001  	MOVFF       R1, readMultipleBlock_g_L0+1
;soundrec.c,484 :: 		}
0x079C	0xD7E5      	BRA         L_readMultipleBlock96
L_readMultipleBlock97:
;soundrec.c,486 :: 		spiReadData = spiRead();
0x079E	0x0EFF      	MOVLW       255
0x07A0	0x6F28      	MOVWF       FARG_SPI1_Read_buffer, 1
0x07A2	0xDC7F      	RCALL       _SPI1_Read
0x07A4	0xF0EEC000  	MOVFF       R0, _spiReadData
;soundrec.c,487 :: 		spiReadData = spiRead();
0x07A8	0x0EFF      	MOVLW       255
0x07AA	0x0101      	MOVLB       1
0x07AC	0x6F28      	MOVWF       FARG_SPI1_Read_buffer, 1
0x07AE	0xDC79      	RCALL       _SPI1_Read
0x07B0	0xF0EEC000  	MOVFF       R0, _spiReadData
;soundrec.c,488 :: 		sectorIndex++;
0x07B4	0x0E01      	MOVLW       1
0x07B6	0x0101      	MOVLB       1
0x07B8	0x2519      	ADDWF       readMultipleBlock_sectorIndex_L0, 0, 1
0x07BA	0x6E00      	MOVWF       R0 
0x07BC	0x0E00      	MOVLW       0
0x07BE	0x211A      	ADDWFC      readMultipleBlock_sectorIndex_L0+1, 0, 1
0x07C0	0x6E01      	MOVWF       R1 
0x07C2	0xF119C000  	MOVFF       R0, readMultipleBlock_sectorIndex_L0
0x07C6	0xF11AC001  	MOVFF       R1, readMultipleBlock_sectorIndex_L0+1
;soundrec.c,489 :: 		}
0x07CA	0xD7BF      	BRA         L_readMultipleBlock91
L_readMultipleBlock92:
0x07CC	0x0101      	MOVLB       1
;soundrec.c,492 :: 		command(12, 0, 0x95);
0x07CE	0x0E0C      	MOVLW       12
0x07D0	0x6F21      	MOVWF       FARG_command_command, 1
0x07D2	0x6B22      	CLRF        FARG_command_fourbyte_arg, 1
0x07D4	0x6B23      	CLRF        FARG_command_fourbyte_arg+1, 1
0x07D6	0x6B24      	CLRF        FARG_command_fourbyte_arg+2, 1
0x07D8	0x6B25      	CLRF        FARG_command_fourbyte_arg+3, 1
0x07DA	0x0E95      	MOVLW       149
0x07DC	0x6F26      	MOVWF       FARG_command_CRCbits, 1
0x07DE	0xDD24      	RCALL       _command
;soundrec.c,493 :: 		count = 0;
0x07E0	0x0100      	MOVLB       0
0x07E2	0x6BED      	CLRF        _count, 1
;soundrec.c,494 :: 		do
L_readMultipleBlock100:
;soundrec.c,496 :: 		if (spiReadData == 0)
0x07E4	0x51EE      	MOVF        _spiReadData, 0, 1
0x07E6	0x0A00      	XORLW       0
0x07E8	0xE10E      	BNZ         L_readMultipleBlock103
;soundrec.c,498 :: 		UWR("Stopped Transfer!");
0x07EA	0x0E90      	MOVLW       ?lstr14_soundrec
0x07EC	0x0101      	MOVLB       1
0x07EE	0x6F21      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x07F0	0x0E00      	MOVLW       hi_addr(?lstr14_soundrec)
0x07F2	0x6F22      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x07F4	0xDCFF      	RCALL       _UART_Write_Text
0x07F6	0x0E0D      	MOVLW       13
0x07F8	0x6F28      	MOVWF       FARG_UART_Write__data, 1
0x07FA	0xDC47      	RCALL       _UART_Write
0x07FC	0x0E0A      	MOVLW       10
0x07FE	0x0101      	MOVLB       1
0x0800	0x6F28      	MOVWF       FARG_UART_Write__data, 1
0x0802	0xDC43      	RCALL       _UART_Write
;soundrec.c,499 :: 		break;
0x0804	0xD00F      	BRA         L_readMultipleBlock101
;soundrec.c,500 :: 		}
L_readMultipleBlock103:
;soundrec.c,501 :: 		spiReadData = spiRead();
0x0806	0x0EFF      	MOVLW       255
0x0808	0x0101      	MOVLB       1
0x080A	0x6F28      	MOVWF       FARG_SPI1_Read_buffer, 1
0x080C	0xDC4A      	RCALL       _SPI1_Read
0x080E	0xF0EEC000  	MOVFF       R0, _spiReadData
;soundrec.c,502 :: 		count++;
0x0812	0x0100      	MOVLB       0
0x0814	0x51ED      	MOVF        _count, 0, 1
0x0816	0x0F01      	ADDLW       1
0x0818	0x6E00      	MOVWF       R0 
0x081A	0xF0EDC000  	MOVFF       R0, _count
;soundrec.c,504 :: 		while (count < 10);
0x081E	0x0E0A      	MOVLW       10
0x0820	0x5DED      	SUBWF       _count, 0, 1
0x0822	0xE3E0      	BNC         L_readMultipleBlock100
L_readMultipleBlock101:
;soundrec.c,506 :: 		do
L_readMultipleBlock104:
;soundrec.c,508 :: 		spiReadData = spiRead();
0x0824	0x0EFF      	MOVLW       255
0x0826	0x0101      	MOVLB       1
0x0828	0x6F28      	MOVWF       FARG_SPI1_Read_buffer, 1
0x082A	0xDC3B      	RCALL       _SPI1_Read
0x082C	0xF0EEC000  	MOVFF       R0, _spiReadData
;soundrec.c,510 :: 		while (spiReadData != 0xff);
0x0830	0x0100      	MOVLB       0
0x0832	0x51EE      	MOVF        _spiReadData, 0, 1
0x0834	0x0AFF      	XORLW       255
0x0836	0xE1F6      	BNZ         L_readMultipleBlock104
;soundrec.c,511 :: 		UWR("Card free!");
0x0838	0x0E67      	MOVLW       ?lstr15_soundrec
0x083A	0x0101      	MOVLB       1
0x083C	0x6F21      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x083E	0x0E00      	MOVLW       hi_addr(?lstr15_soundrec)
0x0840	0x6F22      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x0842	0xDCD8      	RCALL       _UART_Write_Text
0x0844	0x0E0D      	MOVLW       13
0x0846	0x6F28      	MOVWF       FARG_UART_Write__data, 1
0x0848	0xDC20      	RCALL       _UART_Write
0x084A	0x0E0A      	MOVLW       10
0x084C	0x0101      	MOVLB       1
0x084E	0x6F28      	MOVWF       FARG_UART_Write__data, 1
0x0850	0xDC1C      	RCALL       _UART_Write
;soundrec.c,512 :: 		}
L_readMultipleBlock90:
;soundrec.c,513 :: 		return error;
0x0852	0xF000C0FF  	MOVFF       readMultipleBlock_error_L0, R0
;soundrec.c,514 :: 		}
L_end_readMultipleBlock:
0x0856	0x0012      	RETURN      0
; end of _readMultipleBlock
_main:
0x0858	0xF006EC72  	CALL        3300, 0
;soundrec.c,516 :: 		void main()
;soundrec.c,520 :: 		volatile uint8_t initRetry = 0;
0x085C	0x0100      	MOVLB       0
0x085E	0x6BFE      	CLRF        main_initRetry_L0, 1
;soundrec.c,524 :: 		ADCON1 |= 0x0e; // AIN0 as analog input
0x0860	0x0E0E      	MOVLW       14
0x0862	0x12C1      	IORWF       ADCON1, 1 
;soundrec.c,525 :: 		ADCON2 |= 0x2d; // 12 Tad and FOSC/16
0x0864	0x0E2D      	MOVLW       45
0x0866	0x12C0      	IORWF       ADCON2, 1 
;soundrec.c,526 :: 		ADFM_bit = 0; // Left justified
0x0868	0x9EC0      	BCF         ADFM_bit, BitPos(ADFM_bit+0) 
;soundrec.c,527 :: 		ADON_bit = 1; // Enable ADC module
0x086A	0x80C2      	BSF         ADON_bit, BitPos(ADON_bit+0) 
;soundrec.c,528 :: 		Delay_ms(100);
0x086C	0x0E03      	MOVLW       3
0x086E	0x6E0B      	MOVWF       R11, 0
0x0870	0x0E8A      	MOVLW       138
0x0872	0x6E0C      	MOVWF       R12, 0
0x0874	0x0E55      	MOVLW       85
0x0876	0x6E0D      	MOVWF       R13, 0
L_main107:
0x0878	0x2E0D      	DECFSZ      R13, 1, 0
0x087A	0xD7FE      	BRA         L_main107
0x087C	0x2E0C      	DECFSZ      R12, 1, 0
0x087E	0xD7FC      	BRA         L_main107
0x0880	0x2E0B      	DECFSZ      R11, 1, 0
0x0882	0xD7FA      	BRA         L_main107
0x0884	0x0000      	NOP
0x0886	0x0000      	NOP
;soundrec.c,531 :: 		TRISD=0xf3;
0x0888	0x0EF3      	MOVLW       243
0x088A	0x6E95      	MOVWF       TRISD 
;soundrec.c,532 :: 		TRISA2_bit=1;
0x088C	0x8492      	BSF         TRISA2_bit, BitPos(TRISA2_bit+0) 
;soundrec.c,533 :: 		TRISD2_bit=1;
0x088E	0x8495      	BSF         TRISD2_bit, BitPos(TRISD2_bit+0) 
;soundrec.c,534 :: 		TRISD3_bit=1;
0x0890	0x8695      	BSF         TRISD3_bit, BitPos(TRISD3_bit+0) 
;soundrec.c,535 :: 		TRISB=0;
0x0892	0x6A93      	CLRF        TRISB 
;soundrec.c,536 :: 		TRISC = 0x00;
0x0894	0x6A94      	CLRF        TRISC 
;soundrec.c,539 :: 		UART1_Init(9600);
0x0896	0x86B8      	BSF         BAUDCON, 3, 0
0x0898	0x0E02      	MOVLW       2
0x089A	0x6EB0      	MOVWF       SPBRGH 
0x089C	0x0E08      	MOVLW       8
0x089E	0x6EAF      	MOVWF       SPBRG 
0x08A0	0x84AC      	BSF         TXSTA, 2, 0
0x08A2	0xDD27      	RCALL       _UART1_Init
;soundrec.c,542 :: 		_SPI_CLK_IDLE_LOW, _SPI_LOW_2_HIGH);
0x08A4	0x0E02      	MOVLW       2
0x08A6	0x0101      	MOVLB       1
0x08A8	0x6F17      	MOVWF       FARG_SPI1_Init_Advanced_master, 1
0x08AA	0x6B18      	CLRF        FARG_SPI1_Init_Advanced_data_sample, 1
0x08AC	0x6B19      	CLRF        FARG_SPI1_Init_Advanced_clock_idle, 1
0x08AE	0x0E01      	MOVLW       1
0x08B0	0x6F1A      	MOVWF       FARG_SPI1_Init_Advanced_transmit_edge, 1
0x08B2	0xDCEB      	RCALL       _SPI1_Init_Advanced
;soundrec.c,544 :: 		while (1)
L_main108:
;soundrec.c,546 :: 		if (mmcInit() == 0)
0x08B4	0xDD4B      	RCALL       _mmcInit
0x08B6	0x5000      	MOVF        R0, 0 
0x08B8	0x0A00      	XORLW       0
0x08BA	0xE110      	BNZ         L_main110
;soundrec.c,548 :: 		UWR("Card detected!");
0x08BC	0x0E72      	MOVLW       ?lstr16_soundrec
0x08BE	0x0101      	MOVLB       1
0x08C0	0x6F21      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x08C2	0x0E00      	MOVLW       hi_addr(?lstr16_soundrec)
0x08C4	0x6F22      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x08C6	0xDC96      	RCALL       _UART_Write_Text
0x08C8	0x0E0D      	MOVLW       13
0x08CA	0x6F28      	MOVWF       FARG_UART_Write__data, 1
0x08CC	0xF000EC45  	CALL        _UART_Write, 0
0x08D0	0x0E0A      	MOVLW       10
0x08D2	0x0101      	MOVLB       1
0x08D4	0x6F28      	MOVWF       FARG_UART_Write__data, 1
0x08D6	0xF000EC45  	CALL        _UART_Write, 0
;soundrec.c,549 :: 		break;
0x08DA	0xD01A      	BRA         L_main109
;soundrec.c,550 :: 		}
L_main110:
;soundrec.c,551 :: 		initRetry++;
0x08DC	0x0100      	MOVLB       0
0x08DE	0x51FE      	MOVF        main_initRetry_L0, 0, 1
0x08E0	0x0F01      	ADDLW       1
0x08E2	0x6E00      	MOVWF       R0 
0x08E4	0xF0FEC000  	MOVFF       R0, main_initRetry_L0
;soundrec.c,552 :: 		if (initRetry == 50)
0x08E8	0x51FE      	MOVF        main_initRetry_L0, 0, 1
0x08EA	0x0A32      	XORLW       50
0x08EC	0xE110      	BNZ         L_main111
;soundrec.c,554 :: 		UWR("Card error, CPU trapped!");
0x08EE	0x0E1F      	MOVLW       ?lstr17_soundrec
0x08F0	0x0101      	MOVLB       1
0x08F2	0x6F21      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x08F4	0x0E00      	MOVLW       hi_addr(?lstr17_soundrec)
0x08F6	0x6F22      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x08F8	0xDC7D      	RCALL       _UART_Write_Text
0x08FA	0x0E0D      	MOVLW       13
0x08FC	0x6F28      	MOVWF       FARG_UART_Write__data, 1
0x08FE	0xF000EC45  	CALL        _UART_Write, 0
0x0902	0x0E0A      	MOVLW       10
0x0904	0x0101      	MOVLB       1
0x0906	0x6F28      	MOVWF       FARG_UART_Write__data, 1
0x0908	0xF000EC45  	CALL        _UART_Write, 0
;soundrec.c,555 :: 		while (1); // Trap the CPU
L_main112:
0x090C	0xD7FF      	BRA         L_main112
;soundrec.c,556 :: 		}
L_main111:
;soundrec.c,557 :: 		}
0x090E	0xD7D2      	BRA         L_main108
L_main109:
;soundrec.c,559 :: 		_SPI_CLK_IDLE_LOW, _SPI_LOW_2_HIGH);
0x0910	0x0101      	MOVLB       1
0x0912	0x6B17      	CLRF        FARG_SPI1_Init_Advanced_master, 1
0x0914	0x6B18      	CLRF        FARG_SPI1_Init_Advanced_data_sample, 1
0x0916	0x6B19      	CLRF        FARG_SPI1_Init_Advanced_clock_idle, 1
0x0918	0x0E01      	MOVLW       1
0x091A	0x6F1A      	MOVWF       FARG_SPI1_Init_Advanced_transmit_edge, 1
0x091C	0xDCB6      	RCALL       _SPI1_Init_Advanced
;soundrec.c,561 :: 		for ( ; ; )        // Repeats forever
L_main114:
;soundrec.c,564 :: 		while (SLCT != 0)        // Wait until SELECT pressed
L_main117:
0x091E	0xA483      	BTFSS       RD2_bit, BitPos(RD2_bit+0) 
0x0920	0xD001      	BRA         L_main118
;soundrec.c,566 :: 		}
0x0922	0xD7FD      	BRA         L_main117
L_main118:
0x0924	0x0101      	MOVLB       1
;soundrec.c,571 :: 		UWR("Select a Menu");
0x0926	0x0E38      	MOVLW       ?lstr18_soundrec
0x0928	0x6F21      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x092A	0x0E00      	MOVLW       hi_addr(?lstr18_soundrec)
0x092C	0x6F22      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x092E	0xDC62      	RCALL       _UART_Write_Text
0x0930	0x0E0D      	MOVLW       13
0x0932	0x6F28      	MOVWF       FARG_UART_Write__data, 1
0x0934	0xF000EC45  	CALL        _UART_Write, 0
0x0938	0x0E0A      	MOVLW       10
0x093A	0x0101      	MOVLB       1
0x093C	0x6F28      	MOVWF       FARG_UART_Write__data, 1
0x093E	0xF000EC45  	CALL        _UART_Write, 0
;soundrec.c,572 :: 		while (OK)
L_main119:
0x0942	0xA683      	BTFSS       RD3_bit, BitPos(RD3_bit+0) 
0x0944	0xD073      	BRA         L_main120
;soundrec.c,574 :: 		if (!SLCT)
0x0946	0xB483      	BTFSC       RD2_bit, BitPos(RD2_bit+0) 
0x0948	0xD022      	BRA         L_main121
;soundrec.c,576 :: 		Delay_ms(300);
0x094A	0x0E08      	MOVLW       8
0x094C	0x6E0B      	MOVWF       R11, 0
0x094E	0x0E9D      	MOVLW       157
0x0950	0x6E0C      	MOVWF       R12, 0
0x0952	0x0E05      	MOVLW       5
0x0954	0x6E0D      	MOVWF       R13, 0
L_main122:
0x0956	0x2E0D      	DECFSZ      R13, 1, 0
0x0958	0xD7FE      	BRA         L_main122
0x095A	0x2E0C      	DECFSZ      R12, 1, 0
0x095C	0xD7FC      	BRA         L_main122
0x095E	0x2E0B      	DECFSZ      R11, 1, 0
0x0960	0xD7FA      	BRA         L_main122
0x0962	0x0000      	NOP
0x0964	0x0000      	NOP
;soundrec.c,577 :: 		mode++;
0x0966	0x0E01      	MOVLW       1
0x0968	0x2415      	ADDWF       _mode, 0 
0x096A	0x6E00      	MOVWF       R0 
0x096C	0x0E00      	MOVLW       0
0x096E	0x2016      	ADDWFC      _mode+1, 0 
0x0970	0x6E01      	MOVWF       R1 
0x0972	0xF015C000  	MOVFF       R0, _mode
0x0976	0xF016C001  	MOVFF       R1, _mode+1
;soundrec.c,578 :: 		if (mode == 3)
0x097A	0x0E00      	MOVLW       0
0x097C	0x1816      	XORWF       _mode+1, 0 
0x097E	0xE102      	BNZ         L__main165
0x0980	0x0E03      	MOVLW       3
0x0982	0x1815      	XORWF       _mode, 0 
L__main165:
0x0984	0xE104      	BNZ         L_main123
;soundrec.c,580 :: 		mode = 1;
0x0986	0x0E01      	MOVLW       1
0x0988	0x6E15      	MOVWF       _mode 
0x098A	0x0E00      	MOVLW       0
0x098C	0x6E16      	MOVWF       _mode+1 
;soundrec.c,581 :: 		}
L_main123:
;soundrec.c,582 :: 		}
L_main121:
;soundrec.c,584 :: 		if ((mode == 1) & (lastMode != mode))
0x098E	0x0E00      	MOVLW       0
0x0990	0x1816      	XORWF       _mode+1, 0 
0x0992	0xE102      	BNZ         L__main166
0x0994	0x0E01      	MOVLW       1
0x0996	0x1815      	XORWF       _mode, 0 
L__main166:
0x0998	0x0E01      	MOVLW       1
0x099A	0xA4D8      	BTFSS       STATUS, 2 
0x099C	0x0E00      	MOVLW       0
0x099E	0x6E01      	MOVWF       R1 
0x09A0	0x0E00      	MOVLW       0
0x09A2	0x1816      	XORWF       _mode+1, 0 
0x09A4	0xE103      	BNZ         L__main167
0x09A6	0x5015      	MOVF        _mode, 0 
0x09A8	0x0100      	MOVLB       0
0x09AA	0x19FD      	XORWF       main_lastMode_L0, 0, 1
L__main167:
0x09AC	0x0E00      	MOVLW       0
0x09AE	0xA4D8      	BTFSS       STATUS, 2 
0x09B0	0x0E01      	MOVLW       1
0x09B2	0x6E00      	MOVWF       R0 
0x09B4	0x5001      	MOVF        R1, 0 
0x09B6	0x1600      	ANDWF       R0, 1 
0x09B8	0xE010      	BZ          L_main124
;soundrec.c,587 :: 		UWR("Record\n");
0x09BA	0x0E17      	MOVLW       ?lstr19_soundrec
0x09BC	0x0101      	MOVLB       1
0x09BE	0x6F21      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x09C0	0x0E00      	MOVLW       hi_addr(?lstr19_soundrec)
0x09C2	0x6F22      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x09C4	0xDC17      	RCALL       _UART_Write_Text
0x09C6	0x0E0D      	MOVLW       13
0x09C8	0x6F28      	MOVWF       FARG_UART_Write__data, 1
0x09CA	0xF000EC45  	CALL        _UART_Write, 0
0x09CE	0x0E0A      	MOVLW       10
0x09D0	0x0101      	MOVLB       1
0x09D2	0x6F28      	MOVWF       FARG_UART_Write__data, 1
0x09D4	0xF000EC45  	CALL        _UART_Write, 0
;soundrec.c,588 :: 		}
0x09D8	0xD026      	BRA         L_main125
L_main124:
;soundrec.c,589 :: 		else if ((mode == 2) & (lastMode != mode))
0x09DA	0x0E00      	MOVLW       0
0x09DC	0x1816      	XORWF       _mode+1, 0 
0x09DE	0xE102      	BNZ         L__main168
0x09E0	0x0E02      	MOVLW       2
0x09E2	0x1815      	XORWF       _mode, 0 
L__main168:
0x09E4	0x0E01      	MOVLW       1
0x09E6	0xA4D8      	BTFSS       STATUS, 2 
0x09E8	0x0E00      	MOVLW       0
0x09EA	0x6E01      	MOVWF       R1 
0x09EC	0x0E00      	MOVLW       0
0x09EE	0x1816      	XORWF       _mode+1, 0 
0x09F0	0xE103      	BNZ         L__main169
0x09F2	0x5015      	MOVF        _mode, 0 
0x09F4	0x0100      	MOVLB       0
0x09F6	0x19FD      	XORWF       main_lastMode_L0, 0, 1
L__main169:
0x09F8	0x0E00      	MOVLW       0
0x09FA	0xA4D8      	BTFSS       STATUS, 2 
0x09FC	0x0E01      	MOVLW       1
0x09FE	0x6E00      	MOVWF       R0 
0x0A00	0x5001      	MOVF        R1, 0 
0x0A02	0x1600      	ANDWF       R0, 1 
0x0A04	0xE010      	BZ          L_main126
;soundrec.c,592 :: 		UWR("Play\n");
0x0A06	0x0E5D      	MOVLW       ?lstr20_soundrec
0x0A08	0x0101      	MOVLB       1
0x0A0A	0x6F21      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x0A0C	0x0E00      	MOVLW       hi_addr(?lstr20_soundrec)
0x0A0E	0x6F22      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x0A10	0xF000ECFA  	CALL        _UART_Write_Text, 0
0x0A14	0x0E0D      	MOVLW       13
0x0A16	0x6F28      	MOVWF       FARG_UART_Write__data, 1
0x0A18	0xF000EC45  	CALL        _UART_Write, 0
0x0A1C	0x0E0A      	MOVLW       10
0x0A1E	0x0101      	MOVLB       1
0x0A20	0x6F28      	MOVWF       FARG_UART_Write__data, 1
0x0A22	0xF000EC45  	CALL        _UART_Write, 0
;soundrec.c,593 :: 		}
L_main126:
L_main125:
;soundrec.c,598 :: 		lastMode = mode;
0x0A26	0xF0FDC015  	MOVFF       _mode, main_lastMode_L0
;soundrec.c,599 :: 		}
0x0A2A	0xD78B      	BRA         L_main119
L_main120:
;soundrec.c,603 :: 		if (mode == 1)
0x0A2C	0x0E00      	MOVLW       0
0x0A2E	0x1816      	XORWF       _mode+1, 0 
0x0A30	0xE102      	BNZ         L__main170
0x0A32	0x0E01      	MOVLW       1
0x0A34	0x1815      	XORWF       _mode, 0 
L__main170:
0x0A36	0xA4D8      	BTFSS       STATUS, 2 
0x0A38	0xD0C9      	BRA         L_main127
;soundrec.c,605 :: 		t = 0;
0x0A3A	0x6A63      	CLRF        _t 
0x0A3C	0x6A64      	CLRF        _t+1 
;soundrec.c,606 :: 		UWR("Writing");
0x0A3E	0x0E46      	MOVLW       ?lstr21_soundrec
0x0A40	0x0101      	MOVLB       1
0x0A42	0x6F21      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x0A44	0x0E00      	MOVLW       hi_addr(?lstr21_soundrec)
0x0A46	0x6F22      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x0A48	0xF000ECFA  	CALL        _UART_Write_Text, 0
0x0A4C	0x0E0D      	MOVLW       13
0x0A4E	0x6F28      	MOVWF       FARG_UART_Write__data, 1
0x0A50	0xF000EC45  	CALL        _UART_Write, 0
0x0A54	0x0E0A      	MOVLW       10
0x0A56	0x0101      	MOVLB       1
0x0A58	0x6F28      	MOVWF       FARG_UART_Write__data, 1
0x0A5A	0xF000EC45  	CALL        _UART_Write, 0
;soundrec.c,607 :: 		PORTB = 0x00;
0x0A5E	0x6A81      	CLRF        PORTB 
;soundrec.c,611 :: 		_SPI_CLK_IDLE_LOW, _SPI_LOW_2_HIGH);
0x0A60	0x0E02      	MOVLW       2
0x0A62	0x0101      	MOVLB       1
0x0A64	0x6F17      	MOVWF       FARG_SPI1_Init_Advanced_master, 1
0x0A66	0x6B18      	CLRF        FARG_SPI1_Init_Advanced_data_sample, 1
0x0A68	0x6B19      	CLRF        FARG_SPI1_Init_Advanced_clock_idle, 1
0x0A6A	0x0E01      	MOVLW       1
0x0A6C	0x6F1A      	MOVWF       FARG_SPI1_Init_Advanced_transmit_edge, 1
0x0A6E	0xDC0D      	RCALL       _SPI1_Init_Advanced
;soundrec.c,613 :: 		while (1)
L_main128:
;soundrec.c,615 :: 		if (mmcInit() == 0)
0x0A70	0xDC6D      	RCALL       _mmcInit
0x0A72	0x5000      	MOVF        R0, 0 
0x0A74	0x0A00      	XORLW       0
0x0A76	0xE111      	BNZ         L_main130
;soundrec.c,617 :: 		UWR("Card detected!");
0x0A78	0x0E4E      	MOVLW       ?lstr22_soundrec
0x0A7A	0x0101      	MOVLB       1
0x0A7C	0x6F21      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x0A7E	0x0E00      	MOVLW       hi_addr(?lstr22_soundrec)
0x0A80	0x6F22      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x0A82	0xF000ECFA  	CALL        _UART_Write_Text, 0
0x0A86	0x0E0D      	MOVLW       13
0x0A88	0x6F28      	MOVWF       FARG_UART_Write__data, 1
0x0A8A	0xF000EC45  	CALL        _UART_Write, 0
0x0A8E	0x0E0A      	MOVLW       10
0x0A90	0x0101      	MOVLB       1
0x0A92	0x6F28      	MOVWF       FARG_UART_Write__data, 1
0x0A94	0xF000EC45  	CALL        _UART_Write, 0
;soundrec.c,618 :: 		break;
0x0A98	0xD01B      	BRA         L_main129
;soundrec.c,619 :: 		}
L_main130:
;soundrec.c,620 :: 		initRetry++;
0x0A9A	0x0100      	MOVLB       0
0x0A9C	0x51FE      	MOVF        main_initRetry_L0, 0, 1
0x0A9E	0x0F01      	ADDLW       1
0x0AA0	0x6E00      	MOVWF       R0 
0x0AA2	0xF0FEC000  	MOVFF       R0, main_initRetry_L0
;soundrec.c,621 :: 		if (initRetry == 50)
0x0AA6	0x51FE      	MOVF        main_initRetry_L0, 0, 1
0x0AA8	0x0A32      	XORLW       50
0x0AAA	0xE111      	BNZ         L_main131
;soundrec.c,623 :: 		UWR("Card error, CPU trapped!");
0x0AAC	0x0EB8      	MOVLW       ?lstr23_soundrec
0x0AAE	0x0101      	MOVLB       1
0x0AB0	0x6F21      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x0AB2	0x0E00      	MOVLW       hi_addr(?lstr23_soundrec)
0x0AB4	0x6F22      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x0AB6	0xF000ECFA  	CALL        _UART_Write_Text, 0
0x0ABA	0x0E0D      	MOVLW       13
0x0ABC	0x6F28      	MOVWF       FARG_UART_Write__data, 1
0x0ABE	0xF000EC45  	CALL        _UART_Write, 0
0x0AC2	0x0E0A      	MOVLW       10
0x0AC4	0x0101      	MOVLB       1
0x0AC6	0x6F28      	MOVWF       FARG_UART_Write__data, 1
0x0AC8	0xF000EC45  	CALL        _UART_Write, 0
;soundrec.c,624 :: 		while (1); // Trap the CPU
L_main132:
0x0ACC	0xD7FF      	BRA         L_main132
;soundrec.c,625 :: 		}
L_main131:
;soundrec.c,626 :: 		}
0x0ACE	0xD7D0      	BRA         L_main128
L_main129:
;soundrec.c,628 :: 		_SPI_CLK_IDLE_LOW, _SPI_LOW_2_HIGH);
0x0AD0	0x0101      	MOVLB       1
0x0AD2	0x6B17      	CLRF        FARG_SPI1_Init_Advanced_master, 1
0x0AD4	0x6B18      	CLRF        FARG_SPI1_Init_Advanced_data_sample, 1
0x0AD6	0x6B19      	CLRF        FARG_SPI1_Init_Advanced_clock_idle, 1
0x0AD8	0x0E01      	MOVLW       1
0x0ADA	0x6F1A      	MOVWF       FARG_SPI1_Init_Advanced_transmit_edge, 1
0x0ADC	0xF001EC45  	CALL        _SPI1_Init_Advanced, 0
;soundrec.c,630 :: 		if (writeMultipleBlock())
0x0AE0	0xDD5A      	RCALL       _writeMultipleBlock
0x0AE2	0x5200      	MOVF        R0, 1 
0x0AE4	0xE011      	BZ          L_main134
;soundrec.c,632 :: 		UWR("Write error!");
0x0AE6	0x0EAB      	MOVLW       ?lstr24_soundrec
0x0AE8	0x0101      	MOVLB       1
0x0AEA	0x6F21      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x0AEC	0x0E00      	MOVLW       hi_addr(?lstr24_soundrec)
0x0AEE	0x6F22      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x0AF0	0xF000ECFA  	CALL        _UART_Write_Text, 0
0x0AF4	0x0E0D      	MOVLW       13
0x0AF6	0x6F28      	MOVWF       FARG_UART_Write__data, 1
0x0AF8	0xF000EC45  	CALL        _UART_Write, 0
0x0AFC	0x0E0A      	MOVLW       10
0x0AFE	0x0101      	MOVLB       1
0x0B00	0x6F28      	MOVWF       FARG_UART_Write__data, 1
0x0B02	0xF000EC45  	CALL        _UART_Write, 0
;soundrec.c,633 :: 		}
0x0B06	0xD062      	BRA         L_main135
L_main134:
;soundrec.c,636 :: 		UWR("STOPPED!")
0x0B08	0x0EA2      	MOVLW       ?lstr25_soundrec
0x0B0A	0x0101      	MOVLB       1
0x0B0C	0x6F21      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x0B0E	0x0E00      	MOVLW       hi_addr(?lstr25_soundrec)
0x0B10	0x6F22      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x0B12	0xF000ECFA  	CALL        _UART_Write_Text, 0
0x0B16	0x0E0D      	MOVLW       13
0x0B18	0x6F28      	MOVWF       FARG_UART_Write__data, 1
0x0B1A	0xF000EC45  	CALL        _UART_Write, 0
0x0B1E	0x0E0A      	MOVLW       10
0x0B20	0x0101      	MOVLB       1
0x0B22	0x6F28      	MOVWF       FARG_UART_Write__data, 1
0x0B24	0xF000EC45  	CALL        _UART_Write, 0
;soundrec.c,637 :: 		IntToStr(numberOfSectors, text);
0x0B28	0xF117C0EF  	MOVFF       _numberOfSectors, FARG_IntToStr_input
0x0B2C	0xF118C0F0  	MOVFF       _numberOfSectors+1, FARG_IntToStr_input+1
0x0B30	0x0E0D      	MOVLW       main_text_L0
0x0B32	0x0101      	MOVLB       1
0x0B34	0x6F19      	MOVWF       FARG_IntToStr_output, 1
0x0B36	0x0E01      	MOVLW       hi_addr(main_text_L0)
0x0B38	0x6F1A      	MOVWF       FARG_IntToStr_output+1, 1
0x0B3A	0xDCC0      	RCALL       _IntToStr
;soundrec.c,638 :: 		UWR("Written:")
0x0B3C	0x0ED1      	MOVLW       ?lstr26_soundrec
0x0B3E	0x6F21      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x0B40	0x0E00      	MOVLW       hi_addr(?lstr26_soundrec)
0x0B42	0x6F22      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x0B44	0xF000ECFA  	CALL        _UART_Write_Text, 0
0x0B48	0x0E0D      	MOVLW       13
0x0B4A	0x6F28      	MOVWF       FARG_UART_Write__data, 1
0x0B4C	0xF000EC45  	CALL        _UART_Write, 0
0x0B50	0x0E0A      	MOVLW       10
0x0B52	0x0101      	MOVLB       1
0x0B54	0x6F28      	MOVWF       FARG_UART_Write__data, 1
0x0B56	0xF000EC45  	CALL        _UART_Write, 0
;soundrec.c,639 :: 		UWR(text);
0x0B5A	0x0E0D      	MOVLW       main_text_L0
0x0B5C	0x0101      	MOVLB       1
0x0B5E	0x6F21      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x0B60	0x0E01      	MOVLW       hi_addr(main_text_L0)
0x0B62	0x6F22      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x0B64	0xF000ECFA  	CALL        _UART_Write_Text, 0
0x0B68	0x0E0D      	MOVLW       13
0x0B6A	0x6F28      	MOVWF       FARG_UART_Write__data, 1
0x0B6C	0xF000EC45  	CALL        _UART_Write, 0
0x0B70	0x0E0A      	MOVLW       10
0x0B72	0x0101      	MOVLB       1
0x0B74	0x6F28      	MOVWF       FARG_UART_Write__data, 1
0x0B76	0xF000EC45  	CALL        _UART_Write, 0
;soundrec.c,640 :: 		IntToStr(rejected, text);
0x0B7A	0xF117C065  	MOVFF       _rejected, FARG_IntToStr_input
0x0B7E	0xF118C066  	MOVFF       _rejected+1, FARG_IntToStr_input+1
0x0B82	0x0E0D      	MOVLW       main_text_L0
0x0B84	0x0101      	MOVLB       1
0x0B86	0x6F19      	MOVWF       FARG_IntToStr_output, 1
0x0B88	0x0E01      	MOVLW       hi_addr(main_text_L0)
0x0B8A	0x6F1A      	MOVWF       FARG_IntToStr_output+1, 1
0x0B8C	0xDC97      	RCALL       _IntToStr
;soundrec.c,641 :: 		UWR("Lost: ");
0x0B8E	0x0EE6      	MOVLW       ?lstr27_soundrec
0x0B90	0x6F21      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x0B92	0x0E00      	MOVLW       hi_addr(?lstr27_soundrec)
0x0B94	0x6F22      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x0B96	0xF000ECFA  	CALL        _UART_Write_Text, 0
0x0B9A	0x0E0D      	MOVLW       13
0x0B9C	0x6F28      	MOVWF       FARG_UART_Write__data, 1
0x0B9E	0xF000EC45  	CALL        _UART_Write, 0
0x0BA2	0x0E0A      	MOVLW       10
0x0BA4	0x0101      	MOVLB       1
0x0BA6	0x6F28      	MOVWF       FARG_UART_Write__data, 1
0x0BA8	0xF000EC45  	CALL        _UART_Write, 0
;soundrec.c,642 :: 		UWR(text); // Print out number of recjected sector
0x0BAC	0x0E0D      	MOVLW       main_text_L0
0x0BAE	0x0101      	MOVLB       1
0x0BB0	0x6F21      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x0BB2	0x0E01      	MOVLW       hi_addr(main_text_L0)
0x0BB4	0x6F22      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x0BB6	0xF000ECFA  	CALL        _UART_Write_Text, 0
0x0BBA	0x0E0D      	MOVLW       13
0x0BBC	0x6F28      	MOVWF       FARG_UART_Write__data, 1
0x0BBE	0xF000EC45  	CALL        _UART_Write, 0
0x0BC2	0x0E0A      	MOVLW       10
0x0BC4	0x0101      	MOVLB       1
0x0BC6	0x6F28      	MOVWF       FARG_UART_Write__data, 1
0x0BC8	0xF000EC45  	CALL        _UART_Write, 0
;soundrec.c,643 :: 		}
L_main135:
;soundrec.c,644 :: 		}
L_main127:
;soundrec.c,646 :: 		if (mode == 2)
0x0BCC	0x0E00      	MOVLW       0
0x0BCE	0x1816      	XORWF       _mode+1, 0 
0x0BD0	0xE102      	BNZ         L__main171
0x0BD2	0x0E02      	MOVLW       2
0x0BD4	0x1815      	XORWF       _mode, 0 
L__main171:
0x0BD6	0xE118      	BNZ         L_main136
;soundrec.c,648 :: 		if (readMultipleBlock())
0x0BD8	0xDD98      	RCALL       _readMultipleBlock
0x0BDA	0x5200      	MOVF        R0, 1 
0x0BDC	0xE010      	BZ          L_main137
;soundrec.c,650 :: 		UWR("Read error!");
0x0BDE	0x0EDA      	MOVLW       ?lstr28_soundrec
0x0BE0	0x0101      	MOVLB       1
0x0BE2	0x6F21      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x0BE4	0x0E00      	MOVLW       hi_addr(?lstr28_soundrec)
0x0BE6	0x6F22      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x0BE8	0xF000ECFA  	CALL        _UART_Write_Text, 0
0x0BEC	0x0E0D      	MOVLW       13
0x0BEE	0x6F28      	MOVWF       FARG_UART_Write__data, 1
0x0BF0	0xF000EC45  	CALL        _UART_Write, 0
0x0BF4	0x0E0A      	MOVLW       10
0x0BF6	0x0101      	MOVLB       1
0x0BF8	0x6F28      	MOVWF       FARG_UART_Write__data, 1
0x0BFA	0xF000EC45  	CALL        _UART_Write, 0
;soundrec.c,651 :: 		}
L_main137:
;soundrec.c,652 :: 		while (SLCT && OK)
L_main138:
0x0BFE	0xA483      	BTFSS       RD2_bit, BitPos(RD2_bit+0) 
0x0C00	0xD003      	BRA         L_main139
0x0C02	0xA683      	BTFSS       RD3_bit, BitPos(RD3_bit+0) 
0x0C04	0xD001      	BRA         L_main139
L__main145:
;soundrec.c,654 :: 		}
0x0C06	0xD7FB      	BRA         L_main138
L_main139:
;soundrec.c,655 :: 		}
L_main136:
;soundrec.c,657 :: 		}
0x0C08	0xD68A      	BRA         L_main114
;soundrec.c,658 :: 		}
L_end_main:
0x0C0A	0xD7FF      	BRA         $+0
; end of _main
0x0CE4	0xF015EE10  	LFSR        1, 21
0x0CE8	0x0ED8      	MOVLW       216
0x0CEA	0x6E00      	MOVWF       R0 
0x0CEC	0x0E01      	MOVLW       1
0x0CEE	0x6E01      	MOVWF       R1 
0x0CF0	0x0E0C      	MOVLW       12
0x0CF2	0x6EF6      	MOVWF       4086 
0x0CF4	0x0E0C      	MOVLW       12
0x0CF6	0x6EF7      	MOVWF       TBLPTRH 
0x0CF8	0x0E00      	MOVLW       0
0x0CFA	0x6EF8      	MOVWF       TBLPTRU 
0x0CFC	0xF001EC71  	CALL        738, 0
0x0D00	0x0012      	RETURN      0
;soundrec.c,0 :: ?ICS_mode
0x0C0C	0x0000 ;?ICS_mode+0
; end of ?ICS_mode
;soundrec.c,0 :: ?ICS?lstr19_soundrec
0x0C0E	0x6552 ;?ICS?lstr19_soundrec+0
0x0C10	0x6F63 ;?ICS?lstr19_soundrec+2
0x0C12	0x6472 ;?ICS?lstr19_soundrec+4
0x0C14	0x000A ;?ICS?lstr19_soundrec+6
; end of ?ICS?lstr19_soundrec
;soundrec.c,0 :: ?ICS?lstr17_soundrec
0x0C16	0x6143 ;?ICS?lstr17_soundrec+0
0x0C18	0x6472 ;?ICS?lstr17_soundrec+2
0x0C1A	0x6520 ;?ICS?lstr17_soundrec+4
0x0C1C	0x7272 ;?ICS?lstr17_soundrec+6
0x0C1E	0x726F ;?ICS?lstr17_soundrec+8
0x0C20	0x202C ;?ICS?lstr17_soundrec+10
0x0C22	0x5043 ;?ICS?lstr17_soundrec+12
0x0C24	0x2055 ;?ICS?lstr17_soundrec+14
0x0C26	0x7274 ;?ICS?lstr17_soundrec+16
0x0C28	0x7061 ;?ICS?lstr17_soundrec+18
0x0C2A	0x6570 ;?ICS?lstr17_soundrec+20
0x0C2C	0x2164 ;?ICS?lstr17_soundrec+22
0x0C2E	0x00 ;?ICS?lstr17_soundrec+24
; end of ?ICS?lstr17_soundrec
;soundrec.c,0 :: ?ICS?lstr18_soundrec
0x0C2F	0x6553 ;?ICS?lstr18_soundrec+0
0x0C31	0x656C ;?ICS?lstr18_soundrec+2
0x0C33	0x7463 ;?ICS?lstr18_soundrec+4
0x0C35	0x6120 ;?ICS?lstr18_soundrec+6
0x0C37	0x4D20 ;?ICS?lstr18_soundrec+8
0x0C39	0x6E65 ;?ICS?lstr18_soundrec+10
0x0C3B	0x0075 ;?ICS?lstr18_soundrec+12
; end of ?ICS?lstr18_soundrec
;soundrec.c,0 :: ?ICS?lstr21_soundrec
0x0C3D	0x7257 ;?ICS?lstr21_soundrec+0
0x0C3F	0x7469 ;?ICS?lstr21_soundrec+2
0x0C41	0x6E69 ;?ICS?lstr21_soundrec+4
0x0C43	0x0067 ;?ICS?lstr21_soundrec+6
; end of ?ICS?lstr21_soundrec
;soundrec.c,0 :: ?ICS?lstr22_soundrec
0x0C45	0x6143 ;?ICS?lstr22_soundrec+0
0x0C47	0x6472 ;?ICS?lstr22_soundrec+2
0x0C49	0x6420 ;?ICS?lstr22_soundrec+4
0x0C4B	0x7465 ;?ICS?lstr22_soundrec+6
0x0C4D	0x6365 ;?ICS?lstr22_soundrec+8
0x0C4F	0x6574 ;?ICS?lstr22_soundrec+10
0x0C51	0x2164 ;?ICS?lstr22_soundrec+12
0x0C53	0x00 ;?ICS?lstr22_soundrec+14
; end of ?ICS?lstr22_soundrec
;soundrec.c,0 :: ?ICS?lstr20_soundrec
0x0C54	0x6C50 ;?ICS?lstr20_soundrec+0
0x0C56	0x7961 ;?ICS?lstr20_soundrec+2
0x0C58	0x000A ;?ICS?lstr20_soundrec+4
; end of ?ICS?lstr20_soundrec
;soundrec.c,0 :: ?ICS_t
0x0C5A	0x0000 ;?ICS_t+0
; end of ?ICS_t
;soundrec.c,0 :: ?ICS_rejected
0x0C5C	0x0000 ;?ICS_rejected+0
; end of ?ICS_rejected
;soundrec.c,0 :: ?ICS?lstr15_soundrec
0x0C5E	0x6143 ;?ICS?lstr15_soundrec+0
0x0C60	0x6472 ;?ICS?lstr15_soundrec+2
0x0C62	0x6620 ;?ICS?lstr15_soundrec+4
0x0C64	0x6572 ;?ICS?lstr15_soundrec+6
0x0C66	0x2165 ;?ICS?lstr15_soundrec+8
0x0C68	0x00 ;?ICS?lstr15_soundrec+10
; end of ?ICS?lstr15_soundrec
;soundrec.c,0 :: ?ICS?lstr16_soundrec
0x0C69	0x6143 ;?ICS?lstr16_soundrec+0
0x0C6B	0x6472 ;?ICS?lstr16_soundrec+2
0x0C6D	0x6420 ;?ICS?lstr16_soundrec+4
0x0C6F	0x7465 ;?ICS?lstr16_soundrec+6
0x0C71	0x6365 ;?ICS?lstr16_soundrec+8
0x0C73	0x6574 ;?ICS?lstr16_soundrec+10
0x0C75	0x2164 ;?ICS?lstr16_soundrec+12
0x0C77	0x00 ;?ICS?lstr16_soundrec+14
; end of ?ICS?lstr16_soundrec
;soundrec.c,0 :: ?ICS?lstr13_soundrec
0x0C78	0x6144 ;?ICS?lstr13_soundrec+0
0x0C7A	0x6174 ;?ICS?lstr13_soundrec+2
0x0C7C	0x7220 ;?ICS?lstr13_soundrec+4
0x0C7E	0x6A65 ;?ICS?lstr13_soundrec+6
0x0C80	0x6365 ;?ICS?lstr13_soundrec+8
0x0C82	0x6574 ;?ICS?lstr13_soundrec+10
0x0C84	0x2164 ;?ICS?lstr13_soundrec+12
0x0C86	0x00 ;?ICS?lstr13_soundrec+14
; end of ?ICS?lstr13_soundrec
;soundrec.c,0 :: ?ICS?lstr14_soundrec
0x0C87	0x7453 ;?ICS?lstr14_soundrec+0
0x0C89	0x706F ;?ICS?lstr14_soundrec+2
0x0C8B	0x6570 ;?ICS?lstr14_soundrec+4
0x0C8D	0x2064 ;?ICS?lstr14_soundrec+6
0x0C8F	0x7254 ;?ICS?lstr14_soundrec+8
0x0C91	0x6E61 ;?ICS?lstr14_soundrec+10
0x0C93	0x6673 ;?ICS?lstr14_soundrec+12
0x0C95	0x7265 ;?ICS?lstr14_soundrec+14
0x0C97	0x0021 ;?ICS?lstr14_soundrec+16
; end of ?ICS?lstr14_soundrec
;soundrec.c,0 :: ?ICS?lstr25_soundrec
0x0C99	0x5453 ;?ICS?lstr25_soundrec+0
0x0C9B	0x504F ;?ICS?lstr25_soundrec+2
0x0C9D	0x4550 ;?ICS?lstr25_soundrec+4
0x0C9F	0x2144 ;?ICS?lstr25_soundrec+6
0x0CA1	0x00 ;?ICS?lstr25_soundrec+8
; end of ?ICS?lstr25_soundrec
;soundrec.c,0 :: ?ICS?lstr24_soundrec
0x0CA2	0x7257 ;?ICS?lstr24_soundrec+0
0x0CA4	0x7469 ;?ICS?lstr24_soundrec+2
0x0CA6	0x2065 ;?ICS?lstr24_soundrec+4
0x0CA8	0x7265 ;?ICS?lstr24_soundrec+6
0x0CAA	0x6F72 ;?ICS?lstr24_soundrec+8
0x0CAC	0x2172 ;?ICS?lstr24_soundrec+10
0x0CAE	0x00 ;?ICS?lstr24_soundrec+12
; end of ?ICS?lstr24_soundrec
;soundrec.c,0 :: ?ICS?lstr23_soundrec
0x0CAF	0x6143 ;?ICS?lstr23_soundrec+0
0x0CB1	0x6472 ;?ICS?lstr23_soundrec+2
0x0CB3	0x6520 ;?ICS?lstr23_soundrec+4
0x0CB5	0x7272 ;?ICS?lstr23_soundrec+6
0x0CB7	0x726F ;?ICS?lstr23_soundrec+8
0x0CB9	0x202C ;?ICS?lstr23_soundrec+10
0x0CBB	0x5043 ;?ICS?lstr23_soundrec+12
0x0CBD	0x2055 ;?ICS?lstr23_soundrec+14
0x0CBF	0x7274 ;?ICS?lstr23_soundrec+16
0x0CC1	0x7061 ;?ICS?lstr23_soundrec+18
0x0CC3	0x6570 ;?ICS?lstr23_soundrec+20
0x0CC5	0x2164 ;?ICS?lstr23_soundrec+22
0x0CC7	0x00 ;?ICS?lstr23_soundrec+24
; end of ?ICS?lstr23_soundrec
;soundrec.c,0 :: ?ICS?lstr26_soundrec
0x0CC8	0x7257 ;?ICS?lstr26_soundrec+0
0x0CCA	0x7469 ;?ICS?lstr26_soundrec+2
0x0CCC	0x6574 ;?ICS?lstr26_soundrec+4
0x0CCE	0x3A6E ;?ICS?lstr26_soundrec+6
0x0CD0	0x00 ;?ICS?lstr26_soundrec+8
; end of ?ICS?lstr26_soundrec
;soundrec.c,0 :: ?ICS?lstr28_soundrec
0x0CD1	0x6552 ;?ICS?lstr28_soundrec+0
0x0CD3	0x6461 ;?ICS?lstr28_soundrec+2
0x0CD5	0x6520 ;?ICS?lstr28_soundrec+4
0x0CD7	0x7272 ;?ICS?lstr28_soundrec+6
0x0CD9	0x726F ;?ICS?lstr28_soundrec+8
0x0CDB	0x0021 ;?ICS?lstr28_soundrec+10
; end of ?ICS?lstr28_soundrec
;soundrec.c,0 :: ?ICS?lstr27_soundrec
0x0CDD	0x6F4C ;?ICS?lstr27_soundrec+0
0x0CDF	0x7473 ;?ICS?lstr27_soundrec+2
0x0CE1	0x203A ;?ICS?lstr27_soundrec+4
0x0CE3	0x00 ;?ICS?lstr27_soundrec+6
; end of ?ICS?lstr27_soundrec
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x001C      [14]    _UART1_Write
0x002A      [18]    _SPI1_Write
0x003C      [24]    _____DoIFC
0x0054      [54]    _Div_16x16_U
0x008A      [24]    _UART_Write
0x00A2      [18]    _SPI1_Read
0x00B4     [174]    _sendCMD
0x0162     [146]    _WordToStr
0x01F4      [52]    _UART_Write_Text
0x0228      [98]    _command
0x028A      [88]    _SPI1_Init_Advanced
0x02E2      [16]    ___CC2DW
0x02F2      [90]    _UART1_Init
0x034C     [368]    _mmcInit
0x04BC     [218]    _IntToStr
0x0596     [372]    _writeMultipleBlock
0x070A     [334]    _readMultipleBlock
0x0858     [948]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    __Lib_SoftI2C_PutZerosToLATSda_temp_sda_L0
0x0000       [1]    __Lib_SoftI2C_PutZerosToLATScl_temp_scl_L0
0x0000       [1]    FLASH_Erase_64_SaveINTCON_L0
0x0000       [1]    R0
0x0000       [1]    EEPROM_Write_SaveINTCON_L0
0x0000       [1]    UART1_Init_tmp_L0
0x0000       [1]    SPI1_Write_tmp_L0
0x0001       [1]    R1
0x0001       [1]    UART1_Read___tmp_UART1_Read_L0
0x0001       [1]    I2C1_Rd_tmp_L0
0x0001       [1]    ispunct_rslt_L0
0x0001       [1]    FLASH_Write_32_i_L0
0x0001       [2]    FLASH_Read_N_Bytes_i_L0
0x0001       [1]    FLASH_Erase_Write_64_i_L0
0x0001       [1]    __Lib_PS2_Wait_Falling_nsample_L0
0x0002       [2]    memcpy_dd_L0
0x0002       [2]    memchr_s_L0
0x0002       [1]    R2
0x0002       [2]    strlen_cp_L0
0x0002       [1]    FLASH_Erase_Write_64_j_L0
0x0002       [1]    FLASH_Write_32_SaveINTCON_L0
0x0002       [2]    memset_pp_L0
0x0003       [2]    Ltrim_original_L0
0x0003       [1]    codeToRam_i_L0
0x0003       [1]    FLASH_Erase_Write_64_SaveINTCON_L0
0x0003       [1]    MM_Init_i_L0
0x0003       [2]    MM_TotalFreeMemSize_Tot_L0
0x0003       [1]    R3
0x0003       [2]    memmove_tt_L0
0x0003       [2]    __Lib_MmcFat16_f16_toInt_l_L0
0x0004       [1]    R4
0x0004       [2]    memcpy_ss_L0
0x0004       [2]    __Lib_MemManager_MM_GetMemAlign_P_L0
0x0004       [2]    strcpy_cp_L0
0x0004       [2]    frexp_pom_L0
0x0004       [2]    strncpy_cp_L0
0x0004       [2]    strncat_cp_L0
0x0004       [2]    strcat_cp_L0
0x0005       [2]    Ltrim_p_L0
0x0005       [1]    MM_TotalFreeMemSize_i_L0
0x0005       [2]    LongWordToHex_input_half_L0
0x0005       [1]    R5
0x0005       [2]    LongIntToHex_input_half_L0
0x0005       [2]    memmove_ff_L0
0x0006       [1]    __Lib_MemManager_MM_GetMemAlign_i_L0
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [1]    R8
0x0009       [1]    R9
0x0009       [4]    __Lib_MmcFat16_f16_toLong_l_L0
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0015       [2]    _mode
0x0017       [8]    ?lstr19_soundrec
0x001F      [25]    ?lstr17_soundrec
0x0038      [14]    ?lstr18_soundrec
0x0046       [8]    ?lstr21_soundrec
0x004E      [15]    ?lstr22_soundrec
0x005D       [6]    ?lstr20_soundrec
0x0063       [2]    _t
0x0065       [2]    _rejected
0x0067      [11]    ?lstr15_soundrec
0x0072      [15]    ?lstr16_soundrec
0x0081      [15]    ?lstr13_soundrec
0x0090      [18]    ?lstr14_soundrec
0x00A2       [9]    ?lstr25_soundrec
0x00AB      [13]    ?lstr24_soundrec
0x00B8      [25]    ?lstr23_soundrec
0x00D1       [9]    ?lstr26_soundrec
0x00DA      [12]    ?lstr28_soundrec
0x00E6       [7]    ?lstr27_soundrec
0x00ED       [1]    _count
0x00EE       [1]    _spiReadData
0x00EF       [2]    _numberOfSectors
0x00F1       [4]    _UART_Rd_Ptr
0x00F5       [4]    _UART_Rdy_Ptr
0x00F9       [4]    _UART_Tx_Idle_Ptr
0x00FD       [1]    main_lastMode_L0
0x00FE       [1]    main_initRetry_L0
0x00FF       [1]    mmcInit_u_L0
0x00FF       [1]    writeMultipleBlock_retry_L0
0x00FF       [1]    readMultipleBlock_error_L0
0x0100       [1]    readMultipleBlock_retry_L0
0x0100       [1]    writeMultipleBlock_error_L0
0x0100       [1]    mmcInit_error_L0
0x0101       [4]    _SPI_Rd_Ptr
0x0105       [4]    _SPI_Wr_Ptr
0x0109       [4]    _UART_Wr_Ptr
0x010D      [10]    main_text_L0
0x0117       [1]    FARG_SPI1_Init_Advanced_master
0x0117       [2]    writeMultipleBlock_g_L0
0x0117       [2]    readMultipleBlock_g_L0
0x0117       [2]    FARG_IntToStr_input
0x0118       [1]    FARG_SPI1_Init_Advanced_data_sample
0x0119       [2]    readMultipleBlock_sectorIndex_L0
0x0119       [2]    FARG_IntToStr_output
0x0119       [1]    FARG_SPI1_Init_Advanced_clock_idle
0x011A       [1]    FARG_SPI1_Init_Advanced_transmit_edge
0x011B       [2]    IntToStr_i_L0
0x011D       [2]    IntToStr_negative_L0
0x011F       [2]    IntToStr_inword_L0
0x0121       [2]    FARG_UART_Write_Text_uart_text
0x0121       [1]    FARG_sendCMD_cmd
0x0121       [2]    FARG_WordToStr_input
0x0121       [1]    FARG_command_command
0x0122       [4]    FARG_sendCMD_arg
0x0122       [4]    FARG_command_fourbyte_arg
0x0123       [1]    UART_Write_Text_data__L0
0x0123       [2]    FARG_WordToStr_output
0x0124       [1]    UART_Write_Text_counter_L0
0x0125       [1]    WordToStr_len_L0
0x0126       [1]    FARG_command_CRCbits
0x0126       [1]    sendCMD_retryTimes_L0
0x0126       [2]    FLOC__WordToStr
0x0128       [1]    FARG_SPI1_Read_buffer
0x0128       [1]    FARG_UART_Write__data
0x0129       [1]    FARG_UART1_Write_data_
0x0129       [1]    FARG_SPI1_Write_data_
0x0F81       [1]    PORTB
0x0F83       [0]    RD3_bit
0x0F83       [0]    RD2_bit
0x0F8A       [1]    LATB
0x0F8B       [0]    LATC2_bit
0x0F8B       [0]    Mmc_Chip_Select
0x0F8C       [0]    LATD6_bit
0x0F8C       [0]    LATD5_bit
0x0F8C       [0]    LATD7_bit
0x0F8C       [0]    LATD4_bit
0x0F8C       [0]    LATD1_bit
0x0F8C       [0]    LATD0_bit
0x0F92       [0]    TRISA2_bit
0x0F93       [1]    TRISB
0x0F94       [0]    TRISC4_bit
0x0F94       [0]    TRISC5_bit
0x0F94       [0]    TRISC6_bit
0x0F94       [0]    TRISC3_bit
0x0F94       [1]    TRISC
0x0F94       [0]    TRISC7_bit
0x0F94       [0]    TRISC2_bit
0x0F95       [0]    TRISD2_bit
0x0F95       [0]    TRISD1_bit
0x0F95       [0]    TRISD3_bit
0x0F95       [0]    TRISD0_bit
0x0F95       [1]    TRISD
0x0F95       [0]    TRISD7_bit
0x0F95       [0]    TRISD5_bit
0x0F95       [0]    TRISD4_bit
0x0F95       [0]    TRISD6_bit
0x0F9E       [1]    PIR1
0x0FAB       [1]    RCSTA
0x0FAC       [1]    TXSTA
0x0FAD       [1]    TXREG
0x0FAE       [1]    RCREG
0x0FAF       [1]    SPBRG
0x0FB0       [1]    SPBRGH
0x0FB8       [1]    BAUDCON
0x0FC0       [0]    ADFM_bit
0x0FC0       [1]    ADCON2
0x0FC1       [1]    ADCON1
0x0FC2       [0]    ADON_bit
0x0FC6       [1]    SSPCON1
0x0FC7       [1]    SSPSTAT
0x0FC9       [1]    SSPBUF
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [2]    FSR1
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF2       [1]    INTCON
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
0x0FFD       [1]    TOSL
0x0FFE       [1]    TOSH
0x0FFF       [1]    TOSU
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x0C0C       [2]    ?ICS_mode
0x0C0E       [8]    ?ICS?lstr19_soundrec
0x0C16      [25]    ?ICS?lstr17_soundrec
0x0C2F      [14]    ?ICS?lstr18_soundrec
0x0C3D       [8]    ?ICS?lstr21_soundrec
0x0C45      [15]    ?ICS?lstr22_soundrec
0x0C54       [6]    ?ICS?lstr20_soundrec
0x0C5A       [2]    ?ICS_t
0x0C5C       [2]    ?ICS_rejected
0x0C5E      [11]    ?ICS?lstr15_soundrec
0x0C69      [15]    ?ICS?lstr16_soundrec
0x0C78      [15]    ?ICS?lstr13_soundrec
0x0C87      [18]    ?ICS?lstr14_soundrec
0x0C99       [9]    ?ICS?lstr25_soundrec
0x0CA2      [13]    ?ICS?lstr24_soundrec
0x0CAF      [25]    ?ICS?lstr23_soundrec
0x0CC8       [9]    ?ICS?lstr26_soundrec
0x0CD1      [12]    ?ICS?lstr28_soundrec
0x0CDD       [7]    ?ICS?lstr27_soundrec
//** Label List: ** 
//----------------------------------------------
  L_codeToRam0
  L_codeToRam1
  L_codeToRam2
  L_adcRead3
  L_adcRead4
  L_caidatMMC5
  L_caidatMMC6
  L_caidatMMC7
  L_caidatMMC8
  L_mmcInit9
  L_mmcInit10
  L_mmcInit11
  L_mmcInit12
  L_mmcInit13
  L_mmcInit14
  L_mmcInit15
  L_mmcInit16
  L_mmcInit17
  L_mmcInit18
  L_mmcInit19
  L_mmcInit20
  L_mmcInit21
  L_mmcInit22
  L_mmcInit23
  L_mmcInit24
  L_mmcInit25
  L_mmcInit26
  L_mmcInit27
  L_mmcInit28
  L_writeSingleBlock29
  L_writeSingleBlock30
  L_writeSingleBlock31
  L_writeSingleBlock32
  L_writeSingleBlock33
  L_writeSingleBlock34
  L_writeSingleBlock35
  L_writeSingleBlock36
  L_writeSingleBlock37
  L_writeSingleBlock38
  L_writeSingleBlock39
  L_writeSingleBlock40
  L_writeSingleBlock41
  L_readSingleBlock42
  L_readSingleBlock43
  L_readSingleBlock44
  L_readSingleBlock45
  L_readSingleBlock46
  L_readSingleBlock47
  L_readSingleBlock48
  L_readSingleBlock49
  L_readSingleBlock50
  L_readSingleBlock51
  L_readSingleBlock52
  L_readSingleBlock53
  L_readSingleBlock54
  L_readSingleBlock55
  L_sendCMD56
  L_sendCMD57
  L_sendCMD58
  L_sendCMD59
  L_sendCMD60
  L_sendCMD61
  L_sendCMD62
  L_sendCMD63
  L_writeMultipleBlock64
  L_writeMultipleBlock65
  L_writeMultipleBlock66
  L_writeMultipleBlock67
  L_writeMultipleBlock68
  L_writeMultipleBlock69
  L_writeMultipleBlock70
  L_writeMultipleBlock71
  L_writeMultipleBlock72
  L_writeMultipleBlock73
  L_writeMultipleBlock74
  L_writeMultipleBlock75
  L_writeMultipleBlock76
  L_writeMultipleBlock77
  L_writeMultipleBlock78
  L_writeMultipleBlock79
  L_writeMultipleBlock80
  L_writeMultipleBlock81
  L_writeMultipleBlock82
  L_writeMultipleBlock83
  L_writeMultipleBlock84
  L_readMultipleBlock85
  L_readMultipleBlock86
  L_readMultipleBlock87
  L_readMultipleBlock88
  L_readMultipleBlock89
  L_readMultipleBlock90
  L_readMultipleBlock91
  L_readMultipleBlock92
  L_readMultipleBlock93
  L_readMultipleBlock94
  L_readMultipleBlock95
  L_readMultipleBlock96
  L_readMultipleBlock97
  L_readMultipleBlock98
  L_readMultipleBlock99
  L_readMultipleBlock100
  L_readMultipleBlock101
  L_readMultipleBlock102
  L_readMultipleBlock103
  L_readMultipleBlock104
  L_readMultipleBlock105
  L_readMultipleBlock106
  L_main107
  L_main108
  L_main109
  L_main110
  L_main111
  L_main112
  L_main113
  L_main114
  L_main115
  L_main116
  L_main117
  L_main118
  L_main119
  L_main120
  L_main121
  L_main122
  L_main123
  L_main124
  L_main125
  L_main126
  L_main127
  L_main128
  L_main129
  L_main130
  L_main131
  L_main132
  L_main133
  L_main134
  L_main135
  L_main136
  L_main137
  L_main138
  L_main139
  L_main140
  L_main141
  L__mmcInit142
  L__mmcInit143
  L__mmcInit144
  L__main145
  L_end_codeToRam
  _codeToRam
  L_end_adcRead
  _adcRead
  L_end_caidatMMC
  _caidatMMC
  L_end_command
  _command
  L_end_mmcInit
  _mmcInit
  L__mmcInit151
  L__mmcInit152
  L__mmcInit153
  L__mmcInit154
  L_end_writeSingleBlock
  _writeSingleBlock
  L__writeSingleBlock156
  L_end_readSingleBlock
  _readSingleBlock
  L__readSingleBlock158
  L_end_sendCMD
  _sendCMD
  L_end_writeMultipleBlock
  _writeMultipleBlock
  L__writeMultipleBlock161
  L_end_readMultipleBlock
  _readMultipleBlock
  L__readMultipleBlock163
  L_end_main
  _main
  L__main165
  L__main166
  L__main167
  L__main168
  L__main169
  L__main170
  L__main171
  L_ByteToStr0
  L_ByteToStr1
  L_ByteToStr2
  L_ByteToStr3
  L_ByteToStr4
  L_ByteToStr5
  L_WordToStr6
  L_WordToStr7
  L_WordToStr8
  L_WordToStr9
  L_WordToStr10
  L_WordToStr11
  L_WordToStrWithZeros12
  L_WordToStrWithZeros13
  L_WordToStrWithZeros14
  L_WordToStrWithZeros15
  L_WordToStrWithZeros16
  L_ShortToStr17
  L_ShortToStr18
  L_ShortToStr19
  L_ShortToStr20
  L_ShortToStr21
  L_ShortToStr22
  L_IntToStr23
  L_IntToStr24
  L_IntToStr25
  L_IntToStr26
  L_IntToStr27
  L_IntToStr28
  L_IntToStrWithZeros29
  L_IntToStrWithZeros30
  L_IntToStrWithZeros31
  L_IntToStrWithZeros32
  L_IntToStrWithZeros33
  L_IntToStrWithZeros34
  L_IntToStrWithZeros35
  L_IntToStrWithZeros36
  L_IntToStrWithZeros37
  L_LongWordToStr38
  L_LongWordToStr39
  L_LongWordToStr40
  L_LongWordToStr41
  L_LongWordToStr42
  L_LongWordToStr43
  L_LongWordToStrWithZeros44
  L_LongWordToStrWithZeros45
  L_LongWordToStrWithZeros46
  L_LongWordToStrWithZeros47
  L_LongWordToStrWithZeros48
  L_LongToStr49
  L_LongToStr50
  L_LongToStr51
  L_LongToStr52
  L_LongToStr53
  L_LongToStr54
  L_LongIntToStrWithZeros55
  L_LongIntToStrWithZeros56
  L_LongIntToStrWithZeros57
  L_LongIntToStrWithZeros58
  L_LongIntToStrWithZeros59
  L_LongIntToStrWithZeros60
  L_LongIntToStrWithZeros61
  L_LongIntToStrWithZeros62
  L_LongIntToStrWithZeros63
  L_Dec2Bcd64
  L_Dec2Bcd65
  L_Rtrim66
  L_Rtrim67
  L_Rtrim68
  L_Rtrim69
  L_Ltrim70
  L_Ltrim71
  L_Ltrim72
  L_Ltrim73
  L_Ltrim74
  L_Ltrim75
  L_FloatToStr76
  L_FloatToStr77
  L_FloatToStr78
  L_FloatToStr79
  L_FloatToStr80
  L_FloatToStr81
  L_FloatToStr82
  L_FloatToStr83
  L_FloatToStr84
  L_FloatToStr85
  L_FloatToStr86
  L_FloatToStr87
  L_FloatToStr88
  L_FloatToStr89
  L_FloatToStr90
  L_FloatToStr91
  L_FloatToStr92
  L_FloatToStr93
  L_FloatToStr94
  L_FloatToStr95
  L_FloatToStr96
  L_FloatToStr97
  L__Rtrim98
  L__Ltrim99
  L__FloatToStr100
  L_end_ByteToHex
  _ByteToHex
  L_end_ShortToHex
  _ShortToHex
  L_end_WordToHex
  _WordToHex
  L_end_IntToHex
  _IntToHex
  L_end_LongWordToHex
  _LongWordToHex
  L_end_LongIntToHex
  _LongIntToHex
  L_end_ByteToStr
  _ByteToStr
  L_end_WordToStr
  _WordToStr
  L__WordToStr109
  L_end_WordToStrWithZeros
  _WordToStrWithZeros
  L__WordToStrWithZeros111
  L_end_ShortToStr
  _ShortToStr
  L__ShortToStr113
  L_end_IntToStr
  _IntToStr
  L__IntToStr115
  L__IntToStr116
  L_end_IntToStrWithZeros
  _IntToStrWithZeros
  L__IntToStrWithZeros118
  L__IntToStrWithZeros119
  L__IntToStrWithZeros120
  L_end_LongWordToStr
  _LongWordToStr
  L__LongWordToStr122
  L__LongWordToStr123
  L_end_LongWordToStrWithZeros
  _LongWordToStrWithZeros
  L__LongWordToStrWithZeros125
  L_end_LongToStr
  _LongToStr
  L__LongToStr127
  L__LongToStr128
  L_end_LongIntToStrWithZeros
  _LongIntToStrWithZeros
  L__LongIntToStrWithZeros130
  L__LongIntToStrWithZeros131
  L__LongIntToStrWithZeros132
  L_end_Dec2Bcd
  _Dec2Bcd
  L_end_Bcd2Dec
  _Bcd2Dec
  L_end_Bcd2Dec16
  _Bcd2Dec16
  L__Bcd2Dec16136
  L__Bcd2Dec16137
  L_end_Dec2Bcd16
  _Dec2Bcd16
  L__Dec2Bcd16139
  L__Dec2Bcd16140
  L_end_Rtrim
  _Rtrim
  L__Rtrim142
  L_end_Ltrim
  _Ltrim
  L_end_FloatToStr
  _FloatToStr
  L__FloatToStr145
  L__FloatToStr146
  L__FloatToStr147
  L__FloatToStr148
  L__FloatToStr149
  L_Div_16x16_S0
  L_Div_16x16_S1
  LOOPS3232A
  SADD22LA
  SOK22LA
  SADD22L8
  SOK22L8
  LOOPS3232B
  SADD22LB
  SOK22LB
  SADD22L16
  SOK22L16
  LOOPS3232C
  SADD22LC
  SOK22LC
  SADD22L24
  SOK22L24
  LOOPS3232D
  SADD22LD
  SOK22LD
  SOK22L
  L_Div_32x32_S6
  L_Div_32x32_S7
  L_Div_32x32_S8
  L_Div_32x32_S9
  FXD3232S
  END_ALL
  CA3232S
  C3232SX
  C3232SX1
  C3232S
  C3232S2
  C3232SX4
  C3232SOK
  C3232SX3
  C3232SX2
  avoid_comfrem
  LOOPU3232A
  UADD22LA
  UOK22LA
  UADD22L8
  UOK22L8
  LOOPU3232B
  UADD22LB
  UOK22LB
  UADD22L16
  UOK22L16
  LOOPU3232C
  UADD22LC
  UOK22LC
  UADD22L24
  UOK22L24
  LOOPU3232D
  UADD22LD
  UOK22LD
  UOK22L
  _NEXT
  _EXIT2
  _LOOP
  _EXIT1
  _IF_FIRST
  _IF_SECOND
  _INVERCE_FIRST
  _MULT
  _INBERSE_SECOND
  _EXIT
  L_end_Div_8x8_U
  _Div_8x8_U
  L_end_Div_16x16_U
  _Div_16x16_U
  L_end_Div_16x16_S_L
  _Div_16x16_S_L
  L_end_Div_16x16_S
  _Div_16x16_S
  L_end_Div_8x8_S
  _Div_8x8_S
  L_end_Mul_8x8_S
  _Mul_8x8_S
  L_end_Mul_16x16_U
  _Mul_16x16_U
  L_end_Mul_16x16_S
  _Mul_16x16_S
  L_end_SDIV3232L
  _SDIV3232L
  L_end_COMFREM
  _COMFREM
  L_end_Div_32x32_S
  _Div_32x32_S
  L_end_Div_32x32_U
  _Div_32x32_U
  L_end_Mul_32x32_U
  _Mul_32x32_U
  L_end_Mul_32x32_S
  _Mul_32x32_S
  L_SPI1_Init_Advanced0
  L_SPI1_Init_Advanced1
  L_SPI1_Init_Advanced2
  L_SPI1_Init_Advanced3
  L_SPI1_Init_Advanced4
  L_SPI1_Init_Advanced5
  L_SPI1_Read6
  L_SPI1_Read7
  L_SPI1_Write8
  L_SPI1_Write9
  L_end_SPI1_Init
  _SPI1_Init
  L_end_SPI1_Init_Advanced
  _SPI1_Init_Advanced
  L_end_SPI1_Read
  _SPI1_Read
  L_end_SPI1_Write
  _SPI1_Write
  L_end_SPI_Set_Active
  _SPI_Set_Active
  L_end_SPI_Read
  _SPI_Read
  L_end_SPI_Write
  _SPI_Write
  _CC2D_Loop1
  _CC2DL_Loop1
  L_loopCA2AWs
  L_loopCCA2AWs
  L_loopCS2Ss
  L_CS2Send
  L_loopCCS2Ss
  L_CCS2Send
  L_loopFZinSWs
  L_longjmp7
  L_end___CC2D
  ___CC2D
  L_end___CC2DW
  ___CC2DW
  L_end___CA2AW
  ___CA2AW
  L_end___CCA2AW
  ___CCA2AW
  L_end___CS2S
  ___CS2S
  L_end___CCS2S
  ___CCS2S
  L_end___FZinS
  ___FZinS
  L_end_____DoIFC
  _____DoIFC
  L_end_Swap
  _Swap
  L_end_setjmp
  _setjmp
  L_end_longjmp
  _longjmp
  L_UART1_Init0
  L_UART1_Init1
  L_UART1_Read2
  L_UART1_Write3
  L_UART1_Write4
  L_UART1_Write_Text5
  L_UART1_Write_Text6
  L_UART1_Read_Text7
  L_UART1_Read_Text8
  L_UART1_Read_Text9
  L_UART1_Read_Text10
  L_UART1_Read_Text11
  L_UART1_Read_Text12
  L_UART1_Read_Text13
  L_UART1_Read_Text14
  L_UART1_Read_Text15
  L_UART_Write_Text16
  L_UART_Write_Text17
  L_UART_Read_Text18
  L_UART_Read_Text19
  L_UART_Read_Text20
  L_UART_Read_Text21
  L_UART_Read_Text22
  L_UART_Read_Text23
  L_UART_Read_Text24
  L_UART_Read_Text25
  L_UART_Read_Text26
  L_end_UART1_Init
  _UART1_Init
  L_end_UART1_Data_Ready
  _UART1_Data_Ready
  L_end_UART1_Read
  _UART1_Read
  L_end_UART1_Tx_Idle
  _UART1_Tx_Idle
  L_end_UART1_Write
  _UART1_Write
  L_end_UART1_Write_Text
  _UART1_Write_Text
  L_end_UART1_Read_Text
  _UART1_Read_Text
  L_end_UART_Set_Active
  _UART_Set_Active
  L_end_UART_Write
  _UART_Write
  L_end_UART_Write_Text
  _UART_Write_Text
  L_end_UART_Read
  _UART_Read
  L_end_UART_Data_Ready
  _UART_Data_Ready
  L_end_UART_Read_Text
  _UART_Read_Text
  L_end_UART_Tx_Idle
  _UART_Tx_Idle
