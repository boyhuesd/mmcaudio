;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 13/07/2013 12:01:55 SA
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF004EF6B  	GOTO        2262
0x0004	0x0000      	NOP
0x0006	0x0000      	NOP
0x0008	0xF000EF00  	GOTO        0
0x000C	0x0000      	NOP
0x000E	0x0000      	NOP
0x0010	0x0000      	NOP
0x0012	0x0000      	NOP
0x0014	0x0000      	NOP
0x0016	0x0000      	NOP
0x0018	0xD7F3      	BRA         0
_UART1_Write:
;__Lib_UART_c67.c,58 :: 		
;__Lib_UART_c67.c,59 :: 		
L_UART1_Write3:
0x001C	0xB2AC      	BTFSC       TXSTA, 1 
0x001E	0xD002      	BRA         L_UART1_Write4
;__Lib_UART_c67.c,60 :: 		
0x0020	0x0000      	NOP
0x0022	0xD7FC      	BRA         L_UART1_Write3
L_UART1_Write4:
;__Lib_UART_c67.c,61 :: 		
0x0024	0xFFADC16C  	MOVFF       FARG_UART1_Write_data_, TXREG
;__Lib_UART_c67.c,62 :: 		
L_end_UART1_Write:
0x0028	0x0012      	RETURN      0
; end of _UART1_Write
_SPI1_Write:
;__Lib_SPI_c345.c,76 :: 		
;__Lib_SPI_c345.c,79 :: 		
0x002A	0xFFC9C16C  	MOVFF       FARG_SPI1_Write_data_, SSPBUF
;__Lib_SPI_c345.c,80 :: 		
L_SPI1_Write8:
0x002E	0xB0C7      	BTFSC       SSPSTAT, 0 
0x0030	0xD002      	BRA         L_SPI1_Write9
;__Lib_SPI_c345.c,81 :: 		
0x0032	0x0000      	NOP
0x0034	0xD7FC      	BRA         L_SPI1_Write8
L_SPI1_Write9:
;__Lib_SPI_c345.c,82 :: 		
0x0036	0xF000CFC9  	MOVFF       SSPBUF, R0
;__Lib_SPI_c345.c,84 :: 		
L_end_SPI1_Write:
0x003A	0x0012      	RETURN      0
; end of _SPI1_Write
_____DoIFC:
;__Lib_System.c,93 :: 		
;__Lib_System.c,94 :: 		
0x003C	0x50F2      	MOVF        INTCON, 0, 0
;__Lib_System.c,95 :: 		
0x003E	0x6E02      	MOVWF       R2, 0
;__Lib_System.c,96 :: 		
0x0040	0x9EF2      	BCF         INTCON, 7 
;__Lib_System.c,97 :: 		
0x0042	0x0005      	PUSH
;__Lib_System.c,98 :: 		
0x0044	0x6AFF      	CLRF        TOSU, 0
;__Lib_System.c,99 :: 		
0x0046	0x5001      	MOVF        R1, 0, 0
;__Lib_System.c,100 :: 		
0x0048	0x6EFE      	MOVWF       TOSH, 0
;__Lib_System.c,101 :: 		
0x004A	0x5000      	MOVF        R0, 0, 0
;__Lib_System.c,102 :: 		
0x004C	0x6EFD      	MOVWF       TOSL, 0
;__Lib_System.c,103 :: 		
0x004E	0xBE02      	BTFSC       R2, 7, 0
;__Lib_System.c,104 :: 		
0x0050	0x8EF2      	BSF         INTCON, 7, 0
;__Lib_System.c,105 :: 		
;__Lib_System.c,107 :: 		
L_end_____DoIFC:
0x0052	0x0012      	RETURN      0
; end of _____DoIFC
_Div_16x16_U:
;__Lib_Math.c,102 :: 		
;__Lib_Math.c,109 :: 		
0x0054	0x6A08      	CLRF        R8, 0
;__Lib_Math.c,110 :: 		
0x0056	0x6A09      	CLRF        R9, 0
;__Lib_Math.c,111 :: 		
0x0058	0x0E10      	MOVLW       16
;__Lib_Math.c,112 :: 		
0x005A	0x6E0C      	MOVWF       R12, 0
;__Lib_Math.c,113 :: 		
0x005C	0x3401      	RLCF        R1, 0, 0
;__Lib_Math.c,114 :: 		
0x005E	0x3608      	RLCF        R8, 1, 0
;__Lib_Math.c,115 :: 		
0x0060	0x3609      	RLCF        R9, 1, 0
;__Lib_Math.c,116 :: 		
0x0062	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c,117 :: 		
0x0064	0x5E08      	SUBWF       R8, 1, 0
;__Lib_Math.c,118 :: 		
0x0066	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,119 :: 		
0x0068	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_Math.c,120 :: 		
0x006A	0x3C05      	INCFSZ      R5, 0, 0
;__Lib_Math.c,121 :: 		
0x006C	0x5E09      	SUBWF       R9, 1, 0
;__Lib_Math.c,122 :: 		
0x006E	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_Math.c,123 :: 		
0x0070	0xD007      	BRA         $+16
;__Lib_Math.c,124 :: 		
0x0072	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c,125 :: 		
0x0074	0x2608      	ADDWF       R8, 1, 0
;__Lib_Math.c,126 :: 		
0x0076	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,127 :: 		
0x0078	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_Math.c,128 :: 		
0x007A	0x3C05      	INCFSZ      R5, 0, 0
;__Lib_Math.c,129 :: 		
0x007C	0x2609      	ADDWF       R9, 1, 0
;__Lib_Math.c,130 :: 		
0x007E	0x90D8      	BCF         STATUS, 0, 0
;__Lib_Math.c,131 :: 		
0x0080	0x3600      	RLCF        R0, 1, 0
;__Lib_Math.c,132 :: 		
0x0082	0x3601      	RLCF        R1, 1, 0
;__Lib_Math.c,133 :: 		
0x0084	0x2E0C      	DECFSZ      R12, 1, 0
;__Lib_Math.c,134 :: 		
0x0086	0xD7EA      	BRA         $-42
;__Lib_Math.c,136 :: 		
L_end_Div_16x16_U:
0x0088	0x0012      	RETURN      0
; end of _Div_16x16_U
_WordToStr:
;__Lib_Conversions.c,84 :: 		
;__Lib_Conversions.c,89 :: 		
0x008A	0x0101      	MOVLB       1
0x008C	0x6B69      	CLRF        WordToStr_len_L0, 1
L_WordToStr6:
0x008E	0x0E05      	MOVLW       5
0x0090	0x5D69      	SUBWF       WordToStr_len_L0, 0, 1
0x0092	0xE20A      	BC          L_WordToStr7
;__Lib_Conversions.c,90 :: 		
0x0094	0x5169      	MOVF        WordToStr_len_L0, 0, 1
0x0096	0x2567      	ADDWF       FARG_WordToStr_output, 0, 1
0x0098	0x6EE1      	MOVWF       FSR1L 
0x009A	0x0E00      	MOVLW       0
0x009C	0x2168      	ADDWFC      FARG_WordToStr_output+1, 0, 1
0x009E	0x6EE2      	MOVWF       FSR1H 
0x00A0	0x0E20      	MOVLW       32
0x00A2	0x6EE6      	MOVWF       POSTINC1 
;__Lib_Conversions.c,89 :: 		
0x00A4	0x2B69      	INCF        WordToStr_len_L0, 1, 1
;__Lib_Conversions.c,90 :: 		
0x00A6	0xD7F3      	BRA         L_WordToStr6
L_WordToStr7:
;__Lib_Conversions.c,91 :: 		
0x00A8	0x5169      	MOVF        WordToStr_len_L0, 0, 1
0x00AA	0x2567      	ADDWF       FARG_WordToStr_output, 0, 1
0x00AC	0x6EE1      	MOVWF       FSR1L 
0x00AE	0x0E00      	MOVLW       0
0x00B0	0x2168      	ADDWFC      FARG_WordToStr_output+1, 0, 1
0x00B2	0x6EE2      	MOVWF       FSR1H 
0x00B4	0x6AE6      	CLRF        POSTINC1 
0x00B6	0x0769      	DECF        WordToStr_len_L0, 1, 1
;__Lib_Conversions.c,93 :: 		
L_WordToStr9:
;__Lib_Conversions.c,94 :: 		
0x00B8	0x5169      	MOVF        WordToStr_len_L0, 0, 1
0x00BA	0x2567      	ADDWF       FARG_WordToStr_output, 0, 1
0x00BC	0x6F6A      	MOVWF       FLOC__WordToStr, 1
0x00BE	0x0E00      	MOVLW       0
0x00C0	0x2168      	ADDWFC      FARG_WordToStr_output+1, 0, 1
0x00C2	0x6F6B      	MOVWF       FLOC__WordToStr+1, 1
0x00C4	0x0E0A      	MOVLW       10
0x00C6	0x6E04      	MOVWF       R4 
0x00C8	0x0E00      	MOVLW       0
0x00CA	0x6E05      	MOVWF       R5 
0x00CC	0xF000C165  	MOVFF       FARG_WordToStr_input, R0
0x00D0	0xF001C166  	MOVFF       FARG_WordToStr_input+1, R1
0x00D4	0xDFBF      	RCALL       _Div_16x16_U
0x00D6	0xF000C008  	MOVFF       R8, R0
0x00DA	0xF001C009  	MOVFF       R9, R1
0x00DE	0x0E30      	MOVLW       48
0x00E0	0x2600      	ADDWF       R0, 1 
0x00E2	0xFFE1C16A  	MOVFF       FLOC__WordToStr, FSR1L
0x00E6	0xFFE2C16B  	MOVFF       FLOC__WordToStr+1, FSR1H
0x00EA	0xFFE6C000  	MOVFF       R0, POSTINC1
;__Lib_Conversions.c,95 :: 		
0x00EE	0x0E0A      	MOVLW       10
0x00F0	0x6E04      	MOVWF       R4 
0x00F2	0x0E00      	MOVLW       0
0x00F4	0x6E05      	MOVWF       R5 
0x00F6	0xF000C165  	MOVFF       FARG_WordToStr_input, R0
0x00FA	0xF001C166  	MOVFF       FARG_WordToStr_input+1, R1
0x00FE	0xDFAA      	RCALL       _Div_16x16_U
0x0100	0xF165C000  	MOVFF       R0, FARG_WordToStr_input
0x0104	0xF166C001  	MOVFF       R1, FARG_WordToStr_input+1
;__Lib_Conversions.c,96 :: 		
0x0108	0x0E00      	MOVLW       0
0x010A	0x1801      	XORWF       R1, 0 
0x010C	0xE102      	BNZ         L__WordToStr109
0x010E	0x0E00      	MOVLW       0
0x0110	0x1800      	XORWF       R0, 0 
L__WordToStr109:
0x0112	0xE101      	BNZ         L_WordToStr11
;__Lib_Conversions.c,97 :: 		
0x0114	0xD002      	BRA         L_WordToStr10
L_WordToStr11:
;__Lib_Conversions.c,98 :: 		
0x0116	0x0769      	DECF        WordToStr_len_L0, 1, 1
;__Lib_Conversions.c,99 :: 		
0x0118	0xD7CF      	BRA         L_WordToStr9
L_WordToStr10:
;__Lib_Conversions.c,100 :: 		
L_end_WordToStr:
0x011A	0x0012      	RETURN      0
; end of _WordToStr
_UART_Write:
;__Lib_UART_c67.c,119 :: 		
;__Lib_UART_c67.c,120 :: 		
0x011C	0xFFE1C14A  	MOVFF       _UART_Wr_Ptr+2, FSR1L
0x0120	0xFFE2C14B  	MOVFF       _UART_Wr_Ptr+3, FSR1H
0x0124	0xFFE6C165  	MOVFF       FARG_UART_Write__data, POSTINC1
0x0128	0xF000C148  	MOVFF       _UART_Wr_Ptr, R0
0x012C	0xF001C149  	MOVFF       _UART_Wr_Ptr+1, R1
0x0130	0xDF85      	RCALL       _____DoIFC
;__Lib_UART_c67.c,121 :: 		
L_end_UART_Write:
0x0132	0x0012      	RETURN      0
; end of _UART_Write
_SPI1_Read:
;__Lib_SPI_c345.c,67 :: 		
;__Lib_SPI_c345.c,68 :: 		
0x0134	0xFFC9C165  	MOVFF       FARG_SPI1_Read_buffer, SSPBUF
;__Lib_SPI_c345.c,69 :: 		
L_SPI1_Read6:
0x0138	0xB0C7      	BTFSC       SSPSTAT, 0 
0x013A	0xD002      	BRA         L_SPI1_Read7
;__Lib_SPI_c345.c,70 :: 		
0x013C	0x0000      	NOP
0x013E	0xD7FC      	BRA         L_SPI1_Read6
L_SPI1_Read7:
;__Lib_SPI_c345.c,71 :: 		
0x0140	0xF000CFC9  	MOVFF       SSPBUF, R0
;__Lib_SPI_c345.c,72 :: 		
L_end_SPI1_Read:
0x0144	0x0012      	RETURN      0
; end of _SPI1_Read
_IntToStr:
;__Lib_Conversions.c,146 :: 		
;__Lib_Conversions.c,152 :: 		
0x0146	0x0101      	MOVLB       1
0x0148	0x6B61      	CLRF        IntToStr_negative_L0, 1
0x014A	0x6B62      	CLRF        IntToStr_negative_L0+1, 1
;__Lib_Conversions.c,153 :: 		
0x014C	0xF163C15B  	MOVFF       FARG_IntToStr_input, IntToStr_inword_L0
0x0150	0xF164C15C  	MOVFF       FARG_IntToStr_input+1, IntToStr_inword_L0+1
;__Lib_Conversions.c,154 :: 		
0x0154	0x0E80      	MOVLW       128
0x0156	0x195C      	XORWF       FARG_IntToStr_input+1, 0, 1
0x0158	0x6E00      	MOVWF       R0 
0x015A	0x0E80      	MOVLW       128
0x015C	0x5C00      	SUBWF       R0, 0 
0x015E	0xE102      	BNZ         L__IntToStr115
0x0160	0x0E00      	MOVLW       0
0x0162	0x5D5B      	SUBWF       FARG_IntToStr_input, 0, 1
L__IntToStr115:
0x0164	0xE20B      	BC          L_IntToStr23
;__Lib_Conversions.c,155 :: 		
0x0166	0x0E01      	MOVLW       1
0x0168	0x6F61      	MOVWF       IntToStr_negative_L0, 1
0x016A	0x0E00      	MOVLW       0
0x016C	0x6F62      	MOVWF       IntToStr_negative_L0+1, 1
;__Lib_Conversions.c,156 :: 		
0x016E	0x515B      	MOVF        FARG_IntToStr_input, 0, 1
0x0170	0x0800      	SUBLW       0
0x0172	0x6F63      	MOVWF       IntToStr_inword_L0, 1
0x0174	0xF164C15C  	MOVFF       FARG_IntToStr_input+1, IntToStr_inword_L0+1
0x0178	0x0E00      	MOVLW       0
0x017A	0x5764      	SUBFWB      IntToStr_inword_L0+1, 1, 1
;__Lib_Conversions.c,157 :: 		
L_IntToStr23:
;__Lib_Conversions.c,158 :: 		
0x017C	0xF165C163  	MOVFF       IntToStr_inword_L0, FARG_WordToStr_input
0x0180	0xF166C164  	MOVFF       IntToStr_inword_L0+1, FARG_WordToStr_input+1
0x0184	0xF167C15D  	MOVFF       FARG_IntToStr_output, FARG_WordToStr_output
0x0188	0xF168C15E  	MOVFF       FARG_IntToStr_output+1, FARG_WordToStr_output+1
0x018C	0xDF7E      	RCALL       _WordToStr
;__Lib_Conversions.c,160 :: 		
0x018E	0x0E06      	MOVLW       6
0x0190	0x6F5F      	MOVWF       IntToStr_i_L0, 1
0x0192	0x0E00      	MOVLW       0
0x0194	0x6F60      	MOVWF       IntToStr_i_L0+1, 1
;__Lib_Conversions.c,161 :: 		
L_IntToStr24:
0x0196	0x0E00      	MOVLW       0
0x0198	0x6E00      	MOVWF       R0 
0x019A	0x5160      	MOVF        IntToStr_i_L0+1, 0, 1
0x019C	0x5C00      	SUBWF       R0, 0 
0x019E	0xE102      	BNZ         L__IntToStr116
0x01A0	0x515F      	MOVF        IntToStr_i_L0, 0, 1
0x01A2	0x0800      	SUBLW       0
L__IntToStr116:
0x01A4	0xE219      	BC          L_IntToStr25
;__Lib_Conversions.c,162 :: 		
0x01A6	0x515F      	MOVF        IntToStr_i_L0, 0, 1
0x01A8	0x255D      	ADDWF       FARG_IntToStr_output, 0, 1
0x01AA	0x6EE1      	MOVWF       FSR1L 
0x01AC	0x5160      	MOVF        IntToStr_i_L0+1, 0, 1
0x01AE	0x215E      	ADDWFC      FARG_IntToStr_output+1, 0, 1
0x01B0	0x6EE2      	MOVWF       FSR1H 
0x01B2	0x0E01      	MOVLW       1
0x01B4	0x5D5F      	SUBWF       IntToStr_i_L0, 0, 1
0x01B6	0x6E00      	MOVWF       R0 
0x01B8	0x0E00      	MOVLW       0
0x01BA	0x5960      	SUBWFB      IntToStr_i_L0+1, 0, 1
0x01BC	0x6E01      	MOVWF       R1 
0x01BE	0x5000      	MOVF        R0, 0 
0x01C0	0x255D      	ADDWF       FARG_IntToStr_output, 0, 1
0x01C2	0x6EE9      	MOVWF       FSR0L 
0x01C4	0x5001      	MOVF        R1, 0 
0x01C6	0x215E      	ADDWFC      FARG_IntToStr_output+1, 0, 1
0x01C8	0x6EEA      	MOVWF       FSR0H 
0x01CA	0xFFE6CFEE  	MOVFF       POSTINC0, POSTINC1
;__Lib_Conversions.c,163 :: 		
0x01CE	0x0E01      	MOVLW       1
0x01D0	0x5F5F      	SUBWF       IntToStr_i_L0, 1, 1
0x01D2	0x0E00      	MOVLW       0
0x01D4	0x5B60      	SUBWFB      IntToStr_i_L0+1, 1, 1
;__Lib_Conversions.c,164 :: 		
0x01D6	0xD7DF      	BRA         L_IntToStr24
L_IntToStr25:
;__Lib_Conversions.c,165 :: 		
0x01D8	0xFFE1C15D  	MOVFF       FARG_IntToStr_output, FSR1L
0x01DC	0xFFE2C15E  	MOVFF       FARG_IntToStr_output+1, FSR1H
0x01E0	0x0E20      	MOVLW       32
0x01E2	0x6EE6      	MOVWF       POSTINC1 
;__Lib_Conversions.c,166 :: 		
0x01E4	0x5161      	MOVF        IntToStr_negative_L0, 0, 1
0x01E6	0x1162      	IORWF       IntToStr_negative_L0+1, 0, 1
0x01E8	0xE01A      	BZ          L_IntToStr26
;__Lib_Conversions.c,167 :: 		
0x01EA	0x6B5F      	CLRF        IntToStr_i_L0, 1
0x01EC	0x6B60      	CLRF        IntToStr_i_L0+1, 1
;__Lib_Conversions.c,168 :: 		
L_IntToStr27:
0x01EE	0x515F      	MOVF        IntToStr_i_L0, 0, 1
0x01F0	0x255D      	ADDWF       FARG_IntToStr_output, 0, 1
0x01F2	0x6EE9      	MOVWF       FSR0L 
0x01F4	0x5160      	MOVF        IntToStr_i_L0+1, 0, 1
0x01F6	0x215E      	ADDWFC      FARG_IntToStr_output+1, 0, 1
0x01F8	0x6EEA      	MOVWF       FSR0H 
0x01FA	0x50EE      	MOVF        POSTINC0, 0 
0x01FC	0x0A20      	XORLW       32
0x01FE	0xE103      	BNZ         L_IntToStr28
0x0200	0x4B5F      	INFSNZ      IntToStr_i_L0, 1, 1
0x0202	0x2B60      	INCF        IntToStr_i_L0+1, 1, 1
0x0204	0xD7F4      	BRA         L_IntToStr27
L_IntToStr28:
;__Lib_Conversions.c,169 :: 		
0x0206	0x0E01      	MOVLW       1
0x0208	0x5F5F      	SUBWF       IntToStr_i_L0, 1, 1
0x020A	0x0E00      	MOVLW       0
0x020C	0x5B60      	SUBWFB      IntToStr_i_L0+1, 1, 1
;__Lib_Conversions.c,170 :: 		
0x020E	0x515F      	MOVF        IntToStr_i_L0, 0, 1
0x0210	0x255D      	ADDWF       FARG_IntToStr_output, 0, 1
0x0212	0x6EE1      	MOVWF       FSR1L 
0x0214	0x5160      	MOVF        IntToStr_i_L0+1, 0, 1
0x0216	0x215E      	ADDWFC      FARG_IntToStr_output+1, 0, 1
0x0218	0x6EE2      	MOVWF       FSR1H 
0x021A	0x0E2D      	MOVLW       45
0x021C	0x6EE6      	MOVWF       POSTINC1 
L_IntToStr26:
;__Lib_Conversions.c,171 :: 		
L_end_IntToStr:
0x021E	0x0012      	RETURN      0
; end of _IntToStr
_command:
;soundrec.c,121 :: 		command(char command, uint32_t fourbyte_arg, char CRCbits)
;soundrec.c,123 :: 		spiWrite(0xff);
0x0220	0x0EFF      	MOVLW       255
0x0222	0x0101      	MOVLB       1
0x0224	0x6F6C      	MOVWF       FARG_SPI1_Write_data_, 1
0x0226	0xDF01      	RCALL       _SPI1_Write
;soundrec.c,124 :: 		spiWrite(0b01000000 | command);
0x0228	0x0E40      	MOVLW       64
0x022A	0x0101      	MOVLB       1
0x022C	0x115B      	IORWF       FARG_command_command, 0, 1
0x022E	0x6F6C      	MOVWF       FARG_SPI1_Write_data_, 1
0x0230	0xDEFC      	RCALL       _SPI1_Write
;soundrec.c,125 :: 		spiWrite((uint8_t) (fourbyte_arg >> 24));
0x0232	0xF000C15F  	MOVFF       FARG_command_fourbyte_arg+3, R0
0x0236	0x6A01      	CLRF        R1 
0x0238	0x6A02      	CLRF        R2 
0x023A	0x6A03      	CLRF        R3 
0x023C	0xF16CC000  	MOVFF       R0, FARG_SPI1_Write_data_
0x0240	0xDEF4      	RCALL       _SPI1_Write
;soundrec.c,126 :: 		spiWrite((uint8_t) (fourbyte_arg >> 16));
0x0242	0xF000C15E  	MOVFF       FARG_command_fourbyte_arg+2, R0
0x0246	0xF001C15F  	MOVFF       FARG_command_fourbyte_arg+3, R1
0x024A	0x6A02      	CLRF        R2 
0x024C	0x6A03      	CLRF        R3 
0x024E	0xF16CC000  	MOVFF       R0, FARG_SPI1_Write_data_
0x0252	0xDEEB      	RCALL       _SPI1_Write
;soundrec.c,127 :: 		spiWrite((uint8_t) (fourbyte_arg >> 8));
0x0254	0xF000C15D  	MOVFF       FARG_command_fourbyte_arg+1, R0
0x0258	0xF001C15E  	MOVFF       FARG_command_fourbyte_arg+2, R1
0x025C	0xF002C15F  	MOVFF       FARG_command_fourbyte_arg+3, R2
0x0260	0x6A03      	CLRF        R3 
0x0262	0xF16CC000  	MOVFF       R0, FARG_SPI1_Write_data_
0x0266	0xDEE1      	RCALL       _SPI1_Write
;soundrec.c,128 :: 		spiWrite((uint8_t) (fourbyte_arg));
0x0268	0xF16CC15C  	MOVFF       FARG_command_fourbyte_arg, FARG_SPI1_Write_data_
0x026C	0xDEDE      	RCALL       _SPI1_Write
;soundrec.c,129 :: 		spiWrite(CRCbits);
0x026E	0xF16CC160  	MOVFF       FARG_command_CRCbits, FARG_SPI1_Write_data_
0x0272	0xDEDB      	RCALL       _SPI1_Write
;soundrec.c,130 :: 		spiReadData = spiRead();
0x0274	0x0EFF      	MOVLW       255
0x0276	0x0101      	MOVLB       1
0x0278	0x6F65      	MOVWF       FARG_SPI1_Read_buffer, 1
0x027A	0xDF5C      	RCALL       _SPI1_Read
0x027C	0xF137C000  	MOVFF       R0, _spiReadData
;soundrec.c,131 :: 		}
L_end_command:
0x0280	0x0012      	RETURN      0
; end of _command
_UART_Write_Text:
;__Lib_UART_c67.c,123 :: 		
;__Lib_UART_c67.c,124 :: 		
0x0282	0x0101      	MOVLB       1
0x0284	0x6B5E      	CLRF        UART_Write_Text_counter_L0, 1
;__Lib_UART_c67.c,126 :: 		
0x0286	0xFFE9C15B  	MOVFF       FARG_UART_Write_Text_uart_text, FSR0L
0x028A	0xFFEAC15C  	MOVFF       FARG_UART_Write_Text_uart_text+1, FSR0H
0x028E	0xF15DCFEE  	MOVFF       POSTINC0, UART_Write_Text_data__L0
;__Lib_UART_c67.c,127 :: 		
L_UART_Write_Text16:
0x0292	0x515D      	MOVF        UART_Write_Text_data__L0, 0, 1
0x0294	0x0A00      	XORLW       0
0x0296	0xE00E      	BZ          L_UART_Write_Text17
;__Lib_UART_c67.c,128 :: 		
0x0298	0xF165C15D  	MOVFF       UART_Write_Text_data__L0, FARG_UART_Write__data
0x029C	0xDF3F      	RCALL       _UART_Write
;__Lib_UART_c67.c,129 :: 		
0x029E	0x0101      	MOVLB       1
0x02A0	0x2B5E      	INCF        UART_Write_Text_counter_L0, 1, 1
;__Lib_UART_c67.c,130 :: 		
0x02A2	0x515E      	MOVF        UART_Write_Text_counter_L0, 0, 1
0x02A4	0x255B      	ADDWF       FARG_UART_Write_Text_uart_text, 0, 1
0x02A6	0x6EE9      	MOVWF       FSR0L 
0x02A8	0x0E00      	MOVLW       0
0x02AA	0x215C      	ADDWFC      FARG_UART_Write_Text_uart_text+1, 0, 1
0x02AC	0x6EEA      	MOVWF       FSR0H 
0x02AE	0xF15DCFEE  	MOVFF       POSTINC0, UART_Write_Text_data__L0
;__Lib_UART_c67.c,131 :: 		
0x02B2	0xD7EF      	BRA         L_UART_Write_Text16
L_UART_Write_Text17:
;__Lib_UART_c67.c,132 :: 		
L_end_UART_Write_Text:
0x02B4	0x0012      	RETURN      0
; end of _UART_Write_Text
_SPI1_Init_Advanced:
;__Lib_SPI_c345.c,40 :: 		
;__Lib_SPI_c345.c,41 :: 		
0x02B6	0x0E34      	MOVLW       _SPI1_Read
0x02B8	0x0101      	MOVLB       1
0x02BA	0x6F38      	MOVWF       _SPI_Rd_Ptr, 1
0x02BC	0x0E01      	MOVLW       hi_addr(_SPI1_Read)
0x02BE	0x6F39      	MOVWF       _SPI_Rd_Ptr+1, 1
0x02C0	0x0E65      	MOVLW       FARG_SPI1_Read_buffer
0x02C2	0x6F3A      	MOVWF       _SPI_Rd_Ptr+2, 1
0x02C4	0x0E01      	MOVLW       hi_addr(FARG_SPI1_Read_buffer)
0x02C6	0x6F3B      	MOVWF       _SPI_Rd_Ptr+3, 1
;__Lib_SPI_c345.c,42 :: 		
0x02C8	0x0E2A      	MOVLW       _SPI1_Write
0x02CA	0x6F3C      	MOVWF       _SPI_Wr_Ptr, 1
0x02CC	0x0E00      	MOVLW       hi_addr(_SPI1_Write)
0x02CE	0x6F3D      	MOVWF       _SPI_Wr_Ptr+1, 1
0x02D0	0x0E6C      	MOVLW       FARG_SPI1_Write_data_
0x02D2	0x6F3E      	MOVWF       _SPI_Wr_Ptr+2, 1
0x02D4	0x0E01      	MOVLW       hi_addr(FARG_SPI1_Write_data_)
0x02D6	0x6F3F      	MOVWF       _SPI_Wr_Ptr+3, 1
;__Lib_SPI_c345.c,44 :: 		
0x02D8	0x9A94      	BCF         TRISC5_bit, BitPos(TRISC5_bit+0) 
;__Lib_SPI_c345.c,45 :: 		
0x02DA	0x515B      	MOVF        FARG_SPI1_Init_Advanced_master, 0, 1
0x02DC	0x0A04      	XORLW       4
0x02DE	0xE102      	BNZ         L_SPI1_Init_Advanced0
0x02E0	0x8694      	BSF         TRISC3_bit, BitPos(TRISC3_bit+0) 
0x02E2	0xD001      	BRA         L_SPI1_Init_Advanced1
L_SPI1_Init_Advanced0:
;__Lib_SPI_c345.c,46 :: 		
0x02E4	0x9694      	BCF         TRISC3_bit, BitPos(TRISC3_bit+0) 
L_SPI1_Init_Advanced1:
;__Lib_SPI_c345.c,47 :: 		
0x02E6	0x8894      	BSF         TRISC4_bit, BitPos(TRISC4_bit+0) 
;__Lib_SPI_c345.c,49 :: 		
0x02E8	0x6AC6      	CLRF        SSPCON1 
;__Lib_SPI_c345.c,50 :: 		
0x02EA	0x515B      	MOVF        FARG_SPI1_Init_Advanced_master, 0, 1
0x02EC	0x12C6      	IORWF       SSPCON1, 1 
;__Lib_SPI_c345.c,51 :: 		
0x02EE	0x515D      	MOVF        FARG_SPI1_Init_Advanced_clock_idle, 0, 1
0x02F0	0x12C6      	IORWF       SSPCON1, 1 
;__Lib_SPI_c345.c,52 :: 		
0x02F2	0x515C      	MOVF        FARG_SPI1_Init_Advanced_data_sample, 0, 1
0x02F4	0x12C7      	IORWF       SSPSTAT, 1 
;__Lib_SPI_c345.c,54 :: 		
0x02F6	0x535D      	MOVF        FARG_SPI1_Init_Advanced_clock_idle, 1, 1
0x02F8	0xE005      	BZ          L_SPI1_Init_Advanced2
;__Lib_SPI_c345.c,55 :: 		
0x02FA	0x515E      	MOVF        FARG_SPI1_Init_Advanced_transmit_edge, 0, 1
0x02FC	0x0A00      	XORLW       0
0x02FE	0xB4D8      	BTFSC       STATUS, 2 
;__Lib_SPI_c345.c,56 :: 		
0x0300	0x8CC7      	BSF         SSPSTAT, 6 
L_SPI1_Init_Advanced3:
;__Lib_SPI_c345.c,57 :: 		
0x0302	0xD003      	BRA         L_SPI1_Init_Advanced4
L_SPI1_Init_Advanced2:
;__Lib_SPI_c345.c,59 :: 		
0x0304	0x535E      	MOVF        FARG_SPI1_Init_Advanced_transmit_edge, 1, 1
0x0306	0xA4D8      	BTFSS       STATUS, 2 
;__Lib_SPI_c345.c,60 :: 		
0x0308	0x8CC7      	BSF         SSPSTAT, 6 
L_SPI1_Init_Advanced5:
;__Lib_SPI_c345.c,61 :: 		
L_SPI1_Init_Advanced4:
;__Lib_SPI_c345.c,62 :: 		
0x030A	0x8AC6      	BSF         SSPCON1, 5 
;__Lib_SPI_c345.c,63 :: 		
L_end_SPI1_Init_Advanced:
0x030C	0x0012      	RETURN      0
; end of _SPI1_Init_Advanced
_UART1_Init:
;__Lib_UART_c67.c,15 :: 		
;__Lib_UART_c67.c,18 :: 		
0x030E	0x0E1C      	MOVLW       _UART1_Write
0x0310	0x0101      	MOVLB       1
0x0312	0x6F48      	MOVWF       _UART_Wr_Ptr, 1
0x0314	0x0E00      	MOVLW       hi_addr(_UART1_Write)
0x0316	0x6F49      	MOVWF       _UART_Wr_Ptr+1, 1
0x0318	0x0E6C      	MOVLW       FARG_UART1_Write_data_
0x031A	0x6F4A      	MOVWF       _UART_Wr_Ptr+2, 1
0x031C	0x0E01      	MOVLW       hi_addr(FARG_UART1_Write_data_)
0x031E	0x6F4B      	MOVWF       _UART_Wr_Ptr+3, 1
;__Lib_UART_c67.c,19 :: 		
0x0320	0x0EFF      	MOVLW       _UART1_Read
0x0322	0x6F4C      	MOVWF       _UART_Rd_Ptr, 1
0x0324	0x0EFF      	MOVLW       hi_addr(_UART1_Read)
0x0326	0x6F4D      	MOVWF       _UART_Rd_Ptr+1, 1
0x0328	0x0E00      	MOVLW       0
0x032A	0x6F4E      	MOVWF       _UART_Rd_Ptr+2, 1
0x032C	0x0E00      	MOVLW       0
0x032E	0x6F4F      	MOVWF       _UART_Rd_Ptr+3, 1
;__Lib_UART_c67.c,20 :: 		
0x0330	0x0EFF      	MOVLW       _UART1_Data_Ready
0x0332	0x6F40      	MOVWF       _UART_Rdy_Ptr, 1
0x0334	0x0EFF      	MOVLW       hi_addr(_UART1_Data_Ready)
0x0336	0x6F41      	MOVWF       _UART_Rdy_Ptr+1, 1
0x0338	0x0E00      	MOVLW       0
0x033A	0x6F42      	MOVWF       _UART_Rdy_Ptr+2, 1
0x033C	0x0E00      	MOVLW       0
0x033E	0x6F43      	MOVWF       _UART_Rdy_Ptr+3, 1
;__Lib_UART_c67.c,21 :: 		
0x0340	0x0EFF      	MOVLW       _UART1_Tx_Idle
0x0342	0x6F44      	MOVWF       _UART_Tx_Idle_Ptr, 1
0x0344	0x0EFF      	MOVLW       hi_addr(_UART1_Tx_Idle)
0x0346	0x6F45      	MOVWF       _UART_Tx_Idle_Ptr+1, 1
0x0348	0x0E00      	MOVLW       0
0x034A	0x6F46      	MOVWF       _UART_Tx_Idle_Ptr+2, 1
0x034C	0x0E00      	MOVLW       0
0x034E	0x6F47      	MOVWF       _UART_Tx_Idle_Ptr+3, 1
;__Lib_UART_c67.c,23 :: 		
0x0350	0x8AAC      	BSF         TXSTA, 5 
;__Lib_UART_c67.c,24 :: 		
0x0352	0x0E90      	MOVLW       144
0x0354	0x6EAB      	MOVWF       RCSTA 
;__Lib_UART_c67.c,25 :: 		
0x0356	0x8E94      	BSF         TRISC7_bit, BitPos(TRISC7_bit+0) 
;__Lib_UART_c67.c,26 :: 		
0x0358	0x9C94      	BCF         TRISC6_bit, BitPos(TRISC6_bit+0) 
;__Lib_UART_c67.c,28 :: 		
L_UART1_Init0:
0x035A	0xAA9E      	BTFSS       PIR1, 5 
0x035C	0xD003      	BRA         L_UART1_Init1
;__Lib_UART_c67.c,29 :: 		
0x035E	0xF000CFAE  	MOVFF       RCREG, R0
0x0362	0xD7FB      	BRA         L_UART1_Init0
L_UART1_Init1:
;__Lib_UART_c67.c,30 :: 		
L_end_UART1_Init:
0x0364	0x0012      	RETURN      0
; end of _UART1_Init
___CC2DW:
;__Lib_System.c,21 :: 		
;__Lib_System.c,23 :: 		
_CC2DL_Loop1:
;__Lib_System.c,24 :: 		
0x0366	0x0009      	TBLRD*+
;__Lib_System.c,25 :: 		
0x0368	0xFFE6CFF5  	MOVFF       TABLAT, POSTINC1
;__Lib_System.c,26 :: 		
0x036C	0x0600      	DECF        R0, 1, 0
;__Lib_System.c,27 :: 		
0x036E	0xE1FB      	BNZ         _CC2DL_Loop1
;__Lib_System.c,28 :: 		
0x0370	0x0601      	DECF        R1, 1, 0
;__Lib_System.c,29 :: 		
0x0372	0xE1F9      	BNZ         _CC2DL_Loop1
;__Lib_System.c,31 :: 		
L_end___CC2DW:
0x0374	0x0012      	RETURN      0
; end of ___CC2DW
_mmcInit:
;soundrec.c,134 :: 		mmcInit(void)
;soundrec.c,138 :: 		_SPI_CLK_IDLE_LOW, _SPI_LOW_2_HIGH);
0x0376	0x0E02      	MOVLW       2
0x0378	0x0101      	MOVLB       1
0x037A	0x6F5B      	MOVWF       FARG_SPI1_Init_Advanced_master, 1
0x037C	0x6B5C      	CLRF        FARG_SPI1_Init_Advanced_data_sample, 1
0x037E	0x6B5D      	CLRF        FARG_SPI1_Init_Advanced_clock_idle, 1
0x0380	0x0E01      	MOVLW       1
0x0382	0x6F5E      	MOVWF       FARG_SPI1_Init_Advanced_transmit_edge, 1
0x0384	0xDF98      	RCALL       _SPI1_Init_Advanced
;soundrec.c,139 :: 		Delay_ms(2);
0x0386	0x0E0D      	MOVLW       13
0x0388	0x6E0C      	MOVWF       R12, 0
0x038A	0x0EFB      	MOVLW       251
0x038C	0x6E0D      	MOVWF       R13, 0
L_mmcInit9:
0x038E	0x2E0D      	DECFSZ      R13, 1, 0
0x0390	0xD7FE      	BRA         L_mmcInit9
0x0392	0x2E0C      	DECFSZ      R12, 1, 0
0x0394	0xD7FC      	BRA         L_mmcInit9
0x0396	0x0000      	NOP
0x0398	0x0000      	NOP
;soundrec.c,140 :: 		Mmc_Chip_Select = 1;
0x039A	0x848B      	BSF         LATC2_bit, BitPos(LATC2_bit+0) 
;soundrec.c,141 :: 		UWR("CS is HIGH!");
0x039C	0x0E86      	MOVLW       ?lstr3_soundrec
0x039E	0x6F5B      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x03A0	0x0E00      	MOVLW       hi_addr(?lstr3_soundrec)
0x03A2	0x6F5C      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x03A4	0xDF6E      	RCALL       _UART_Write_Text
0x03A6	0x0E0D      	MOVLW       13
0x03A8	0x6F65      	MOVWF       FARG_UART_Write__data, 1
0x03AA	0xDEB8      	RCALL       _UART_Write
0x03AC	0x0E0A      	MOVLW       10
0x03AE	0x0101      	MOVLB       1
0x03B0	0x6F65      	MOVWF       FARG_UART_Write__data, 1
0x03B2	0xDEB4      	RCALL       _UART_Write
;soundrec.c,142 :: 		for (u = 0; u < 10; u++)
0x03B4	0x0101      	MOVLB       1
0x03B6	0x6B51      	CLRF        mmcInit_u_L0, 1
L_mmcInit10:
0x03B8	0x0E0A      	MOVLW       10
0x03BA	0x5D51      	SUBWF       mmcInit_u_L0, 0, 1
0x03BC	0xE206      	BC          L_mmcInit11
;soundrec.c,144 :: 		spiWrite(0xff);
0x03BE	0x0EFF      	MOVLW       255
0x03C0	0x6F6C      	MOVWF       FARG_SPI1_Write_data_, 1
0x03C2	0xDE33      	RCALL       _SPI1_Write
;soundrec.c,142 :: 		for (u = 0; u < 10; u++)
0x03C4	0x0101      	MOVLB       1
0x03C6	0x2B51      	INCF        mmcInit_u_L0, 1, 1
;soundrec.c,145 :: 		}
0x03C8	0xD7F7      	BRA         L_mmcInit10
L_mmcInit11:
;soundrec.c,146 :: 		UWR("Dummy clock sent!");
0x03CA	0x0E92      	MOVLW       ?lstr4_soundrec
0x03CC	0x6F5B      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x03CE	0x0E00      	MOVLW       hi_addr(?lstr4_soundrec)
0x03D0	0x6F5C      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x03D2	0xDF57      	RCALL       _UART_Write_Text
0x03D4	0x0E0D      	MOVLW       13
0x03D6	0x6F65      	MOVWF       FARG_UART_Write__data, 1
0x03D8	0xDEA1      	RCALL       _UART_Write
0x03DA	0x0E0A      	MOVLW       10
0x03DC	0x0101      	MOVLB       1
0x03DE	0x6F65      	MOVWF       FARG_UART_Write__data, 1
0x03E0	0xDE9D      	RCALL       _UART_Write
;soundrec.c,147 :: 		Mmc_Chip_Select = 0;
0x03E2	0x948B      	BCF         LATC2_bit, BitPos(LATC2_bit+0) 
;soundrec.c,148 :: 		UWR("CS is LOW!\n");
0x03E4	0x0E6F      	MOVLW       ?lstr5_soundrec
0x03E6	0x0101      	MOVLB       1
0x03E8	0x6F5B      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x03EA	0x0E00      	MOVLW       hi_addr(?lstr5_soundrec)
0x03EC	0x6F5C      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x03EE	0xDF49      	RCALL       _UART_Write_Text
0x03F0	0x0E0D      	MOVLW       13
0x03F2	0x6F65      	MOVWF       FARG_UART_Write__data, 1
0x03F4	0xDE93      	RCALL       _UART_Write
0x03F6	0x0E0A      	MOVLW       10
0x03F8	0x0101      	MOVLB       1
0x03FA	0x6F65      	MOVWF       FARG_UART_Write__data, 1
0x03FC	0xDE8F      	RCALL       _UART_Write
;soundrec.c,149 :: 		Delay_ms(1);
0x03FE	0x0E07      	MOVLW       7
0x0400	0x6E0C      	MOVWF       R12, 0
0x0402	0x0E7D      	MOVLW       125
0x0404	0x6E0D      	MOVWF       R13, 0
L_mmcInit13:
0x0406	0x2E0D      	DECFSZ      R13, 1, 0
0x0408	0xD7FE      	BRA         L_mmcInit13
0x040A	0x2E0C      	DECFSZ      R12, 1, 0
0x040C	0xD7FC      	BRA         L_mmcInit13
;soundrec.c,150 :: 		command(0, 0, 0x95);
0x040E	0x0101      	MOVLB       1
0x0410	0x6B5B      	CLRF        FARG_command_command, 1
0x0412	0x6B5C      	CLRF        FARG_command_fourbyte_arg, 1
0x0414	0x6B5D      	CLRF        FARG_command_fourbyte_arg+1, 1
0x0416	0x6B5E      	CLRF        FARG_command_fourbyte_arg+2, 1
0x0418	0x6B5F      	CLRF        FARG_command_fourbyte_arg+3, 1
0x041A	0x0E95      	MOVLW       149
0x041C	0x6F60      	MOVWF       FARG_command_CRCbits, 1
0x041E	0xDF00      	RCALL       _command
;soundrec.c,151 :: 		UWR("CMD0 sent!");
0x0420	0x0E7B      	MOVLW       ?lstr6_soundrec
0x0422	0x0101      	MOVLB       1
0x0424	0x6F5B      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x0426	0x0E00      	MOVLW       hi_addr(?lstr6_soundrec)
0x0428	0x6F5C      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x042A	0xDF2B      	RCALL       _UART_Write_Text
0x042C	0x0E0D      	MOVLW       13
0x042E	0x6F65      	MOVWF       FARG_UART_Write__data, 1
0x0430	0xDE75      	RCALL       _UART_Write
0x0432	0x0E0A      	MOVLW       10
0x0434	0x0101      	MOVLB       1
0x0436	0x6F65      	MOVWF       FARG_UART_Write__data, 1
0x0438	0xDE71      	RCALL       _UART_Write
;soundrec.c,152 :: 		count = 0;
0x043A	0x0101      	MOVLB       1
0x043C	0x6B36      	CLRF        _count, 1
;soundrec.c,153 :: 		while ((spiReadData != 1) && (count < 10))
L_mmcInit14:
0x043E	0x5137      	MOVF        _spiReadData, 0, 1
0x0440	0x0A01      	XORLW       1
0x0442	0xE00F      	BZ          L_mmcInit15
0x0444	0x0E0A      	MOVLW       10
0x0446	0x5D36      	SUBWF       _count, 0, 1
0x0448	0xE20C      	BC          L_mmcInit15
L__mmcInit117:
;soundrec.c,155 :: 		spiReadData = spiRead();
0x044A	0x0EFF      	MOVLW       255
0x044C	0x6F65      	MOVWF       FARG_SPI1_Read_buffer, 1
0x044E	0xDE72      	RCALL       _SPI1_Read
0x0450	0xF137C000  	MOVFF       R0, _spiReadData
;soundrec.c,156 :: 		count++;
0x0454	0x0101      	MOVLB       1
0x0456	0x5136      	MOVF        _count, 0, 1
0x0458	0x0F01      	ADDLW       1
0x045A	0x6E00      	MOVWF       R0 
0x045C	0xF136C000  	MOVFF       R0, _count
;soundrec.c,157 :: 		}
0x0460	0xD7EE      	BRA         L_mmcInit14
L_mmcInit15:
;soundrec.c,158 :: 		if (count >= 10)
0x0462	0x0E0A      	MOVLW       10
0x0464	0x5D36      	SUBWF       _count, 0, 1
0x0466	0xE30D      	BNC         L_mmcInit18
;soundrec.c,160 :: 		UWR("CARD ERROR - CMD0");
0x0468	0x0EA4      	MOVLW       ?lstr7_soundrec
0x046A	0x6F5B      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x046C	0x0E00      	MOVLW       hi_addr(?lstr7_soundrec)
0x046E	0x6F5C      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x0470	0xDF08      	RCALL       _UART_Write_Text
0x0472	0x0E0D      	MOVLW       13
0x0474	0x6F65      	MOVWF       FARG_UART_Write__data, 1
0x0476	0xDE52      	RCALL       _UART_Write
0x0478	0x0E0A      	MOVLW       10
0x047A	0x0101      	MOVLB       1
0x047C	0x6F65      	MOVWF       FARG_UART_Write__data, 1
0x047E	0xDE4E      	RCALL       _UART_Write
;soundrec.c,161 :: 		while (1); // Trap the CPU
L_mmcInit19:
0x0480	0xD7FF      	BRA         L_mmcInit19
;soundrec.c,162 :: 		}
L_mmcInit18:
;soundrec.c,163 :: 		command(1, 0, 0xff);
0x0482	0x0E01      	MOVLW       1
0x0484	0x0101      	MOVLB       1
0x0486	0x6F5B      	MOVWF       FARG_command_command, 1
0x0488	0x6B5C      	CLRF        FARG_command_fourbyte_arg, 1
0x048A	0x6B5D      	CLRF        FARG_command_fourbyte_arg+1, 1
0x048C	0x6B5E      	CLRF        FARG_command_fourbyte_arg+2, 1
0x048E	0x6B5F      	CLRF        FARG_command_fourbyte_arg+3, 1
0x0490	0x0EFF      	MOVLW       255
0x0492	0x6F60      	MOVWF       FARG_command_CRCbits, 1
0x0494	0xDEC5      	RCALL       _command
;soundrec.c,164 :: 		count = 0;
0x0496	0x0101      	MOVLB       1
0x0498	0x6B36      	CLRF        _count, 1
;soundrec.c,165 :: 		while ((spiReadData != 0) && (count < 1000))
L_mmcInit21:
0x049A	0x5137      	MOVF        _spiReadData, 0, 1
0x049C	0x0A00      	XORLW       0
0x049E	0xE01F      	BZ          L_mmcInit22
0x04A0	0x0E80      	MOVLW       128
0x04A2	0x6E00      	MOVWF       R0 
0x04A4	0x0E80      	MOVLW       128
0x04A6	0x0A03      	XORLW       3
0x04A8	0x5C00      	SUBWF       R0, 0 
0x04AA	0xE102      	BNZ         L__mmcInit124
0x04AC	0x0EE8      	MOVLW       232
0x04AE	0x5D36      	SUBWF       _count, 0, 1
L__mmcInit124:
0x04B0	0xE216      	BC          L_mmcInit22
L__mmcInit116:
;soundrec.c,167 :: 		command(1, 0, 0xff);
0x04B2	0x0E01      	MOVLW       1
0x04B4	0x6F5B      	MOVWF       FARG_command_command, 1
0x04B6	0x6B5C      	CLRF        FARG_command_fourbyte_arg, 1
0x04B8	0x6B5D      	CLRF        FARG_command_fourbyte_arg+1, 1
0x04BA	0x6B5E      	CLRF        FARG_command_fourbyte_arg+2, 1
0x04BC	0x6B5F      	CLRF        FARG_command_fourbyte_arg+3, 1
0x04BE	0x0EFF      	MOVLW       255
0x04C0	0x6F60      	MOVWF       FARG_command_CRCbits, 1
0x04C2	0xDEAE      	RCALL       _command
;soundrec.c,168 :: 		spiReadData = spiRead();
0x04C4	0x0EFF      	MOVLW       255
0x04C6	0x0101      	MOVLB       1
0x04C8	0x6F65      	MOVWF       FARG_SPI1_Read_buffer, 1
0x04CA	0xDE34      	RCALL       _SPI1_Read
0x04CC	0xF137C000  	MOVFF       R0, _spiReadData
;soundrec.c,169 :: 		count++;
0x04D0	0x0101      	MOVLB       1
0x04D2	0x5136      	MOVF        _count, 0, 1
0x04D4	0x0F01      	ADDLW       1
0x04D6	0x6E00      	MOVWF       R0 
0x04D8	0xF136C000  	MOVFF       R0, _count
;soundrec.c,170 :: 		}
0x04DC	0xD7DE      	BRA         L_mmcInit21
L_mmcInit22:
;soundrec.c,171 :: 		if (count >= 1000)
0x04DE	0x0E80      	MOVLW       128
0x04E0	0x6E00      	MOVWF       R0 
0x04E2	0x0E80      	MOVLW       128
0x04E4	0x0A03      	XORLW       3
0x04E6	0x5C00      	SUBWF       R0, 0 
0x04E8	0xE102      	BNZ         L__mmcInit125
0x04EA	0x0EE8      	MOVLW       232
0x04EC	0x5D36      	SUBWF       _count, 0, 1
L__mmcInit125:
0x04EE	0xE30D      	BNC         L_mmcInit25
;soundrec.c,173 :: 		UWR("Card ERROR - CMD1");
0x04F0	0x0EB6      	MOVLW       ?lstr8_soundrec
0x04F2	0x6F5B      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x04F4	0x0E00      	MOVLW       hi_addr(?lstr8_soundrec)
0x04F6	0x6F5C      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x04F8	0xDEC4      	RCALL       _UART_Write_Text
0x04FA	0x0E0D      	MOVLW       13
0x04FC	0x6F65      	MOVWF       FARG_UART_Write__data, 1
0x04FE	0xDE0E      	RCALL       _UART_Write
0x0500	0x0E0A      	MOVLW       10
0x0502	0x0101      	MOVLB       1
0x0504	0x6F65      	MOVWF       FARG_UART_Write__data, 1
0x0506	0xDE0A      	RCALL       _UART_Write
;soundrec.c,174 :: 		while (1); // Trap the CPU
L_mmcInit26:
0x0508	0xD7FF      	BRA         L_mmcInit26
;soundrec.c,175 :: 		}
L_mmcInit25:
;soundrec.c,176 :: 		command(16, 512, 0xff);
0x050A	0x0E10      	MOVLW       16
0x050C	0x0101      	MOVLB       1
0x050E	0x6F5B      	MOVWF       FARG_command_command, 1
0x0510	0x0E00      	MOVLW       0
0x0512	0x6F5C      	MOVWF       FARG_command_fourbyte_arg, 1
0x0514	0x0E02      	MOVLW       2
0x0516	0x6F5D      	MOVWF       FARG_command_fourbyte_arg+1, 1
0x0518	0x0E00      	MOVLW       0
0x051A	0x6F5E      	MOVWF       FARG_command_fourbyte_arg+2, 1
0x051C	0x6F5F      	MOVWF       FARG_command_fourbyte_arg+3, 1
0x051E	0x0EFF      	MOVLW       255
0x0520	0x6F60      	MOVWF       FARG_command_CRCbits, 1
0x0522	0xDE7E      	RCALL       _command
;soundrec.c,177 :: 		count = 0;
0x0524	0x0101      	MOVLB       1
0x0526	0x6B36      	CLRF        _count, 1
;soundrec.c,178 :: 		while ((spiReadData != 0) && (count < 1000))
L_mmcInit28:
0x0528	0x5137      	MOVF        _spiReadData, 0, 1
0x052A	0x0A00      	XORLW       0
0x052C	0xE015      	BZ          L_mmcInit29
0x052E	0x0E80      	MOVLW       128
0x0530	0x6E00      	MOVWF       R0 
0x0532	0x0E80      	MOVLW       128
0x0534	0x0A03      	XORLW       3
0x0536	0x5C00      	SUBWF       R0, 0 
0x0538	0xE102      	BNZ         L__mmcInit126
0x053A	0x0EE8      	MOVLW       232
0x053C	0x5D36      	SUBWF       _count, 0, 1
L__mmcInit126:
0x053E	0xE20C      	BC          L_mmcInit29
L__mmcInit115:
;soundrec.c,180 :: 		spiReadData = spiRead();
0x0540	0x0EFF      	MOVLW       255
0x0542	0x6F65      	MOVWF       FARG_SPI1_Read_buffer, 1
0x0544	0xDDF7      	RCALL       _SPI1_Read
0x0546	0xF137C000  	MOVFF       R0, _spiReadData
;soundrec.c,181 :: 		count++;
0x054A	0x0101      	MOVLB       1
0x054C	0x5136      	MOVF        _count, 0, 1
0x054E	0x0F01      	ADDLW       1
0x0550	0x6E00      	MOVWF       R0 
0x0552	0xF136C000  	MOVFF       R0, _count
;soundrec.c,182 :: 		}
0x0556	0xD7E8      	BRA         L_mmcInit28
L_mmcInit29:
;soundrec.c,183 :: 		if (count >= 1000)
0x0558	0x0E80      	MOVLW       128
0x055A	0x6E00      	MOVWF       R0 
0x055C	0x0E80      	MOVLW       128
0x055E	0x0A03      	XORLW       3
0x0560	0x5C00      	SUBWF       R0, 0 
0x0562	0xE102      	BNZ         L__mmcInit127
0x0564	0x0EE8      	MOVLW       232
0x0566	0x5D36      	SUBWF       _count, 0, 1
L__mmcInit127:
0x0568	0xE30D      	BNC         L_mmcInit32
;soundrec.c,185 :: 		UWR("Card error - CMD16");
0x056A	0x0E24      	MOVLW       ?lstr9_soundrec
0x056C	0x6F5B      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x056E	0x0E00      	MOVLW       hi_addr(?lstr9_soundrec)
0x0570	0x6F5C      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x0572	0xDE87      	RCALL       _UART_Write_Text
0x0574	0x0E0D      	MOVLW       13
0x0576	0x6F65      	MOVWF       FARG_UART_Write__data, 1
0x0578	0xDDD1      	RCALL       _UART_Write
0x057A	0x0E0A      	MOVLW       10
0x057C	0x0101      	MOVLB       1
0x057E	0x6F65      	MOVWF       FARG_UART_Write__data, 1
0x0580	0xDDCD      	RCALL       _UART_Write
;soundrec.c,186 :: 		while (1); // Trap the CPU
L_mmcInit33:
0x0582	0xD7FF      	BRA         L_mmcInit33
;soundrec.c,187 :: 		}
L_mmcInit32:
;soundrec.c,188 :: 		UWR("MMC Detected!");
0x0584	0x0E37      	MOVLW       ?lstr10_soundrec
0x0586	0x0101      	MOVLB       1
0x0588	0x6F5B      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x058A	0x0E00      	MOVLW       hi_addr(?lstr10_soundrec)
0x058C	0x6F5C      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x058E	0xDE79      	RCALL       _UART_Write_Text
0x0590	0x0E0D      	MOVLW       13
0x0592	0x6F65      	MOVWF       FARG_UART_Write__data, 1
0x0594	0xDDC3      	RCALL       _UART_Write
0x0596	0x0E0A      	MOVLW       10
0x0598	0x0101      	MOVLB       1
0x059A	0x6F65      	MOVWF       FARG_UART_Write__data, 1
0x059C	0xDDBF      	RCALL       _UART_Write
;soundrec.c,191 :: 		_SPI_CLK_IDLE_LOW, _SPI_LOW_2_HIGH);
0x059E	0x0E01      	MOVLW       1
0x05A0	0x0101      	MOVLB       1
0x05A2	0x6F5B      	MOVWF       FARG_SPI1_Init_Advanced_master, 1
0x05A4	0x6B5C      	CLRF        FARG_SPI1_Init_Advanced_data_sample, 1
0x05A6	0x6B5D      	CLRF        FARG_SPI1_Init_Advanced_clock_idle, 1
0x05A8	0x0E01      	MOVLW       1
0x05AA	0x6F5E      	MOVWF       FARG_SPI1_Init_Advanced_transmit_edge, 1
0x05AC	0xDE84      	RCALL       _SPI1_Init_Advanced
;soundrec.c,192 :: 		Delay_ms(20);
0x05AE	0x0E82      	MOVLW       130
0x05B0	0x6E0C      	MOVWF       R12, 0
0x05B2	0x0EDD      	MOVLW       221
0x05B4	0x6E0D      	MOVWF       R13, 0
L_mmcInit35:
0x05B6	0x2E0D      	DECFSZ      R13, 1, 0
0x05B8	0xD7FE      	BRA         L_mmcInit35
0x05BA	0x2E0C      	DECFSZ      R12, 1, 0
0x05BC	0xD7FC      	BRA         L_mmcInit35
0x05BE	0x0000      	NOP
0x05C0	0x0000      	NOP
;soundrec.c,194 :: 		}
L_end_mmcInit:
0x05C2	0x0012      	RETURN      0
; end of _mmcInit
_writeMultipleBlock:
;soundrec.c,292 :: 		writeMultipleBlock(void)
;soundrec.c,295 :: 		volatile uint8_t temp = 0;
0x05C4	0x0101      	MOVLB       1
0x05C6	0x6B5A      	CLRF        writeMultipleBlock_temp_L0, 1
;soundrec.c,298 :: 		spiWrite(0xff);
0x05C8	0x0EFF      	MOVLW       255
0x05CA	0x6F6C      	MOVWF       FARG_SPI1_Write_data_, 1
0x05CC	0xDD2E      	RCALL       _SPI1_Write
;soundrec.c,299 :: 		spiReadData = spiRead();
0x05CE	0x0EFF      	MOVLW       255
0x05D0	0x0101      	MOVLB       1
0x05D2	0x6F65      	MOVWF       FARG_SPI1_Read_buffer, 1
0x05D4	0xDDAF      	RCALL       _SPI1_Read
0x05D6	0xF137C000  	MOVFF       R0, _spiReadData
;soundrec.c,300 :: 		while (spiReadData != 0xff);
L_writeMultipleBlock59:
0x05DA	0x0101      	MOVLB       1
0x05DC	0x5137      	MOVF        _spiReadData, 0, 1
0x05DE	0x0AFF      	XORLW       255
0x05E0	0xE001      	BZ          L_writeMultipleBlock60
0x05E2	0xD7FB      	BRA         L_writeMultipleBlock59
L_writeMultipleBlock60:
;soundrec.c,302 :: 		spiReadData = spiRead();
0x05E4	0x0EFF      	MOVLW       255
0x05E6	0x6F65      	MOVWF       FARG_SPI1_Read_buffer, 1
0x05E8	0xDDA5      	RCALL       _SPI1_Read
0x05EA	0xF137C000  	MOVFF       R0, _spiReadData
;soundrec.c,304 :: 		UWR("Card ready!")
0x05EE	0x0E08      	MOVLW       ?lstr21_soundrec
0x05F0	0x0101      	MOVLB       1
0x05F2	0x6F5B      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x05F4	0x0E01      	MOVLW       hi_addr(?lstr21_soundrec)
0x05F6	0x6F5C      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x05F8	0xDE44      	RCALL       _UART_Write_Text
0x05FA	0x0E0D      	MOVLW       13
0x05FC	0x6F65      	MOVWF       FARG_UART_Write__data, 1
0x05FE	0xDD8E      	RCALL       _UART_Write
0x0600	0x0E0A      	MOVLW       10
0x0602	0x0101      	MOVLB       1
0x0604	0x6F65      	MOVWF       FARG_UART_Write__data, 1
0x0606	0xDD8A      	RCALL       _UART_Write
;soundrec.c,306 :: 		command(25, arg, 0x95);
0x0608	0x0E19      	MOVLW       25
0x060A	0x0101      	MOVLB       1
0x060C	0x6F5B      	MOVWF       FARG_command_command, 1
0x060E	0xF15CC020  	MOVFF       _arg, FARG_command_fourbyte_arg
0x0612	0xF15DC021  	MOVFF       _arg+1, FARG_command_fourbyte_arg+1
0x0616	0xF15EC022  	MOVFF       _arg+2, FARG_command_fourbyte_arg+2
0x061A	0xF15FC023  	MOVFF       _arg+3, FARG_command_fourbyte_arg+3
0x061E	0x0E95      	MOVLW       149
0x0620	0x6F60      	MOVWF       FARG_command_CRCbits, 1
0x0622	0xDDFE      	RCALL       _command
;soundrec.c,308 :: 		count = 0;
0x0624	0x0101      	MOVLB       1
0x0626	0x6B36      	CLRF        _count, 1
;soundrec.c,309 :: 		while(count < 8)
L_writeMultipleBlock61:
0x0628	0x0E08      	MOVLW       8
0x062A	0x5D36      	SUBWF       _count, 0, 1
0x062C	0xE210      	BC          L_writeMultipleBlock62
;soundrec.c,311 :: 		if (spiReadData == 0)
0x062E	0x5137      	MOVF        _spiReadData, 0, 1
0x0630	0x0A00      	XORLW       0
0x0632	0xE101      	BNZ         L_writeMultipleBlock63
;soundrec.c,313 :: 		break;
0x0634	0xD00C      	BRA         L_writeMultipleBlock62
;soundrec.c,314 :: 		}
L_writeMultipleBlock63:
;soundrec.c,315 :: 		spiReadData = spiRead();
0x0636	0x0EFF      	MOVLW       255
0x0638	0x6F65      	MOVWF       FARG_SPI1_Read_buffer, 1
0x063A	0xDD7C      	RCALL       _SPI1_Read
0x063C	0xF137C000  	MOVFF       R0, _spiReadData
;soundrec.c,316 :: 		count++;
0x0640	0x0101      	MOVLB       1
0x0642	0x5136      	MOVF        _count, 0, 1
0x0644	0x0F01      	ADDLW       1
0x0646	0x6E00      	MOVWF       R0 
0x0648	0xF136C000  	MOVFF       R0, _count
;soundrec.c,317 :: 		}
0x064C	0xD7ED      	BRA         L_writeMultipleBlock61
L_writeMultipleBlock62:
;soundrec.c,318 :: 		if (count >= 8)
0x064E	0x0E08      	MOVLW       8
0x0650	0x5D36      	SUBWF       _count, 0, 1
0x0652	0xE30C      	BNC         L_writeMultipleBlock64
;soundrec.c,320 :: 		UWR("Command rejected!");
0x0654	0x0E14      	MOVLW       ?lstr22_soundrec
0x0656	0x6F5B      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x0658	0x0E01      	MOVLW       hi_addr(?lstr22_soundrec)
0x065A	0x6F5C      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x065C	0xDE12      	RCALL       _UART_Write_Text
0x065E	0x0E0D      	MOVLW       13
0x0660	0x6F65      	MOVWF       FARG_UART_Write__data, 1
0x0662	0xDD5C      	RCALL       _UART_Write
0x0664	0x0E0A      	MOVLW       10
0x0666	0x0101      	MOVLB       1
0x0668	0x6F65      	MOVWF       FARG_UART_Write__data, 1
0x066A	0xDD58      	RCALL       _UART_Write
;soundrec.c,321 :: 		}
L_writeMultipleBlock64:
;soundrec.c,322 :: 		UWR("Command accepted!");
0x066C	0x0ED6      	MOVLW       ?lstr23_soundrec
0x066E	0x0101      	MOVLB       1
0x0670	0x6F5B      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x0672	0x0E00      	MOVLW       hi_addr(?lstr23_soundrec)
0x0674	0x6F5C      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x0676	0xDE05      	RCALL       _UART_Write_Text
0x0678	0x0E0D      	MOVLW       13
0x067A	0x6F65      	MOVWF       FARG_UART_Write__data, 1
0x067C	0xDD4F      	RCALL       _UART_Write
0x067E	0x0E0A      	MOVLW       10
0x0680	0x0101      	MOVLB       1
0x0682	0x6F65      	MOVWF       FARG_UART_Write__data, 1
0x0684	0xDD4B      	RCALL       _UART_Write
;soundrec.c,323 :: 		spiWrite(0xff);
0x0686	0x0EFF      	MOVLW       255
0x0688	0x0101      	MOVLB       1
0x068A	0x6F6C      	MOVWF       FARG_SPI1_Write_data_, 1
0x068C	0xDCCE      	RCALL       _SPI1_Write
;soundrec.c,324 :: 		spiWrite(0xff);
0x068E	0x0EFF      	MOVLW       255
0x0690	0x0101      	MOVLB       1
0x0692	0x6F6C      	MOVWF       FARG_SPI1_Write_data_, 1
0x0694	0xDCCA      	RCALL       _SPI1_Write
;soundrec.c,325 :: 		spiWrite(0xff); // Dummy clock
0x0696	0x0EFF      	MOVLW       255
0x0698	0x0101      	MOVLB       1
0x069A	0x6F6C      	MOVWF       FARG_SPI1_Write_data_, 1
0x069C	0xDCC6      	RCALL       _SPI1_Write
;soundrec.c,326 :: 		while (temp < 5) // repeat until Select button pressed
0x069E	0x0E05      	MOVLW       5
0x06A0	0x0101      	MOVLB       1
0x06A2	0x5D5A      	SUBWF       writeMultipleBlock_temp_L0, 0, 1
0x06A4	0xE233      	BC          L_writeMultipleBlock66
;soundrec.c,328 :: 		spiWrite(0b11111100); // Data token for CMD 25
0x06A6	0x0EFC      	MOVLW       252
0x06A8	0x6F6C      	MOVWF       FARG_SPI1_Write_data_, 1
0x06AA	0xDCBF      	RCALL       _SPI1_Write
;soundrec.c,355 :: 		g = 0;
0x06AC	0x0101      	MOVLB       1
0x06AE	0x6B51      	CLRF        writeMultipleBlock_g_L0, 1
0x06B0	0x6B52      	CLRF        writeMultipleBlock_g_L0+1, 1
;soundrec.c,356 :: 		while ((spiReadData & 0b00011111) != 0x05)
L_writeMultipleBlock67:
0x06B2	0x0E1F      	MOVLW       31
0x06B4	0x1537      	ANDWF       _spiReadData, 0, 1
0x06B6	0x6E01      	MOVWF       R1 
0x06B8	0x5001      	MOVF        R1, 0 
0x06BA	0x0A05      	XORLW       5
0x06BC	0xE011      	BZ          L_writeMultipleBlock68
;soundrec.c,358 :: 		spiReadData = spiRead();
0x06BE	0x0EFF      	MOVLW       255
0x06C0	0x6F65      	MOVWF       FARG_SPI1_Read_buffer, 1
0x06C2	0xDD38      	RCALL       _SPI1_Read
0x06C4	0xF137C000  	MOVFF       R0, _spiReadData
;soundrec.c,359 :: 		g++;
0x06C8	0x0E01      	MOVLW       1
0x06CA	0x0101      	MOVLB       1
0x06CC	0x2551      	ADDWF       writeMultipleBlock_g_L0, 0, 1
0x06CE	0x6E00      	MOVWF       R0 
0x06D0	0x0E00      	MOVLW       0
0x06D2	0x2152      	ADDWFC      writeMultipleBlock_g_L0+1, 0, 1
0x06D4	0x6E01      	MOVWF       R1 
0x06D6	0xF151C000  	MOVFF       R0, writeMultipleBlock_g_L0
0x06DA	0xF152C001  	MOVFF       R1, writeMultipleBlock_g_L0+1
;soundrec.c,360 :: 		}
0x06DE	0xD7E9      	BRA         L_writeMultipleBlock67
L_writeMultipleBlock68:
;soundrec.c,361 :: 		IntToStr(g, text);
0x06E0	0xF15BC151  	MOVFF       writeMultipleBlock_g_L0, FARG_IntToStr_input
0x06E4	0xF15CC152  	MOVFF       writeMultipleBlock_g_L0+1, FARG_IntToStr_input+1
0x06E8	0x0E53      	MOVLW       writeMultipleBlock_text_L0
0x06EA	0x6F5D      	MOVWF       FARG_IntToStr_output, 1
0x06EC	0x0E01      	MOVLW       hi_addr(writeMultipleBlock_text_L0)
0x06EE	0x6F5E      	MOVWF       FARG_IntToStr_output+1, 1
0x06F0	0xDD2A      	RCALL       _IntToStr
;soundrec.c,362 :: 		UWR(text);
0x06F2	0x0E53      	MOVLW       writeMultipleBlock_text_L0
0x06F4	0x6F5B      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x06F6	0x0E01      	MOVLW       hi_addr(writeMultipleBlock_text_L0)
0x06F8	0x6F5C      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x06FA	0xDDC3      	RCALL       _UART_Write_Text
0x06FC	0x0E0D      	MOVLW       13
0x06FE	0x6F65      	MOVWF       FARG_UART_Write__data, 1
0x0700	0xDD0D      	RCALL       _UART_Write
0x0702	0x0E0A      	MOVLW       10
0x0704	0x0101      	MOVLB       1
0x0706	0x6F65      	MOVWF       FARG_UART_Write__data, 1
0x0708	0xDD09      	RCALL       _UART_Write
;soundrec.c,363 :: 		while (1); // Trap the CPU
L_writeMultipleBlock69:
0x070A	0xD7FF      	BRA         L_writeMultipleBlock69
;soundrec.c,370 :: 		}
L_writeMultipleBlock66:
;soundrec.c,373 :: 		spiWrite(0b11111101);
0x070C	0x0EFD      	MOVLW       253
0x070E	0x0101      	MOVLB       1
0x0710	0x6F6C      	MOVWF       FARG_SPI1_Write_data_, 1
0x0712	0xDC8B      	RCALL       _SPI1_Write
;soundrec.c,374 :: 		spiWrite(0xff);
0x0714	0x0EFF      	MOVLW       255
0x0716	0x0101      	MOVLB       1
0x0718	0x6F6C      	MOVWF       FARG_SPI1_Write_data_, 1
0x071A	0xDC87      	RCALL       _SPI1_Write
;soundrec.c,375 :: 		spiReadData = spiRead();
0x071C	0x0EFF      	MOVLW       255
0x071E	0x0101      	MOVLB       1
0x0720	0x6F65      	MOVWF       FARG_SPI1_Read_buffer, 1
0x0722	0xDD08      	RCALL       _SPI1_Read
0x0724	0xF137C000  	MOVFF       R0, _spiReadData
;soundrec.c,376 :: 		while (spiReadData != 0xff) // check if the card is busy
L_writeMultipleBlock73:
0x0728	0x0101      	MOVLB       1
0x072A	0x5137      	MOVF        _spiReadData, 0, 1
0x072C	0x0AFF      	XORLW       255
0x072E	0xE006      	BZ          L_writeMultipleBlock74
;soundrec.c,378 :: 		spiReadData = spiRead();
0x0730	0x0EFF      	MOVLW       255
0x0732	0x6F65      	MOVWF       FARG_SPI1_Read_buffer, 1
0x0734	0xDCFF      	RCALL       _SPI1_Read
0x0736	0xF137C000  	MOVFF       R0, _spiReadData
;soundrec.c,379 :: 		}
0x073A	0xD7F6      	BRA         L_writeMultipleBlock73
L_writeMultipleBlock74:
;soundrec.c,380 :: 		UWR("DONE Writing!")
0x073C	0x0EE8      	MOVLW       ?lstr24_soundrec
0x073E	0x0101      	MOVLB       1
0x0740	0x6F5B      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x0742	0x0E00      	MOVLW       hi_addr(?lstr24_soundrec)
0x0744	0x6F5C      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x0746	0xDD9D      	RCALL       _UART_Write_Text
0x0748	0x0E0D      	MOVLW       13
0x074A	0x6F65      	MOVWF       FARG_UART_Write__data, 1
0x074C	0xDCE7      	RCALL       _UART_Write
0x074E	0x0E0A      	MOVLW       10
0x0750	0x0101      	MOVLB       1
0x0752	0x6F65      	MOVWF       FARG_UART_Write__data, 1
0x0754	0xDCE3      	RCALL       _UART_Write
;soundrec.c,381 :: 		}
L_end_writeMultipleBlock:
0x0756	0x0012      	RETURN      0
; end of _writeMultipleBlock
_readSingleBlock:
;soundrec.c,250 :: 		readSingleBlock(void)
;soundrec.c,254 :: 		spiWrite(0xff);
0x0758	0x0EFF      	MOVLW       255
0x075A	0x0101      	MOVLB       1
0x075C	0x6F6C      	MOVWF       FARG_SPI1_Write_data_, 1
0x075E	0xDC65      	RCALL       _SPI1_Write
;soundrec.c,255 :: 		spiReadData = spiRead();
0x0760	0x0EFF      	MOVLW       255
0x0762	0x0101      	MOVLB       1
0x0764	0x6F65      	MOVWF       FARG_SPI1_Read_buffer, 1
0x0766	0xDCE6      	RCALL       _SPI1_Read
0x0768	0xF137C000  	MOVFF       R0, _spiReadData
;soundrec.c,256 :: 		while (spiReadData != 0xff)
L_readSingleBlock49:
0x076C	0x0101      	MOVLB       1
0x076E	0x5137      	MOVF        _spiReadData, 0, 1
0x0770	0x0AFF      	XORLW       255
0x0772	0xE013      	BZ          L_readSingleBlock50
;soundrec.c,258 :: 		spiReadData = spiRead();
0x0774	0x0EFF      	MOVLW       255
0x0776	0x6F65      	MOVWF       FARG_SPI1_Read_buffer, 1
0x0778	0xDCDD      	RCALL       _SPI1_Read
0x077A	0xF137C000  	MOVFF       R0, _spiReadData
;soundrec.c,259 :: 		UWR("Card busy!");
0x077E	0x0E15      	MOVLW       ?lstr16_soundrec
0x0780	0x0101      	MOVLB       1
0x0782	0x6F5B      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x0784	0x0E00      	MOVLW       hi_addr(?lstr16_soundrec)
0x0786	0x6F5C      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x0788	0xDD7C      	RCALL       _UART_Write_Text
0x078A	0x0E0D      	MOVLW       13
0x078C	0x6F65      	MOVWF       FARG_UART_Write__data, 1
0x078E	0xDCC6      	RCALL       _UART_Write
0x0790	0x0E0A      	MOVLW       10
0x0792	0x0101      	MOVLB       1
0x0794	0x6F65      	MOVWF       FARG_UART_Write__data, 1
0x0796	0xDCC2      	RCALL       _UART_Write
;soundrec.c,260 :: 		}
0x0798	0xD7E9      	BRA         L_readSingleBlock49
L_readSingleBlock50:
;soundrec.c,262 :: 		command(17, arg, 0x95); // read 512 bytes from byte address 0
0x079A	0x0E11      	MOVLW       17
0x079C	0x0101      	MOVLB       1
0x079E	0x6F5B      	MOVWF       FARG_command_command, 1
0x07A0	0xF15CC020  	MOVFF       _arg, FARG_command_fourbyte_arg
0x07A4	0xF15DC021  	MOVFF       _arg+1, FARG_command_fourbyte_arg+1
0x07A8	0xF15EC022  	MOVFF       _arg+2, FARG_command_fourbyte_arg+2
0x07AC	0xF15FC023  	MOVFF       _arg+3, FARG_command_fourbyte_arg+3
0x07B0	0x0E95      	MOVLW       149
0x07B2	0x6F60      	MOVWF       FARG_command_CRCbits, 1
0x07B4	0xDD35      	RCALL       _command
;soundrec.c,264 :: 		while (spiReadData != 0)
L_readSingleBlock51:
0x07B6	0x0101      	MOVLB       1
0x07B8	0x5137      	MOVF        _spiReadData, 0, 1
0x07BA	0x0A00      	XORLW       0
0x07BC	0xE013      	BZ          L_readSingleBlock52
;soundrec.c,266 :: 		spiReadData = spiRead();
0x07BE	0x0EFF      	MOVLW       255
0x07C0	0x6F65      	MOVWF       FARG_SPI1_Read_buffer, 1
0x07C2	0xDCB8      	RCALL       _SPI1_Read
0x07C4	0xF137C000  	MOVFF       R0, _spiReadData
;soundrec.c,267 :: 		UWR("Busy!");
0x07C8	0x0E5B      	MOVLW       ?lstr17_soundrec
0x07CA	0x0101      	MOVLB       1
0x07CC	0x6F5B      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x07CE	0x0E00      	MOVLW       hi_addr(?lstr17_soundrec)
0x07D0	0x6F5C      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x07D2	0xDD57      	RCALL       _UART_Write_Text
0x07D4	0x0E0D      	MOVLW       13
0x07D6	0x6F65      	MOVWF       FARG_UART_Write__data, 1
0x07D8	0xDCA1      	RCALL       _UART_Write
0x07DA	0x0E0A      	MOVLW       10
0x07DC	0x0101      	MOVLB       1
0x07DE	0x6F65      	MOVWF       FARG_UART_Write__data, 1
0x07E0	0xDC9D      	RCALL       _UART_Write
;soundrec.c,268 :: 		}
0x07E2	0xD7E9      	BRA         L_readSingleBlock51
L_readSingleBlock52:
;soundrec.c,269 :: 		UWR("CMD accepted!");
0x07E4	0x0E61      	MOVLW       ?lstr18_soundrec
0x07E6	0x0101      	MOVLB       1
0x07E8	0x6F5B      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x07EA	0x0E00      	MOVLW       hi_addr(?lstr18_soundrec)
0x07EC	0x6F5C      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x07EE	0xDD49      	RCALL       _UART_Write_Text
0x07F0	0x0E0D      	MOVLW       13
0x07F2	0x6F65      	MOVWF       FARG_UART_Write__data, 1
0x07F4	0xDC93      	RCALL       _UART_Write
0x07F6	0x0E0A      	MOVLW       10
0x07F8	0x0101      	MOVLB       1
0x07FA	0x6F65      	MOVWF       FARG_UART_Write__data, 1
0x07FC	0xDC8F      	RCALL       _UART_Write
;soundrec.c,271 :: 		while (spiReadData != 0xfe)
L_readSingleBlock53:
0x07FE	0x0101      	MOVLB       1
0x0800	0x5137      	MOVF        _spiReadData, 0, 1
0x0802	0x0AFE      	XORLW       254
0x0804	0xE006      	BZ          L_readSingleBlock54
;soundrec.c,273 :: 		spiReadData = spiRead();
0x0806	0x0EFF      	MOVLW       255
0x0808	0x6F65      	MOVWF       FARG_SPI1_Read_buffer, 1
0x080A	0xDC94      	RCALL       _SPI1_Read
0x080C	0xF137C000  	MOVFF       R0, _spiReadData
;soundrec.c,274 :: 		}
0x0810	0xD7F6      	BRA         L_readSingleBlock53
L_readSingleBlock54:
;soundrec.c,275 :: 		UWR("Token received!");
0x0812	0x0E45      	MOVLW       ?lstr19_soundrec
0x0814	0x0101      	MOVLB       1
0x0816	0x6F5B      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x0818	0x0E00      	MOVLW       hi_addr(?lstr19_soundrec)
0x081A	0x6F5C      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x081C	0xDD32      	RCALL       _UART_Write_Text
0x081E	0x0E0D      	MOVLW       13
0x0820	0x6F65      	MOVWF       FARG_UART_Write__data, 1
0x0822	0xDC7C      	RCALL       _UART_Write
0x0824	0x0E0A      	MOVLW       10
0x0826	0x0101      	MOVLB       1
0x0828	0x6F65      	MOVWF       FARG_UART_Write__data, 1
0x082A	0xDC78      	RCALL       _UART_Write
;soundrec.c,277 :: 		for (numOfBytes = 0; numOfBytes < 512; numOfBytes++)
0x082C	0x0101      	MOVLB       1
0x082E	0x6B51      	CLRF        readSingleBlock_numOfBytes_L0, 1
0x0830	0x6B52      	CLRF        readSingleBlock_numOfBytes_L0+1, 1
L_readSingleBlock55:
0x0832	0x0E02      	MOVLW       2
0x0834	0x5D52      	SUBWF       readSingleBlock_numOfBytes_L0+1, 0, 1
0x0836	0xE102      	BNZ         L__readSingleBlock131
0x0838	0x0E00      	MOVLW       0
0x083A	0x5D51      	SUBWF       readSingleBlock_numOfBytes_L0, 0, 1
L__readSingleBlock131:
0x083C	0xE233      	BC          L_readSingleBlock56
;soundrec.c,279 :: 		spiReadData = spiRead();
0x083E	0x0EFF      	MOVLW       255
0x0840	0x6F65      	MOVWF       FARG_SPI1_Read_buffer, 1
0x0842	0xDC78      	RCALL       _SPI1_Read
0x0844	0xF137C000  	MOVFF       R0, _spiReadData
;soundrec.c,280 :: 		IntToStr(spiReadData, strData);
0x0848	0xF15BC137  	MOVFF       _spiReadData, FARG_IntToStr_input
0x084C	0x0E00      	MOVLW       0
0x084E	0x0101      	MOVLB       1
0x0850	0x6F5C      	MOVWF       FARG_IntToStr_input+1, 1
0x0852	0x0E53      	MOVLW       readSingleBlock_strData_L0
0x0854	0x6F5D      	MOVWF       FARG_IntToStr_output, 1
0x0856	0x0E01      	MOVLW       hi_addr(readSingleBlock_strData_L0)
0x0858	0x6F5E      	MOVWF       FARG_IntToStr_output+1, 1
0x085A	0xDC75      	RCALL       _IntToStr
;soundrec.c,281 :: 		UWR(strData);
0x085C	0x0E53      	MOVLW       readSingleBlock_strData_L0
0x085E	0x6F5B      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x0860	0x0E01      	MOVLW       hi_addr(readSingleBlock_strData_L0)
0x0862	0x6F5C      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x0864	0xDD0E      	RCALL       _UART_Write_Text
0x0866	0x0E0D      	MOVLW       13
0x0868	0x6F65      	MOVWF       FARG_UART_Write__data, 1
0x086A	0xDC58      	RCALL       _UART_Write
0x086C	0x0E0A      	MOVLW       10
0x086E	0x0101      	MOVLB       1
0x0870	0x6F65      	MOVWF       FARG_UART_Write__data, 1
0x0872	0xDC54      	RCALL       _UART_Write
;soundrec.c,282 :: 		DACOUT = spiReadData;
0x0874	0xFF8AC137  	MOVFF       _spiReadData, LATB
;soundrec.c,283 :: 		Delay_ms(2);
0x0878	0x0E0D      	MOVLW       13
0x087A	0x6E0C      	MOVWF       R12, 0
0x087C	0x0EFB      	MOVLW       251
0x087E	0x6E0D      	MOVWF       R13, 0
L_readSingleBlock58:
0x0880	0x2E0D      	DECFSZ      R13, 1, 0
0x0882	0xD7FE      	BRA         L_readSingleBlock58
0x0884	0x2E0C      	DECFSZ      R12, 1, 0
0x0886	0xD7FC      	BRA         L_readSingleBlock58
0x0888	0x0000      	NOP
0x088A	0x0000      	NOP
;soundrec.c,277 :: 		for (numOfBytes = 0; numOfBytes < 512; numOfBytes++)
0x088C	0x0E01      	MOVLW       1
0x088E	0x0101      	MOVLB       1
0x0890	0x2551      	ADDWF       readSingleBlock_numOfBytes_L0, 0, 1
0x0892	0x6E00      	MOVWF       R0 
0x0894	0x0E00      	MOVLW       0
0x0896	0x2152      	ADDWFC      readSingleBlock_numOfBytes_L0+1, 0, 1
0x0898	0x6E01      	MOVWF       R1 
0x089A	0xF151C000  	MOVFF       R0, readSingleBlock_numOfBytes_L0
0x089E	0xF152C001  	MOVFF       R1, readSingleBlock_numOfBytes_L0+1
;soundrec.c,284 :: 		}
0x08A2	0xD7C7      	BRA         L_readSingleBlock55
L_readSingleBlock56:
;soundrec.c,286 :: 		spiReadData = spiRead();
0x08A4	0x0EFF      	MOVLW       255
0x08A6	0x6F65      	MOVWF       FARG_SPI1_Read_buffer, 1
0x08A8	0xDC45      	RCALL       _SPI1_Read
0x08AA	0xF137C000  	MOVFF       R0, _spiReadData
;soundrec.c,287 :: 		spiReadData = spiRead();
0x08AE	0x0EFF      	MOVLW       255
0x08B0	0x0101      	MOVLB       1
0x08B2	0x6F65      	MOVWF       FARG_SPI1_Read_buffer, 1
0x08B4	0xDC3F      	RCALL       _SPI1_Read
0x08B6	0xF137C000  	MOVFF       R0, _spiReadData
;soundrec.c,288 :: 		UWR("DONE!");
0x08BA	0x0E55      	MOVLW       ?lstr20_soundrec
0x08BC	0x0101      	MOVLB       1
0x08BE	0x6F5B      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x08C0	0x0E00      	MOVLW       hi_addr(?lstr20_soundrec)
0x08C2	0x6F5C      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x08C4	0xDCDE      	RCALL       _UART_Write_Text
0x08C6	0x0E0D      	MOVLW       13
0x08C8	0x6F65      	MOVWF       FARG_UART_Write__data, 1
0x08CA	0xDC28      	RCALL       _UART_Write
0x08CC	0x0E0A      	MOVLW       10
0x08CE	0x0101      	MOVLB       1
0x08D0	0x6F65      	MOVWF       FARG_UART_Write__data, 1
0x08D2	0xDC24      	RCALL       _UART_Write
;soundrec.c,289 :: 		}
L_end_readSingleBlock:
0x08D4	0x0012      	RETURN      0
; end of _readSingleBlock
_main:
0x08D6	0xF005ECE5  	CALL        3018, 0
;soundrec.c,456 :: 		void main()
;soundrec.c,463 :: 		ADCON1 |= 0x0e; // AIN0 as analog input
0x08DA	0x0E0E      	MOVLW       14
0x08DC	0x12C1      	IORWF       ADCON1, 1 
;soundrec.c,464 :: 		ADCON2 |= 0x2d; // 12 Tad and FOSC/16
0x08DE	0x0E2D      	MOVLW       45
0x08E0	0x12C0      	IORWF       ADCON2, 1 
;soundrec.c,465 :: 		ADFM_bit = 0; // Left justified
0x08E2	0x9EC0      	BCF         ADFM_bit, BitPos(ADFM_bit+0) 
;soundrec.c,466 :: 		ADON_bit = 1; // Enable ADC module
0x08E4	0x80C2      	BSF         ADON_bit, BitPos(ADON_bit+0) 
;soundrec.c,467 :: 		Delay_ms(100);
0x08E6	0x0E03      	MOVLW       3
0x08E8	0x6E0B      	MOVWF       R11, 0
0x08EA	0x0E8A      	MOVLW       138
0x08EC	0x6E0C      	MOVWF       R12, 0
0x08EE	0x0E55      	MOVLW       85
0x08F0	0x6E0D      	MOVWF       R13, 0
L_main95:
0x08F2	0x2E0D      	DECFSZ      R13, 1, 0
0x08F4	0xD7FE      	BRA         L_main95
0x08F6	0x2E0C      	DECFSZ      R12, 1, 0
0x08F8	0xD7FC      	BRA         L_main95
0x08FA	0x2E0B      	DECFSZ      R11, 1, 0
0x08FC	0xD7FA      	BRA         L_main95
0x08FE	0x0000      	NOP
0x0900	0x0000      	NOP
;soundrec.c,470 :: 		TRISD=0xf3;
0x0902	0x0EF3      	MOVLW       243
0x0904	0x6E95      	MOVWF       TRISD 
;soundrec.c,471 :: 		TRISA2_bit=1;
0x0906	0x8492      	BSF         TRISA2_bit, BitPos(TRISA2_bit+0) 
;soundrec.c,472 :: 		TRISD2_bit=1;
0x0908	0x8495      	BSF         TRISD2_bit, BitPos(TRISD2_bit+0) 
;soundrec.c,473 :: 		TRISD3_bit=1;
0x090A	0x8695      	BSF         TRISD3_bit, BitPos(TRISD3_bit+0) 
;soundrec.c,474 :: 		TRISB=0;
0x090C	0x6A93      	CLRF        TRISB 
;soundrec.c,475 :: 		TRISC = 0x00;
0x090E	0x6A94      	CLRF        TRISC 
;soundrec.c,478 :: 		UART1_Init(9600);
0x0910	0x86B8      	BSF         BAUDCON, 3, 0
0x0912	0x0E02      	MOVLW       2
0x0914	0x6EB0      	MOVWF       SPBRGH 
0x0916	0x0E08      	MOVLW       8
0x0918	0x6EAF      	MOVWF       SPBRG 
0x091A	0x84AC      	BSF         TXSTA, 2, 0
0x091C	0xDCF8      	RCALL       _UART1_Init
;soundrec.c,479 :: 		mmcInit();
0x091E	0xDD2B      	RCALL       _mmcInit
;soundrec.c,481 :: 		for ( ; ; )        // Repeats forever
L_main96:
;soundrec.c,484 :: 		while (SLCT != 0)        // Wait until SELECT pressed
L_main99:
0x0920	0xA483      	BTFSS       RD2_bit, BitPos(RD2_bit+0) 
0x0922	0xD001      	BRA         L_main100
;soundrec.c,486 :: 		}
0x0924	0xD7FD      	BRA         L_main99
L_main100:
0x0926	0x0101      	MOVLB       1
;soundrec.c,491 :: 		UWR("Select a Menu");
0x0928	0x0EC8      	MOVLW       ?lstr30_soundrec
0x092A	0x6F5B      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x092C	0x0E00      	MOVLW       hi_addr(?lstr30_soundrec)
0x092E	0x6F5C      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x0930	0xDCA8      	RCALL       _UART_Write_Text
0x0932	0x0E0D      	MOVLW       13
0x0934	0x6F65      	MOVWF       FARG_UART_Write__data, 1
0x0936	0xF000EC8E  	CALL        _UART_Write, 0
0x093A	0x0E0A      	MOVLW       10
0x093C	0x0101      	MOVLB       1
0x093E	0x6F65      	MOVWF       FARG_UART_Write__data, 1
0x0940	0xF000EC8E  	CALL        _UART_Write, 0
;soundrec.c,492 :: 		while (OK)
L_main101:
0x0944	0xA683      	BTFSS       RD3_bit, BitPos(RD3_bit+0) 
0x0946	0xD075      	BRA         L_main102
;soundrec.c,494 :: 		if (!SLCT)
0x0948	0xB483      	BTFSC       RD2_bit, BitPos(RD2_bit+0) 
0x094A	0xD023      	BRA         L_main103
;soundrec.c,496 :: 		Delay_ms(300);
0x094C	0x0E08      	MOVLW       8
0x094E	0x6E0B      	MOVWF       R11, 0
0x0950	0x0E9D      	MOVLW       157
0x0952	0x6E0C      	MOVWF       R12, 0
0x0954	0x0E05      	MOVLW       5
0x0956	0x6E0D      	MOVWF       R13, 0
L_main104:
0x0958	0x2E0D      	DECFSZ      R13, 1, 0
0x095A	0xD7FE      	BRA         L_main104
0x095C	0x2E0C      	DECFSZ      R12, 1, 0
0x095E	0xD7FC      	BRA         L_main104
0x0960	0x2E0B      	DECFSZ      R11, 1, 0
0x0962	0xD7FA      	BRA         L_main104
0x0964	0x0000      	NOP
0x0966	0x0000      	NOP
;soundrec.c,497 :: 		mode++;
0x0968	0x0E01      	MOVLW       1
0x096A	0x0100      	MOVLB       0
0x096C	0x25FE      	ADDWF       _mode, 0, 1
0x096E	0x6E00      	MOVWF       R0 
0x0970	0x0E00      	MOVLW       0
0x0972	0x21FF      	ADDWFC      _mode+1, 0, 1
0x0974	0x6E01      	MOVWF       R1 
0x0976	0xF0FEC000  	MOVFF       R0, _mode
0x097A	0xF0FFC001  	MOVFF       R1, _mode+1
;soundrec.c,498 :: 		if (mode == 3)
0x097E	0x0E00      	MOVLW       0
0x0980	0x19FF      	XORWF       _mode+1, 0, 1
0x0982	0xE102      	BNZ         L__main142
0x0984	0x0E03      	MOVLW       3
0x0986	0x19FE      	XORWF       _mode, 0, 1
L__main142:
0x0988	0xE104      	BNZ         L_main105
;soundrec.c,500 :: 		mode = 1;
0x098A	0x0E01      	MOVLW       1
0x098C	0x6FFE      	MOVWF       _mode, 1
0x098E	0x0E00      	MOVLW       0
0x0990	0x6FFF      	MOVWF       _mode+1, 1
;soundrec.c,501 :: 		}
L_main105:
;soundrec.c,502 :: 		}
L_main103:
0x0992	0x0100      	MOVLB       0
;soundrec.c,504 :: 		if ((mode == 1) & (lastMode != mode))
0x0994	0x0E00      	MOVLW       0
0x0996	0x19FF      	XORWF       _mode+1, 0, 1
0x0998	0xE102      	BNZ         L__main143
0x099A	0x0E01      	MOVLW       1
0x099C	0x19FE      	XORWF       _mode, 0, 1
L__main143:
0x099E	0x0E01      	MOVLW       1
0x09A0	0xA4D8      	BTFSS       STATUS, 2 
0x09A2	0x0E00      	MOVLW       0
0x09A4	0x6E01      	MOVWF       R1 
0x09A6	0x0E00      	MOVLW       0
0x09A8	0x19FF      	XORWF       _mode+1, 0, 1
0x09AA	0xE103      	BNZ         L__main144
0x09AC	0x51FE      	MOVF        _mode, 0, 1
0x09AE	0x0101      	MOVLB       1
0x09B0	0x1950      	XORWF       main_lastMode_L0, 0, 1
L__main144:
0x09B2	0x0E00      	MOVLW       0
0x09B4	0xA4D8      	BTFSS       STATUS, 2 
0x09B6	0x0E01      	MOVLW       1
0x09B8	0x6E00      	MOVWF       R0 
0x09BA	0x5001      	MOVF        R1, 0 
0x09BC	0x1600      	ANDWF       R0, 1 
0x09BE	0xE010      	BZ          L_main106
;soundrec.c,507 :: 		UWR("Record\n");
0x09C0	0x0101      	MOVLB       1
0x09C2	0x0E00      	MOVLW       ?lstr31_soundrec
0x09C4	0x6F5B      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x09C6	0x0E01      	MOVLW       hi_addr(?lstr31_soundrec)
0x09C8	0x6F5C      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x09CA	0xDC5B      	RCALL       _UART_Write_Text
0x09CC	0x0E0D      	MOVLW       13
0x09CE	0x6F65      	MOVWF       FARG_UART_Write__data, 1
0x09D0	0xF000EC8E  	CALL        _UART_Write, 0
0x09D4	0x0E0A      	MOVLW       10
0x09D6	0x0101      	MOVLB       1
0x09D8	0x6F65      	MOVWF       FARG_UART_Write__data, 1
0x09DA	0xF000EC8E  	CALL        _UART_Write, 0
;soundrec.c,508 :: 		}
0x09DE	0xD026      	BRA         L_main107
L_main106:
;soundrec.c,509 :: 		else if ((mode == 2) & (lastMode != mode))
0x09E0	0x0E00      	MOVLW       0
0x09E2	0x0100      	MOVLB       0
0x09E4	0x19FF      	XORWF       _mode+1, 0, 1
0x09E6	0xE102      	BNZ         L__main145
0x09E8	0x0E02      	MOVLW       2
0x09EA	0x19FE      	XORWF       _mode, 0, 1
L__main145:
0x09EC	0x0E01      	MOVLW       1
0x09EE	0xA4D8      	BTFSS       STATUS, 2 
0x09F0	0x0E00      	MOVLW       0
0x09F2	0x6E01      	MOVWF       R1 
0x09F4	0x0E00      	MOVLW       0
0x09F6	0x19FF      	XORWF       _mode+1, 0, 1
0x09F8	0xE103      	BNZ         L__main146
0x09FA	0x51FE      	MOVF        _mode, 0, 1
0x09FC	0x0101      	MOVLB       1
0x09FE	0x1950      	XORWF       main_lastMode_L0, 0, 1
L__main146:
0x0A00	0x0E00      	MOVLW       0
0x0A02	0xA4D8      	BTFSS       STATUS, 2 
0x0A04	0x0E01      	MOVLW       1
0x0A06	0x6E00      	MOVWF       R0 
0x0A08	0x5001      	MOVF        R1, 0 
0x0A0A	0x1600      	ANDWF       R0, 1 
0x0A0C	0xE00F      	BZ          L_main108
;soundrec.c,512 :: 		UWR("Play\n");
0x0A0E	0x0101      	MOVLB       1
0x0A10	0x0EF6      	MOVLW       ?lstr32_soundrec
0x0A12	0x6F5B      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x0A14	0x0E00      	MOVLW       hi_addr(?lstr32_soundrec)
0x0A16	0x6F5C      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x0A18	0xDC34      	RCALL       _UART_Write_Text
0x0A1A	0x0E0D      	MOVLW       13
0x0A1C	0x6F65      	MOVWF       FARG_UART_Write__data, 1
0x0A1E	0xF000EC8E  	CALL        _UART_Write, 0
0x0A22	0x0E0A      	MOVLW       10
0x0A24	0x0101      	MOVLB       1
0x0A26	0x6F65      	MOVWF       FARG_UART_Write__data, 1
0x0A28	0xF000EC8E  	CALL        _UART_Write, 0
;soundrec.c,513 :: 		}
L_main108:
L_main107:
;soundrec.c,518 :: 		lastMode = mode;
0x0A2C	0xF150C0FE  	MOVFF       _mode, main_lastMode_L0
;soundrec.c,519 :: 		}
0x0A30	0xD789      	BRA         L_main101
L_main102:
;soundrec.c,523 :: 		if (mode == 1)
0x0A32	0x0E00      	MOVLW       0
0x0A34	0x0100      	MOVLB       0
0x0A36	0x19FF      	XORWF       _mode+1, 0, 1
0x0A38	0xE102      	BNZ         L__main147
0x0A3A	0x0E01      	MOVLW       1
0x0A3C	0x19FE      	XORWF       _mode, 0, 1
L__main147:
0x0A3E	0xE113      	BNZ         L_main109
;soundrec.c,525 :: 		t = 0;
0x0A40	0x6BFC      	CLRF        _t, 1
0x0A42	0x6BFD      	CLRF        _t+1, 1
;soundrec.c,526 :: 		UWR("Writing");
0x0A44	0x0E26      	MOVLW       ?lstr33_soundrec
0x0A46	0x0101      	MOVLB       1
0x0A48	0x6F5B      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x0A4A	0x0E01      	MOVLW       hi_addr(?lstr33_soundrec)
0x0A4C	0x6F5C      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x0A4E	0xDC19      	RCALL       _UART_Write_Text
0x0A50	0x0E0D      	MOVLW       13
0x0A52	0x6F65      	MOVWF       FARG_UART_Write__data, 1
0x0A54	0xF000EC8E  	CALL        _UART_Write, 0
0x0A58	0x0E0A      	MOVLW       10
0x0A5A	0x0101      	MOVLB       1
0x0A5C	0x6F65      	MOVWF       FARG_UART_Write__data, 1
0x0A5E	0xF000EC8E  	CALL        _UART_Write, 0
;soundrec.c,527 :: 		PORTB = 0x00;
0x0A62	0x6A81      	CLRF        PORTB 
;soundrec.c,529 :: 		writeMultipleBlock();
0x0A64	0xDDAF      	RCALL       _writeMultipleBlock
;soundrec.c,530 :: 		}
L_main109:
;soundrec.c,532 :: 		if (mode == 2)
0x0A66	0x0E00      	MOVLW       0
0x0A68	0x0100      	MOVLB       0
0x0A6A	0x19FF      	XORWF       _mode+1, 0, 1
0x0A6C	0xE102      	BNZ         L__main148
0x0A6E	0x0E02      	MOVLW       2
0x0A70	0x19FE      	XORWF       _mode, 0, 1
L__main148:
0x0A72	0xE118      	BNZ         L_main110
;soundrec.c,536 :: 		UWR("Reading");
0x0A74	0x0E2E      	MOVLW       ?lstr34_soundrec
0x0A76	0x0101      	MOVLB       1
0x0A78	0x6F5B      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x0A7A	0x0E01      	MOVLW       hi_addr(?lstr34_soundrec)
0x0A7C	0x6F5C      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x0A7E	0xDC01      	RCALL       _UART_Write_Text
0x0A80	0x0E0D      	MOVLW       13
0x0A82	0x6F65      	MOVWF       FARG_UART_Write__data, 1
0x0A84	0xF000EC8E  	CALL        _UART_Write, 0
0x0A88	0x0E0A      	MOVLW       10
0x0A8A	0x0101      	MOVLB       1
0x0A8C	0x6F65      	MOVWF       FARG_UART_Write__data, 1
0x0A8E	0xF000EC8E  	CALL        _UART_Write, 0
;soundrec.c,537 :: 		t = 0;
0x0A92	0x0100      	MOVLB       0
0x0A94	0x6BFC      	CLRF        _t, 1
0x0A96	0x6BFD      	CLRF        _t+1, 1
;soundrec.c,538 :: 		readSingleBlock();
0x0A98	0xDE5F      	RCALL       _readSingleBlock
;soundrec.c,539 :: 		while (SLCT && OK)
L_main111:
0x0A9A	0xA483      	BTFSS       RD2_bit, BitPos(RD2_bit+0) 
0x0A9C	0xD003      	BRA         L_main112
0x0A9E	0xA683      	BTFSS       RD3_bit, BitPos(RD3_bit+0) 
0x0AA0	0xD001      	BRA         L_main112
L__main118:
;soundrec.c,541 :: 		}
0x0AA2	0xD7FB      	BRA         L_main111
L_main112:
;soundrec.c,542 :: 		}
L_main110:
;soundrec.c,544 :: 		}
0x0AA4	0xD73D      	BRA         L_main96
;soundrec.c,545 :: 		}
L_end_main:
0x0AA6	0xD7FF      	BRA         $+0
; end of _main
0x0BCA	0xF015EE10  	LFSR        1, 21
0x0BCE	0x0E21      	MOVLW       33
0x0BD0	0x6E00      	MOVWF       R0 
0x0BD2	0x0E02      	MOVLW       2
0x0BD4	0x6E01      	MOVWF       R1 
0x0BD6	0x0EA8      	MOVLW       168
0x0BD8	0x6EF6      	MOVWF       4086 
0x0BDA	0x0E0A      	MOVLW       10
0x0BDC	0x6EF7      	MOVWF       TBLPTRH 
0x0BDE	0x0E00      	MOVLW       0
0x0BE0	0x6EF8      	MOVWF       TBLPTRU 
0x0BE2	0xF001ECB3  	CALL        870, 0
0x0BE6	0x0012      	RETURN      0
;soundrec.c,0 :: ?ICS?lstr16_soundrec
0x0AA8	0x6143 ;?ICS?lstr16_soundrec+0
0x0AAA	0x6472 ;?ICS?lstr16_soundrec+2
0x0AAC	0x6220 ;?ICS?lstr16_soundrec+4
0x0AAE	0x7375 ;?ICS?lstr16_soundrec+6
0x0AB0	0x2179 ;?ICS?lstr16_soundrec+8
0x0AB2	0x00 ;?ICS?lstr16_soundrec+10
; end of ?ICS?lstr16_soundrec
;soundrec.c,0 :: ?ICS_arg
0x0AB3	0x0000 ;?ICS_arg+0
0x0AB5	0x0000 ;?ICS_arg+2
; end of ?ICS_arg
;soundrec.c,0 :: ?ICS?lstr9_soundrec
0x0AB7	0x6143 ;?ICS?lstr9_soundrec+0
0x0AB9	0x6472 ;?ICS?lstr9_soundrec+2
0x0ABB	0x6520 ;?ICS?lstr9_soundrec+4
0x0ABD	0x7272 ;?ICS?lstr9_soundrec+6
0x0ABF	0x726F ;?ICS?lstr9_soundrec+8
0x0AC1	0x2D20 ;?ICS?lstr9_soundrec+10
0x0AC3	0x4320 ;?ICS?lstr9_soundrec+12
0x0AC5	0x444D ;?ICS?lstr9_soundrec+14
0x0AC7	0x3631 ;?ICS?lstr9_soundrec+16
0x0AC9	0x00 ;?ICS?lstr9_soundrec+18
; end of ?ICS?lstr9_soundrec
;soundrec.c,0 :: ?ICS?lstr10_soundrec
0x0ACA	0x4D4D ;?ICS?lstr10_soundrec+0
0x0ACC	0x2043 ;?ICS?lstr10_soundrec+2
0x0ACE	0x6544 ;?ICS?lstr10_soundrec+4
0x0AD0	0x6574 ;?ICS?lstr10_soundrec+6
0x0AD2	0x7463 ;?ICS?lstr10_soundrec+8
0x0AD4	0x6465 ;?ICS?lstr10_soundrec+10
0x0AD6	0x0021 ;?ICS?lstr10_soundrec+12
; end of ?ICS?lstr10_soundrec
;soundrec.c,0 :: ?ICS?lstr19_soundrec
0x0AD8	0x6F54 ;?ICS?lstr19_soundrec+0
0x0ADA	0x656B ;?ICS?lstr19_soundrec+2
0x0ADC	0x206E ;?ICS?lstr19_soundrec+4
0x0ADE	0x6572 ;?ICS?lstr19_soundrec+6
0x0AE0	0x6563 ;?ICS?lstr19_soundrec+8
0x0AE2	0x7669 ;?ICS?lstr19_soundrec+10
0x0AE4	0x6465 ;?ICS?lstr19_soundrec+12
0x0AE6	0x0021 ;?ICS?lstr19_soundrec+14
; end of ?ICS?lstr19_soundrec
;soundrec.c,0 :: ?ICS?lstr20_soundrec
0x0AE8	0x4F44 ;?ICS?lstr20_soundrec+0
0x0AEA	0x454E ;?ICS?lstr20_soundrec+2
0x0AEC	0x0021 ;?ICS?lstr20_soundrec+4
; end of ?ICS?lstr20_soundrec
;soundrec.c,0 :: ?ICS?lstr17_soundrec
0x0AEE	0x7542 ;?ICS?lstr17_soundrec+0
0x0AF0	0x7973 ;?ICS?lstr17_soundrec+2
0x0AF2	0x0021 ;?ICS?lstr17_soundrec+4
; end of ?ICS?lstr17_soundrec
;soundrec.c,0 :: ?ICS?lstr18_soundrec
0x0AF4	0x4D43 ;?ICS?lstr18_soundrec+0
0x0AF6	0x2044 ;?ICS?lstr18_soundrec+2
0x0AF8	0x6361 ;?ICS?lstr18_soundrec+4
0x0AFA	0x6563 ;?ICS?lstr18_soundrec+6
0x0AFC	0x7470 ;?ICS?lstr18_soundrec+8
0x0AFE	0x6465 ;?ICS?lstr18_soundrec+10
0x0B00	0x0021 ;?ICS?lstr18_soundrec+12
; end of ?ICS?lstr18_soundrec
;soundrec.c,0 :: ?ICS?lstr5_soundrec
0x0B02	0x5343 ;?ICS?lstr5_soundrec+0
0x0B04	0x6920 ;?ICS?lstr5_soundrec+2
0x0B06	0x2073 ;?ICS?lstr5_soundrec+4
0x0B08	0x4F4C ;?ICS?lstr5_soundrec+6
0x0B0A	0x2157 ;?ICS?lstr5_soundrec+8
0x0B0C	0x000A ;?ICS?lstr5_soundrec+10
; end of ?ICS?lstr5_soundrec
;soundrec.c,0 :: ?ICS?lstr6_soundrec
0x0B0E	0x4D43 ;?ICS?lstr6_soundrec+0
0x0B10	0x3044 ;?ICS?lstr6_soundrec+2
0x0B12	0x7320 ;?ICS?lstr6_soundrec+4
0x0B14	0x6E65 ;?ICS?lstr6_soundrec+6
0x0B16	0x2174 ;?ICS?lstr6_soundrec+8
0x0B18	0x00 ;?ICS?lstr6_soundrec+10
; end of ?ICS?lstr6_soundrec
;soundrec.c,0 :: ?ICS?lstr3_soundrec
0x0B19	0x5343 ;?ICS?lstr3_soundrec+0
0x0B1B	0x6920 ;?ICS?lstr3_soundrec+2
0x0B1D	0x2073 ;?ICS?lstr3_soundrec+4
0x0B1F	0x4948 ;?ICS?lstr3_soundrec+6
0x0B21	0x4847 ;?ICS?lstr3_soundrec+8
0x0B23	0x0021 ;?ICS?lstr3_soundrec+10
; end of ?ICS?lstr3_soundrec
;soundrec.c,0 :: ?ICS?lstr4_soundrec
0x0B25	0x7544 ;?ICS?lstr4_soundrec+0
0x0B27	0x6D6D ;?ICS?lstr4_soundrec+2
0x0B29	0x2079 ;?ICS?lstr4_soundrec+4
0x0B2B	0x6C63 ;?ICS?lstr4_soundrec+6
0x0B2D	0x636F ;?ICS?lstr4_soundrec+8
0x0B2F	0x206B ;?ICS?lstr4_soundrec+10
0x0B31	0x6573 ;?ICS?lstr4_soundrec+12
0x0B33	0x746E ;?ICS?lstr4_soundrec+14
0x0B35	0x0021 ;?ICS?lstr4_soundrec+16
; end of ?ICS?lstr4_soundrec
;soundrec.c,0 :: ?ICS?lstr7_soundrec
0x0B37	0x4143 ;?ICS?lstr7_soundrec+0
0x0B39	0x4452 ;?ICS?lstr7_soundrec+2
0x0B3B	0x4520 ;?ICS?lstr7_soundrec+4
0x0B3D	0x5252 ;?ICS?lstr7_soundrec+6
0x0B3F	0x524F ;?ICS?lstr7_soundrec+8
0x0B41	0x2D20 ;?ICS?lstr7_soundrec+10
0x0B43	0x4320 ;?ICS?lstr7_soundrec+12
0x0B45	0x444D ;?ICS?lstr7_soundrec+14
0x0B47	0x0030 ;?ICS?lstr7_soundrec+16
; end of ?ICS?lstr7_soundrec
;soundrec.c,0 :: ?ICS?lstr8_soundrec
0x0B49	0x6143 ;?ICS?lstr8_soundrec+0
0x0B4B	0x6472 ;?ICS?lstr8_soundrec+2
0x0B4D	0x4520 ;?ICS?lstr8_soundrec+4
0x0B4F	0x5252 ;?ICS?lstr8_soundrec+6
0x0B51	0x524F ;?ICS?lstr8_soundrec+8
0x0B53	0x2D20 ;?ICS?lstr8_soundrec+10
0x0B55	0x4320 ;?ICS?lstr8_soundrec+12
0x0B57	0x444D ;?ICS?lstr8_soundrec+14
0x0B59	0x0031 ;?ICS?lstr8_soundrec+16
; end of ?ICS?lstr8_soundrec
;soundrec.c,0 :: ?ICS?lstr30_soundrec
0x0B5B	0x6553 ;?ICS?lstr30_soundrec+0
0x0B5D	0x656C ;?ICS?lstr30_soundrec+2
0x0B5F	0x7463 ;?ICS?lstr30_soundrec+4
0x0B61	0x6120 ;?ICS?lstr30_soundrec+6
0x0B63	0x4D20 ;?ICS?lstr30_soundrec+8
0x0B65	0x6E65 ;?ICS?lstr30_soundrec+10
0x0B67	0x0075 ;?ICS?lstr30_soundrec+12
; end of ?ICS?lstr30_soundrec
;soundrec.c,0 :: ?ICS?lstr23_soundrec
0x0B69	0x6F43 ;?ICS?lstr23_soundrec+0
0x0B6B	0x6D6D ;?ICS?lstr23_soundrec+2
0x0B6D	0x6E61 ;?ICS?lstr23_soundrec+4
0x0B6F	0x2064 ;?ICS?lstr23_soundrec+6
0x0B71	0x6361 ;?ICS?lstr23_soundrec+8
0x0B73	0x6563 ;?ICS?lstr23_soundrec+10
0x0B75	0x7470 ;?ICS?lstr23_soundrec+12
0x0B77	0x6465 ;?ICS?lstr23_soundrec+14
0x0B79	0x0021 ;?ICS?lstr23_soundrec+16
; end of ?ICS?lstr23_soundrec
;soundrec.c,0 :: ?ICS?lstr24_soundrec
0x0B7B	0x4F44 ;?ICS?lstr24_soundrec+0
0x0B7D	0x454E ;?ICS?lstr24_soundrec+2
0x0B7F	0x5720 ;?ICS?lstr24_soundrec+4
0x0B81	0x6972 ;?ICS?lstr24_soundrec+6
0x0B83	0x6974 ;?ICS?lstr24_soundrec+8
0x0B85	0x676E ;?ICS?lstr24_soundrec+10
0x0B87	0x0021 ;?ICS?lstr24_soundrec+12
; end of ?ICS?lstr24_soundrec
;soundrec.c,0 :: ?ICS?lstr32_soundrec
0x0B89	0x6C50 ;?ICS?lstr32_soundrec+0
0x0B8B	0x7961 ;?ICS?lstr32_soundrec+2
0x0B8D	0x000A ;?ICS?lstr32_soundrec+4
; end of ?ICS?lstr32_soundrec
;soundrec.c,0 :: ?ICS_t
0x0B8F	0x0000 ;?ICS_t+0
; end of ?ICS_t
;soundrec.c,0 :: ?ICS_mode
0x0B91	0x0000 ;?ICS_mode+0
; end of ?ICS_mode
;soundrec.c,0 :: ?ICS?lstr31_soundrec
0x0B93	0x6552 ;?ICS?lstr31_soundrec+0
0x0B95	0x6F63 ;?ICS?lstr31_soundrec+2
0x0B97	0x6472 ;?ICS?lstr31_soundrec+4
0x0B99	0x000A ;?ICS?lstr31_soundrec+6
; end of ?ICS?lstr31_soundrec
;soundrec.c,0 :: ?ICS?lstr21_soundrec
0x0B9B	0x6143 ;?ICS?lstr21_soundrec+0
0x0B9D	0x6472 ;?ICS?lstr21_soundrec+2
0x0B9F	0x7220 ;?ICS?lstr21_soundrec+4
0x0BA1	0x6165 ;?ICS?lstr21_soundrec+6
0x0BA3	0x7964 ;?ICS?lstr21_soundrec+8
0x0BA5	0x0021 ;?ICS?lstr21_soundrec+10
; end of ?ICS?lstr21_soundrec
;soundrec.c,0 :: ?ICS?lstr22_soundrec
0x0BA7	0x6F43 ;?ICS?lstr22_soundrec+0
0x0BA9	0x6D6D ;?ICS?lstr22_soundrec+2
0x0BAB	0x6E61 ;?ICS?lstr22_soundrec+4
0x0BAD	0x2064 ;?ICS?lstr22_soundrec+6
0x0BAF	0x6572 ;?ICS?lstr22_soundrec+8
0x0BB1	0x656A ;?ICS?lstr22_soundrec+10
0x0BB3	0x7463 ;?ICS?lstr22_soundrec+12
0x0BB5	0x6465 ;?ICS?lstr22_soundrec+14
0x0BB7	0x0021 ;?ICS?lstr22_soundrec+16
; end of ?ICS?lstr22_soundrec
;soundrec.c,0 :: ?ICS?lstr33_soundrec
0x0BB9	0x7257 ;?ICS?lstr33_soundrec+0
0x0BBB	0x7469 ;?ICS?lstr33_soundrec+2
0x0BBD	0x6E69 ;?ICS?lstr33_soundrec+4
0x0BBF	0x0067 ;?ICS?lstr33_soundrec+6
; end of ?ICS?lstr33_soundrec
;soundrec.c,0 :: ?ICS?lstr34_soundrec
0x0BC1	0x6552 ;?ICS?lstr34_soundrec+0
0x0BC3	0x6461 ;?ICS?lstr34_soundrec+2
0x0BC5	0x6E69 ;?ICS?lstr34_soundrec+4
0x0BC7	0x0067 ;?ICS?lstr34_soundrec+6
; end of ?ICS?lstr34_soundrec
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x001C      [14]    _UART1_Write
0x002A      [18]    _SPI1_Write
0x003C      [24]    _____DoIFC
0x0054      [54]    _Div_16x16_U
0x008A     [146]    _WordToStr
0x011C      [24]    _UART_Write
0x0134      [18]    _SPI1_Read
0x0146     [218]    _IntToStr
0x0220      [98]    _command
0x0282      [52]    _UART_Write_Text
0x02B6      [88]    _SPI1_Init_Advanced
0x030E      [88]    _UART1_Init
0x0366      [16]    ___CC2DW
0x0376     [590]    _mmcInit
0x05C4     [404]    _writeMultipleBlock
0x0758     [382]    _readSingleBlock
0x08D6     [466]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    FLASH_Erase_64_SaveINTCON_L0
0x0000       [1]    __Lib_SoftI2C_PutZerosToLATSda_temp_sda_L0
0x0000       [1]    UART1_Init_tmp_L0
0x0000       [1]    SPI1_Write_tmp_L0
0x0000       [1]    __Lib_SoftI2C_PutZerosToLATScl_temp_scl_L0
0x0000       [1]    EEPROM_Write_SaveINTCON_L0
0x0000       [1]    R0
0x0001       [1]    __Lib_PS2_Wait_Falling_nsample_L0
0x0001       [1]    R1
0x0001       [1]    FLASH_Write_32_i_L0
0x0001       [1]    I2C1_Rd_tmp_L0
0x0001       [1]    UART1_Read___tmp_UART1_Read_L0
0x0001       [2]    FLASH_Read_N_Bytes_i_L0
0x0001       [1]    FLASH_Erase_Write_64_i_L0
0x0001       [1]    ispunct_rslt_L0
0x0002       [1]    R2
0x0002       [1]    FLASH_Write_32_SaveINTCON_L0
0x0002       [2]    memset_pp_L0
0x0002       [2]    strlen_cp_L0
0x0002       [1]    FLASH_Erase_Write_64_j_L0
0x0002       [2]    memcpy_dd_L0
0x0002       [2]    memchr_s_L0
0x0003       [2]    memmove_tt_L0
0x0003       [1]    R3
0x0003       [1]    MM_Init_i_L0
0x0003       [2]    Ltrim_original_L0
0x0003       [2]    MM_TotalFreeMemSize_Tot_L0
0x0003       [2]    __Lib_MmcFat16_f16_toInt_l_L0
0x0003       [1]    FLASH_Erase_Write_64_SaveINTCON_L0
0x0003       [1]    codeToRam_i_L0
0x0004       [2]    strcat_cp_L0
0x0004       [1]    R4
0x0004       [2]    __Lib_MemManager_MM_GetMemAlign_P_L0
0x0004       [2]    strcpy_cp_L0
0x0004       [2]    strncat_cp_L0
0x0004       [2]    frexp_pom_L0
0x0004       [2]    memcpy_ss_L0
0x0004       [2]    strncpy_cp_L0
0x0005       [2]    LongWordToHex_input_half_L0
0x0005       [2]    LongIntToHex_input_half_L0
0x0005       [2]    memmove_ff_L0
0x0005       [1]    R5
0x0005       [2]    Ltrim_p_L0
0x0005       [1]    MM_TotalFreeMemSize_i_L0
0x0006       [1]    __Lib_MemManager_MM_GetMemAlign_i_L0
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [1]    R8
0x0009       [4]    __Lib_MmcFat16_f16_toLong_l_L0
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0015      [11]    ?lstr16_soundrec
0x0020       [4]    _arg
0x0024      [19]    ?lstr9_soundrec
0x0037      [14]    ?lstr10_soundrec
0x0045      [16]    ?lstr19_soundrec
0x0055       [6]    ?lstr20_soundrec
0x005B       [6]    ?lstr17_soundrec
0x0061      [14]    ?lstr18_soundrec
0x006F      [12]    ?lstr5_soundrec
0x007B      [11]    ?lstr6_soundrec
0x0086      [12]    ?lstr3_soundrec
0x0092      [18]    ?lstr4_soundrec
0x00A4      [18]    ?lstr7_soundrec
0x00B6      [18]    ?lstr8_soundrec
0x00C8      [14]    ?lstr30_soundrec
0x00D6      [18]    ?lstr23_soundrec
0x00E8      [14]    ?lstr24_soundrec
0x00F6       [6]    ?lstr32_soundrec
0x00FC       [2]    _t
0x00FE       [2]    _mode
0x0100       [8]    ?lstr31_soundrec
0x0108      [12]    ?lstr21_soundrec
0x0114      [18]    ?lstr22_soundrec
0x0126       [8]    ?lstr33_soundrec
0x012E       [8]    ?lstr34_soundrec
0x0136       [1]    _count
0x0137       [1]    _spiReadData
0x0138       [4]    _SPI_Rd_Ptr
0x013C       [4]    _SPI_Wr_Ptr
0x0140       [4]    _UART_Rdy_Ptr
0x0144       [4]    _UART_Tx_Idle_Ptr
0x0148       [4]    _UART_Wr_Ptr
0x014C       [4]    _UART_Rd_Ptr
0x0150       [1]    main_lastMode_L0
0x0151       [2]    writeMultipleBlock_g_L0
0x0151       [1]    mmcInit_u_L0
0x0151       [2]    readSingleBlock_numOfBytes_L0
0x0153       [7]    readSingleBlock_strData_L0
0x0153       [7]    writeMultipleBlock_text_L0
0x015A       [1]    writeMultipleBlock_temp_L0
0x015B       [1]    FARG_SPI1_Init_Advanced_master
0x015B       [1]    FARG_command_command
0x015B       [2]    FARG_UART_Write_Text_uart_text
0x015B       [2]    FARG_IntToStr_input
0x015C       [4]    FARG_command_fourbyte_arg
0x015C       [1]    FARG_SPI1_Init_Advanced_data_sample
0x015D       [2]    FARG_IntToStr_output
0x015D       [1]    UART_Write_Text_data__L0
0x015D       [1]    FARG_SPI1_Init_Advanced_clock_idle
0x015E       [1]    UART_Write_Text_counter_L0
0x015E       [1]    FARG_SPI1_Init_Advanced_transmit_edge
0x015F       [2]    IntToStr_i_L0
0x0160       [1]    FARG_command_CRCbits
0x0161       [2]    IntToStr_negative_L0
0x0163       [2]    IntToStr_inword_L0
0x0165       [1]    FARG_SPI1_Read_buffer
0x0165       [2]    FARG_WordToStr_input
0x0165       [1]    FARG_UART_Write__data
0x0167       [2]    FARG_WordToStr_output
0x0169       [1]    WordToStr_len_L0
0x016A       [2]    FLOC__WordToStr
0x016C       [1]    FARG_UART1_Write_data_
0x016C       [1]    FARG_SPI1_Write_data_
0x0F81       [1]    PORTB
0x0F83       [0]    RD2_bit
0x0F83       [0]    RD3_bit
0x0F8A       [1]    LATB
0x0F8B       [0]    LATC2_bit
0x0F8B       [0]    Mmc_Chip_Select
0x0F8C       [0]    LATD0_bit
0x0F8C       [0]    LATD6_bit
0x0F8C       [0]    LATD7_bit
0x0F8C       [0]    LATD1_bit
0x0F8C       [0]    LATD4_bit
0x0F8C       [0]    LATD5_bit
0x0F92       [0]    TRISA2_bit
0x0F93       [1]    TRISB
0x0F94       [0]    TRISC4_bit
0x0F94       [0]    TRISC6_bit
0x0F94       [0]    TRISC7_bit
0x0F94       [0]    TRISC5_bit
0x0F94       [0]    TRISC2_bit
0x0F94       [1]    TRISC
0x0F94       [0]    TRISC3_bit
0x0F95       [0]    TRISD5_bit
0x0F95       [0]    TRISD7_bit
0x0F95       [0]    TRISD6_bit
0x0F95       [1]    TRISD
0x0F95       [0]    TRISD1_bit
0x0F95       [0]    TRISD2_bit
0x0F95       [0]    TRISD0_bit
0x0F95       [0]    TRISD4_bit
0x0F95       [0]    TRISD3_bit
0x0F9E       [1]    PIR1
0x0FAB       [1]    RCSTA
0x0FAC       [1]    TXSTA
0x0FAD       [1]    TXREG
0x0FAE       [1]    RCREG
0x0FAF       [1]    SPBRG
0x0FB0       [1]    SPBRGH
0x0FB8       [1]    BAUDCON
0x0FC0       [0]    ADFM_bit
0x0FC0       [1]    ADCON2
0x0FC1       [1]    ADCON1
0x0FC2       [0]    ADON_bit
0x0FC6       [1]    SSPCON1
0x0FC7       [1]    SSPSTAT
0x0FC9       [1]    SSPBUF
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [2]    FSR1
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF2       [1]    INTCON
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
0x0FFD       [1]    TOSL
0x0FFE       [1]    TOSH
0x0FFF       [1]    TOSU
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x0AA8      [11]    ?ICS?lstr16_soundrec
0x0AB3       [4]    ?ICS_arg
0x0AB7      [19]    ?ICS?lstr9_soundrec
0x0ACA      [14]    ?ICS?lstr10_soundrec
0x0AD8      [16]    ?ICS?lstr19_soundrec
0x0AE8       [6]    ?ICS?lstr20_soundrec
0x0AEE       [6]    ?ICS?lstr17_soundrec
0x0AF4      [14]    ?ICS?lstr18_soundrec
0x0B02      [12]    ?ICS?lstr5_soundrec
0x0B0E      [11]    ?ICS?lstr6_soundrec
0x0B19      [12]    ?ICS?lstr3_soundrec
0x0B25      [18]    ?ICS?lstr4_soundrec
0x0B37      [18]    ?ICS?lstr7_soundrec
0x0B49      [18]    ?ICS?lstr8_soundrec
0x0B5B      [14]    ?ICS?lstr30_soundrec
0x0B69      [18]    ?ICS?lstr23_soundrec
0x0B7B      [14]    ?ICS?lstr24_soundrec
0x0B89       [6]    ?ICS?lstr32_soundrec
0x0B8F       [2]    ?ICS_t
0x0B91       [2]    ?ICS_mode
0x0B93       [8]    ?ICS?lstr31_soundrec
0x0B9B      [12]    ?ICS?lstr21_soundrec
0x0BA7      [18]    ?ICS?lstr22_soundrec
0x0BB9       [8]    ?ICS?lstr33_soundrec
0x0BC1       [8]    ?ICS?lstr34_soundrec
//** Label List: ** 
//----------------------------------------------
  L_codeToRam0
  L_codeToRam1
  L_codeToRam2
  L_adcRead3
  L_adcRead4
  L_caidatMMC5
  L_caidatMMC6
  L_caidatMMC7
  L_caidatMMC8
  L_mmcInit9
  L_mmcInit10
  L_mmcInit11
  L_mmcInit12
  L_mmcInit13
  L_mmcInit14
  L_mmcInit15
  L_mmcInit16
  L_mmcInit17
  L_mmcInit18
  L_mmcInit19
  L_mmcInit20
  L_mmcInit21
  L_mmcInit22
  L_mmcInit23
  L_mmcInit24
  L_mmcInit25
  L_mmcInit26
  L_mmcInit27
  L_mmcInit28
  L_mmcInit29
  L_mmcInit30
  L_mmcInit31
  L_mmcInit32
  L_mmcInit33
  L_mmcInit34
  L_mmcInit35
  L_writeSingleBlock36
  L_writeSingleBlock37
  L_writeSingleBlock38
  L_writeSingleBlock39
  L_writeSingleBlock40
  L_writeSingleBlock41
  L_writeSingleBlock42
  L_writeSingleBlock43
  L_writeSingleBlock44
  L_writeSingleBlock45
  L_writeSingleBlock46
  L_writeSingleBlock47
  L_writeSingleBlock48
  L_readSingleBlock49
  L_readSingleBlock50
  L_readSingleBlock51
  L_readSingleBlock52
  L_readSingleBlock53
  L_readSingleBlock54
  L_readSingleBlock55
  L_readSingleBlock56
  L_readSingleBlock57
  L_readSingleBlock58
  L_writeMultipleBlock59
  L_writeMultipleBlock60
  L_writeMultipleBlock61
  L_writeMultipleBlock62
  L_writeMultipleBlock63
  L_writeMultipleBlock64
  L_writeMultipleBlock65
  L_writeMultipleBlock66
  L_writeMultipleBlock67
  L_writeMultipleBlock68
  L_writeMultipleBlock69
  L_writeMultipleBlock70
  L_writeMultipleBlock71
  L_writeMultipleBlock72
  L_writeMultipleBlock73
  L_writeMultipleBlock74
  L_hamghi75
  L_hamghi76
  L_hamghi77
  L_hamghi78
  L_hamghi79
  L_hamghi80
  L_hamghi81
  L_hamdoc82
  L_hamdoc83
  L_hamdoc84
  L_hamdoc85
  L_hamdoc86
  L_hamcaidat87
  L_hamcaidat88
  L_hamcaidat89
  L_hamcaidat90
  L_hamcaidat91
  L_hamcaidat92
  L_hamcaidat93
  L_hamcaidat94
  L_main95
  L_main96
  L_main97
  L_main98
  L_main99
  L_main100
  L_main101
  L_main102
  L_main103
  L_main104
  L_main105
  L_main106
  L_main107
  L_main108
  L_main109
  L_main110
  L_main111
  L_main112
  L_main113
  L_main114
  L__mmcInit115
  L__mmcInit116
  L__mmcInit117
  L__main118
  L_end_codeToRam
  _codeToRam
  L_end_adcRead
  _adcRead
  L_end_caidatMMC
  _caidatMMC
  L_end_command
  _command
  L_end_mmcInit
  _mmcInit
  L__mmcInit124
  L__mmcInit125
  L__mmcInit126
  L__mmcInit127
  L_end_writeSingleBlock
  _writeSingleBlock
  L__writeSingleBlock129
  L_end_readSingleBlock
  _readSingleBlock
  L__readSingleBlock131
  L_end_writeMultipleBlock
  _writeMultipleBlock
  L_end_hamghi
  _hamghi
  L__hamghi134
  L_end_hamdoc
  _hamdoc
  L__hamdoc136
  L_end_hamcaidat
  _hamcaidat
  L__hamcaidat138
  L__hamcaidat139
  L__hamcaidat140
  L_end_main
  _main
  L__main142
  L__main143
  L__main144
  L__main145
  L__main146
  L__main147
  L__main148
  L_ByteToStr0
  L_ByteToStr1
  L_ByteToStr2
  L_ByteToStr3
  L_ByteToStr4
  L_ByteToStr5
  L_WordToStr6
  L_WordToStr7
  L_WordToStr8
  L_WordToStr9
  L_WordToStr10
  L_WordToStr11
  L_WordToStrWithZeros12
  L_WordToStrWithZeros13
  L_WordToStrWithZeros14
  L_WordToStrWithZeros15
  L_WordToStrWithZeros16
  L_ShortToStr17
  L_ShortToStr18
  L_ShortToStr19
  L_ShortToStr20
  L_ShortToStr21
  L_ShortToStr22
  L_IntToStr23
  L_IntToStr24
  L_IntToStr25
  L_IntToStr26
  L_IntToStr27
  L_IntToStr28
  L_IntToStrWithZeros29
  L_IntToStrWithZeros30
  L_IntToStrWithZeros31
  L_IntToStrWithZeros32
  L_IntToStrWithZeros33
  L_IntToStrWithZeros34
  L_IntToStrWithZeros35
  L_IntToStrWithZeros36
  L_IntToStrWithZeros37
  L_LongWordToStr38
  L_LongWordToStr39
  L_LongWordToStr40
  L_LongWordToStr41
  L_LongWordToStr42
  L_LongWordToStr43
  L_LongWordToStrWithZeros44
  L_LongWordToStrWithZeros45
  L_LongWordToStrWithZeros46
  L_LongWordToStrWithZeros47
  L_LongWordToStrWithZeros48
  L_LongToStr49
  L_LongToStr50
  L_LongToStr51
  L_LongToStr52
  L_LongToStr53
  L_LongToStr54
  L_LongIntToStrWithZeros55
  L_LongIntToStrWithZeros56
  L_LongIntToStrWithZeros57
  L_LongIntToStrWithZeros58
  L_LongIntToStrWithZeros59
  L_LongIntToStrWithZeros60
  L_LongIntToStrWithZeros61
  L_LongIntToStrWithZeros62
  L_LongIntToStrWithZeros63
  L_Dec2Bcd64
  L_Dec2Bcd65
  L_Rtrim66
  L_Rtrim67
  L_Rtrim68
  L_Rtrim69
  L_Ltrim70
  L_Ltrim71
  L_Ltrim72
  L_Ltrim73
  L_Ltrim74
  L_Ltrim75
  L_FloatToStr76
  L_FloatToStr77
  L_FloatToStr78
  L_FloatToStr79
  L_FloatToStr80
  L_FloatToStr81
  L_FloatToStr82
  L_FloatToStr83
  L_FloatToStr84
  L_FloatToStr85
  L_FloatToStr86
  L_FloatToStr87
  L_FloatToStr88
  L_FloatToStr89
  L_FloatToStr90
  L_FloatToStr91
  L_FloatToStr92
  L_FloatToStr93
  L_FloatToStr94
  L_FloatToStr95
  L_FloatToStr96
  L_FloatToStr97
  L__Rtrim98
  L__Ltrim99
  L__FloatToStr100
  L_end_ByteToHex
  _ByteToHex
  L_end_ShortToHex
  _ShortToHex
  L_end_WordToHex
  _WordToHex
  L_end_IntToHex
  _IntToHex
  L_end_LongWordToHex
  _LongWordToHex
  L_end_LongIntToHex
  _LongIntToHex
  L_end_ByteToStr
  _ByteToStr
  L_end_WordToStr
  _WordToStr
  L__WordToStr109
  L_end_WordToStrWithZeros
  _WordToStrWithZeros
  L__WordToStrWithZeros111
  L_end_ShortToStr
  _ShortToStr
  L__ShortToStr113
  L_end_IntToStr
  _IntToStr
  L__IntToStr115
  L__IntToStr116
  L_end_IntToStrWithZeros
  _IntToStrWithZeros
  L__IntToStrWithZeros118
  L__IntToStrWithZeros119
  L__IntToStrWithZeros120
  L_end_LongWordToStr
  _LongWordToStr
  L__LongWordToStr122
  L__LongWordToStr123
  L_end_LongWordToStrWithZeros
  _LongWordToStrWithZeros
  L__LongWordToStrWithZeros125
  L_end_LongToStr
  _LongToStr
  L__LongToStr127
  L__LongToStr128
  L_end_LongIntToStrWithZeros
  _LongIntToStrWithZeros
  L__LongIntToStrWithZeros130
  L__LongIntToStrWithZeros131
  L__LongIntToStrWithZeros132
  L_end_Dec2Bcd
  _Dec2Bcd
  L_end_Bcd2Dec
  _Bcd2Dec
  L_end_Bcd2Dec16
  _Bcd2Dec16
  L__Bcd2Dec16136
  L__Bcd2Dec16137
  L_end_Dec2Bcd16
  _Dec2Bcd16
  L__Dec2Bcd16139
  L__Dec2Bcd16140
  L_end_Rtrim
  _Rtrim
  L__Rtrim142
  L_end_Ltrim
  _Ltrim
  L_end_FloatToStr
  _FloatToStr
  L__FloatToStr145
  L__FloatToStr146
  L__FloatToStr147
  L__FloatToStr148
  L__FloatToStr149
  L_Div_16x16_S0
  L_Div_16x16_S1
  LOOPS3232A
  SADD22LA
  SOK22LA
  SADD22L8
  SOK22L8
  LOOPS3232B
  SADD22LB
  SOK22LB
  SADD22L16
  SOK22L16
  LOOPS3232C
  SADD22LC
  SOK22LC
  SADD22L24
  SOK22L24
  LOOPS3232D
  SADD22LD
  SOK22LD
  SOK22L
  L_Div_32x32_S6
  L_Div_32x32_S7
  L_Div_32x32_S8
  L_Div_32x32_S9
  FXD3232S
  END_ALL
  CA3232S
  C3232SX
  C3232SX1
  C3232S
  C3232S2
  C3232SX4
  C3232SOK
  C3232SX3
  C3232SX2
  avoid_comfrem
  LOOPU3232A
  UADD22LA
  UOK22LA
  UADD22L8
  UOK22L8
  LOOPU3232B
  UADD22LB
  UOK22LB
  UADD22L16
  UOK22L16
  LOOPU3232C
  UADD22LC
  UOK22LC
  UADD22L24
  UOK22L24
  LOOPU3232D
  UADD22LD
  UOK22LD
  UOK22L
  _NEXT
  _EXIT2
  _LOOP
  _EXIT1
  _IF_FIRST
  _IF_SECOND
  _INVERCE_FIRST
  _MULT
  _INBERSE_SECOND
  _EXIT
  L_end_Div_8x8_U
  _Div_8x8_U
  L_end_Div_16x16_U
  _Div_16x16_U
  L_end_Div_16x16_S_L
  _Div_16x16_S_L
  L_end_Div_16x16_S
  _Div_16x16_S
  L_end_Div_8x8_S
  _Div_8x8_S
  L_end_Mul_8x8_S
  _Mul_8x8_S
  L_end_Mul_16x16_U
  _Mul_16x16_U
  L_end_Mul_16x16_S
  _Mul_16x16_S
  L_end_SDIV3232L
  _SDIV3232L
  L_end_COMFREM
  _COMFREM
  L_end_Div_32x32_S
  _Div_32x32_S
  L_end_Div_32x32_U
  _Div_32x32_U
  L_end_Mul_32x32_U
  _Mul_32x32_U
  L_end_Mul_32x32_S
  _Mul_32x32_S
  L_SPI1_Init_Advanced0
  L_SPI1_Init_Advanced1
  L_SPI1_Init_Advanced2
  L_SPI1_Init_Advanced3
  L_SPI1_Init_Advanced4
  L_SPI1_Init_Advanced5
  L_SPI1_Read6
  L_SPI1_Read7
  L_SPI1_Write8
  L_SPI1_Write9
  L_end_SPI1_Init
  _SPI1_Init
  L_end_SPI1_Init_Advanced
  _SPI1_Init_Advanced
  L_end_SPI1_Read
  _SPI1_Read
  L_end_SPI1_Write
  _SPI1_Write
  L_end_SPI_Set_Active
  _SPI_Set_Active
  L_end_SPI_Read
  _SPI_Read
  L_end_SPI_Write
  _SPI_Write
  _CC2D_Loop1
  _CC2DL_Loop1
  L_loopCA2AWs
  L_loopCCA2AWs
  L_loopCS2Ss
  L_CS2Send
  L_loopCCS2Ss
  L_CCS2Send
  L_loopFZinSWs
  L_longjmp7
  L_end___CC2D
  ___CC2D
  L_end___CC2DW
  ___CC2DW
  L_end___CA2AW
  ___CA2AW
  L_end___CCA2AW
  ___CCA2AW
  L_end___CS2S
  ___CS2S
  L_end___CCS2S
  ___CCS2S
  L_end___FZinS
  ___FZinS
  L_end_____DoIFC
  _____DoIFC
  L_end_Swap
  _Swap
  L_end_setjmp
  _setjmp
  L_end_longjmp
  _longjmp
  L_UART1_Init0
  L_UART1_Init1
  L_UART1_Read2
  L_UART1_Write3
  L_UART1_Write4
  L_UART1_Write_Text5
  L_UART1_Write_Text6
  L_UART1_Read_Text7
  L_UART1_Read_Text8
  L_UART1_Read_Text9
  L_UART1_Read_Text10
  L_UART1_Read_Text11
  L_UART1_Read_Text12
  L_UART1_Read_Text13
  L_UART1_Read_Text14
  L_UART1_Read_Text15
  L_UART_Write_Text16
  L_UART_Write_Text17
  L_UART_Read_Text18
  L_UART_Read_Text19
  L_UART_Read_Text20
  L_UART_Read_Text21
  L_UART_Read_Text22
  L_UART_Read_Text23
  L_UART_Read_Text24
  L_UART_Read_Text25
  L_UART_Read_Text26
  L_end_UART1_Init
  _UART1_Init
  L_end_UART1_Data_Ready
  _UART1_Data_Ready
  L_end_UART1_Read
  _UART1_Read
  L_end_UART1_Tx_Idle
  _UART1_Tx_Idle
  L_end_UART1_Write
  _UART1_Write
  L_end_UART1_Write_Text
  _UART1_Write_Text
  L_end_UART1_Read_Text
  _UART1_Read_Text
  L_end_UART_Set_Active
  _UART_Set_Active
  L_end_UART_Write
  _UART_Write
  L_end_UART_Write_Text
  _UART_Write_Text
  L_end_UART_Read
  _UART_Read
  L_end_UART_Data_Ready
  _UART_Data_Ready
  L_end_UART_Read_Text
  _UART_Read_Text
  L_end_UART_Tx_Idle
  _UART_Tx_Idle
