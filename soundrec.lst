;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 15/07/2013 5:57:31 CH
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF005EF4E  	GOTO        2716
0x0004	0x0000      	NOP
0x0006	0x0000      	NOP
0x0008	0xF000EF00  	GOTO        0
0x000C	0x0000      	NOP
0x000E	0x0000      	NOP
0x0010	0x0000      	NOP
0x0012	0x0000      	NOP
0x0014	0x0000      	NOP
0x0016	0x0000      	NOP
0x0018	0xD7F3      	BRA         0
_UART1_Write:
;__Lib_UART_c67.c,58 :: 		
;__Lib_UART_c67.c,59 :: 		
L_UART1_Write3:
0x001C	0xB2AC      	BTFSC       TXSTA, 1 
0x001E	0xD002      	BRA         L_UART1_Write4
;__Lib_UART_c67.c,60 :: 		
0x0020	0x0000      	NOP
0x0022	0xD7FC      	BRA         L_UART1_Write3
L_UART1_Write4:
;__Lib_UART_c67.c,61 :: 		
0x0024	0xFFADC186  	MOVFF       FARG_UART1_Write_data_, TXREG
;__Lib_UART_c67.c,62 :: 		
L_end_UART1_Write:
0x0028	0x0012      	RETURN      0
; end of _UART1_Write
_SPI1_Write:
;__Lib_SPI_c345.c,76 :: 		
;__Lib_SPI_c345.c,79 :: 		
0x002A	0xFFC9C186  	MOVFF       FARG_SPI1_Write_data_, SSPBUF
;__Lib_SPI_c345.c,80 :: 		
L_SPI1_Write8:
0x002E	0xB0C7      	BTFSC       SSPSTAT, 0 
0x0030	0xD002      	BRA         L_SPI1_Write9
;__Lib_SPI_c345.c,81 :: 		
0x0032	0x0000      	NOP
0x0034	0xD7FC      	BRA         L_SPI1_Write8
L_SPI1_Write9:
;__Lib_SPI_c345.c,82 :: 		
0x0036	0xF000CFC9  	MOVFF       SSPBUF, R0
;__Lib_SPI_c345.c,84 :: 		
L_end_SPI1_Write:
0x003A	0x0012      	RETURN      0
; end of _SPI1_Write
_____DoIFC:
;__Lib_System.c,93 :: 		
;__Lib_System.c,94 :: 		
0x003C	0x50F2      	MOVF        INTCON, 0, 0
;__Lib_System.c,95 :: 		
0x003E	0x6E02      	MOVWF       R2, 0
;__Lib_System.c,96 :: 		
0x0040	0x9EF2      	BCF         INTCON, 7 
;__Lib_System.c,97 :: 		
0x0042	0x0005      	PUSH
;__Lib_System.c,98 :: 		
0x0044	0x6AFF      	CLRF        TOSU, 0
;__Lib_System.c,99 :: 		
0x0046	0x5001      	MOVF        R1, 0, 0
;__Lib_System.c,100 :: 		
0x0048	0x6EFE      	MOVWF       TOSH, 0
;__Lib_System.c,101 :: 		
0x004A	0x5000      	MOVF        R0, 0, 0
;__Lib_System.c,102 :: 		
0x004C	0x6EFD      	MOVWF       TOSL, 0
;__Lib_System.c,103 :: 		
0x004E	0xBE02      	BTFSC       R2, 7, 0
;__Lib_System.c,104 :: 		
0x0050	0x8EF2      	BSF         INTCON, 7, 0
;__Lib_System.c,105 :: 		
;__Lib_System.c,107 :: 		
L_end_____DoIFC:
0x0052	0x0012      	RETURN      0
; end of _____DoIFC
_Div_16x16_U:
;__Lib_Math.c,102 :: 		
;__Lib_Math.c,109 :: 		
0x0054	0x6A08      	CLRF        R8, 0
;__Lib_Math.c,110 :: 		
0x0056	0x6A09      	CLRF        R9, 0
;__Lib_Math.c,111 :: 		
0x0058	0x0E10      	MOVLW       16
;__Lib_Math.c,112 :: 		
0x005A	0x6E0C      	MOVWF       R12, 0
;__Lib_Math.c,113 :: 		
0x005C	0x3401      	RLCF        R1, 0, 0
;__Lib_Math.c,114 :: 		
0x005E	0x3608      	RLCF        R8, 1, 0
;__Lib_Math.c,115 :: 		
0x0060	0x3609      	RLCF        R9, 1, 0
;__Lib_Math.c,116 :: 		
0x0062	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c,117 :: 		
0x0064	0x5E08      	SUBWF       R8, 1, 0
;__Lib_Math.c,118 :: 		
0x0066	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,119 :: 		
0x0068	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_Math.c,120 :: 		
0x006A	0x3C05      	INCFSZ      R5, 0, 0
;__Lib_Math.c,121 :: 		
0x006C	0x5E09      	SUBWF       R9, 1, 0
;__Lib_Math.c,122 :: 		
0x006E	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_Math.c,123 :: 		
0x0070	0xD007      	BRA         $+16
;__Lib_Math.c,124 :: 		
0x0072	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c,125 :: 		
0x0074	0x2608      	ADDWF       R8, 1, 0
;__Lib_Math.c,126 :: 		
0x0076	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,127 :: 		
0x0078	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_Math.c,128 :: 		
0x007A	0x3C05      	INCFSZ      R5, 0, 0
;__Lib_Math.c,129 :: 		
0x007C	0x2609      	ADDWF       R9, 1, 0
;__Lib_Math.c,130 :: 		
0x007E	0x90D8      	BCF         STATUS, 0, 0
;__Lib_Math.c,131 :: 		
0x0080	0x3600      	RLCF        R0, 1, 0
;__Lib_Math.c,132 :: 		
0x0082	0x3601      	RLCF        R1, 1, 0
;__Lib_Math.c,133 :: 		
0x0084	0x2E0C      	DECFSZ      R12, 1, 0
;__Lib_Math.c,134 :: 		
0x0086	0xD7EA      	BRA         $-42
;__Lib_Math.c,136 :: 		
L_end_Div_16x16_U:
0x0088	0x0012      	RETURN      0
; end of _Div_16x16_U
_UART_Write:
;__Lib_UART_c67.c,119 :: 		
;__Lib_UART_c67.c,120 :: 		
0x008A	0xFFE1C157  	MOVFF       _UART_Wr_Ptr+2, FSR1L
0x008E	0xFFE2C158  	MOVFF       _UART_Wr_Ptr+3, FSR1H
0x0092	0xFFE6C185  	MOVFF       FARG_UART_Write__data, POSTINC1
0x0096	0xF000C155  	MOVFF       _UART_Wr_Ptr, R0
0x009A	0xF001C156  	MOVFF       _UART_Wr_Ptr+1, R1
0x009E	0xDFCE      	RCALL       _____DoIFC
;__Lib_UART_c67.c,121 :: 		
L_end_UART_Write:
0x00A0	0x0012      	RETURN      0
; end of _UART_Write
_WordToStr:
;__Lib_Conversions.c,84 :: 		
;__Lib_Conversions.c,89 :: 		
0x00A2	0x0101      	MOVLB       1
0x00A4	0x6B82      	CLRF        WordToStr_len_L0, 1
L_WordToStr6:
0x00A6	0x0E05      	MOVLW       5
0x00A8	0x5D82      	SUBWF       WordToStr_len_L0, 0, 1
0x00AA	0xE20A      	BC          L_WordToStr7
;__Lib_Conversions.c,90 :: 		
0x00AC	0x5182      	MOVF        WordToStr_len_L0, 0, 1
0x00AE	0x2580      	ADDWF       FARG_WordToStr_output, 0, 1
0x00B0	0x6EE1      	MOVWF       FSR1L 
0x00B2	0x0E00      	MOVLW       0
0x00B4	0x2181      	ADDWFC      FARG_WordToStr_output+1, 0, 1
0x00B6	0x6EE2      	MOVWF       FSR1H 
0x00B8	0x0E20      	MOVLW       32
0x00BA	0x6EE6      	MOVWF       POSTINC1 
;__Lib_Conversions.c,89 :: 		
0x00BC	0x2B82      	INCF        WordToStr_len_L0, 1, 1
;__Lib_Conversions.c,90 :: 		
0x00BE	0xD7F3      	BRA         L_WordToStr6
L_WordToStr7:
;__Lib_Conversions.c,91 :: 		
0x00C0	0x5182      	MOVF        WordToStr_len_L0, 0, 1
0x00C2	0x2580      	ADDWF       FARG_WordToStr_output, 0, 1
0x00C4	0x6EE1      	MOVWF       FSR1L 
0x00C6	0x0E00      	MOVLW       0
0x00C8	0x2181      	ADDWFC      FARG_WordToStr_output+1, 0, 1
0x00CA	0x6EE2      	MOVWF       FSR1H 
0x00CC	0x6AE6      	CLRF        POSTINC1 
0x00CE	0x0782      	DECF        WordToStr_len_L0, 1, 1
;__Lib_Conversions.c,93 :: 		
L_WordToStr9:
;__Lib_Conversions.c,94 :: 		
0x00D0	0x5182      	MOVF        WordToStr_len_L0, 0, 1
0x00D2	0x2580      	ADDWF       FARG_WordToStr_output, 0, 1
0x00D4	0x6F83      	MOVWF       FLOC__WordToStr, 1
0x00D6	0x0E00      	MOVLW       0
0x00D8	0x2181      	ADDWFC      FARG_WordToStr_output+1, 0, 1
0x00DA	0x6F84      	MOVWF       FLOC__WordToStr+1, 1
0x00DC	0x0E0A      	MOVLW       10
0x00DE	0x6E04      	MOVWF       R4 
0x00E0	0x0E00      	MOVLW       0
0x00E2	0x6E05      	MOVWF       R5 
0x00E4	0xF000C17E  	MOVFF       FARG_WordToStr_input, R0
0x00E8	0xF001C17F  	MOVFF       FARG_WordToStr_input+1, R1
0x00EC	0xDFB3      	RCALL       _Div_16x16_U
0x00EE	0xF000C008  	MOVFF       R8, R0
0x00F2	0xF001C009  	MOVFF       R9, R1
0x00F6	0x0E30      	MOVLW       48
0x00F8	0x2600      	ADDWF       R0, 1 
0x00FA	0xFFE1C183  	MOVFF       FLOC__WordToStr, FSR1L
0x00FE	0xFFE2C184  	MOVFF       FLOC__WordToStr+1, FSR1H
0x0102	0xFFE6C000  	MOVFF       R0, POSTINC1
;__Lib_Conversions.c,95 :: 		
0x0106	0x0E0A      	MOVLW       10
0x0108	0x6E04      	MOVWF       R4 
0x010A	0x0E00      	MOVLW       0
0x010C	0x6E05      	MOVWF       R5 
0x010E	0xF000C17E  	MOVFF       FARG_WordToStr_input, R0
0x0112	0xF001C17F  	MOVFF       FARG_WordToStr_input+1, R1
0x0116	0xDF9E      	RCALL       _Div_16x16_U
0x0118	0xF17EC000  	MOVFF       R0, FARG_WordToStr_input
0x011C	0xF17FC001  	MOVFF       R1, FARG_WordToStr_input+1
;__Lib_Conversions.c,96 :: 		
0x0120	0x0E00      	MOVLW       0
0x0122	0x1801      	XORWF       R1, 0 
0x0124	0xE102      	BNZ         L__WordToStr109
0x0126	0x0E00      	MOVLW       0
0x0128	0x1800      	XORWF       R0, 0 
L__WordToStr109:
0x012A	0xE101      	BNZ         L_WordToStr11
;__Lib_Conversions.c,97 :: 		
0x012C	0xD002      	BRA         L_WordToStr10
L_WordToStr11:
;__Lib_Conversions.c,98 :: 		
0x012E	0x0782      	DECF        WordToStr_len_L0, 1, 1
;__Lib_Conversions.c,99 :: 		
0x0130	0xD7CF      	BRA         L_WordToStr9
L_WordToStr10:
;__Lib_Conversions.c,100 :: 		
L_end_WordToStr:
0x0132	0x0012      	RETURN      0
; end of _WordToStr
_UART_Write_Text:
;__Lib_UART_c67.c,123 :: 		
;__Lib_UART_c67.c,124 :: 		
0x0134	0x0101      	MOVLB       1
0x0136	0x6B81      	CLRF        UART_Write_Text_counter_L0, 1
;__Lib_UART_c67.c,126 :: 		
0x0138	0xFFE9C17E  	MOVFF       FARG_UART_Write_Text_uart_text, FSR0L
0x013C	0xFFEAC17F  	MOVFF       FARG_UART_Write_Text_uart_text+1, FSR0H
0x0140	0xF180CFEE  	MOVFF       POSTINC0, UART_Write_Text_data__L0
;__Lib_UART_c67.c,127 :: 		
L_UART_Write_Text16:
0x0144	0x5180      	MOVF        UART_Write_Text_data__L0, 0, 1
0x0146	0x0A00      	XORLW       0
0x0148	0xE00E      	BZ          L_UART_Write_Text17
;__Lib_UART_c67.c,128 :: 		
0x014A	0xF185C180  	MOVFF       UART_Write_Text_data__L0, FARG_UART_Write__data
0x014E	0xDF9D      	RCALL       _UART_Write
;__Lib_UART_c67.c,129 :: 		
0x0150	0x0101      	MOVLB       1
0x0152	0x2B81      	INCF        UART_Write_Text_counter_L0, 1, 1
;__Lib_UART_c67.c,130 :: 		
0x0154	0x5181      	MOVF        UART_Write_Text_counter_L0, 0, 1
0x0156	0x257E      	ADDWF       FARG_UART_Write_Text_uart_text, 0, 1
0x0158	0x6EE9      	MOVWF       FSR0L 
0x015A	0x0E00      	MOVLW       0
0x015C	0x217F      	ADDWFC      FARG_UART_Write_Text_uart_text+1, 0, 1
0x015E	0x6EEA      	MOVWF       FSR0H 
0x0160	0xF180CFEE  	MOVFF       POSTINC0, UART_Write_Text_data__L0
;__Lib_UART_c67.c,131 :: 		
0x0164	0xD7EF      	BRA         L_UART_Write_Text16
L_UART_Write_Text17:
;__Lib_UART_c67.c,132 :: 		
L_end_UART_Write_Text:
0x0166	0x0012      	RETURN      0
; end of _UART_Write_Text
_SPI1_Read:
;__Lib_SPI_c345.c,67 :: 		
;__Lib_SPI_c345.c,68 :: 		
0x0168	0xFFC9C17E  	MOVFF       FARG_SPI1_Read_buffer, SSPBUF
;__Lib_SPI_c345.c,69 :: 		
L_SPI1_Read6:
0x016C	0xB0C7      	BTFSC       SSPSTAT, 0 
0x016E	0xD002      	BRA         L_SPI1_Read7
;__Lib_SPI_c345.c,70 :: 		
0x0170	0x0000      	NOP
0x0172	0xD7FC      	BRA         L_SPI1_Read6
L_SPI1_Read7:
;__Lib_SPI_c345.c,71 :: 		
0x0174	0xF000CFC9  	MOVFF       SSPBUF, R0
;__Lib_SPI_c345.c,72 :: 		
L_end_SPI1_Read:
0x0178	0x0012      	RETURN      0
; end of _SPI1_Read
_IntToStr:
;__Lib_Conversions.c,146 :: 		
;__Lib_Conversions.c,152 :: 		
0x017A	0x0101      	MOVLB       1
0x017C	0x6B7A      	CLRF        IntToStr_negative_L0, 1
0x017E	0x6B7B      	CLRF        IntToStr_negative_L0+1, 1
;__Lib_Conversions.c,153 :: 		
0x0180	0xF17CC174  	MOVFF       FARG_IntToStr_input, IntToStr_inword_L0
0x0184	0xF17DC175  	MOVFF       FARG_IntToStr_input+1, IntToStr_inword_L0+1
;__Lib_Conversions.c,154 :: 		
0x0188	0x0E80      	MOVLW       128
0x018A	0x1975      	XORWF       FARG_IntToStr_input+1, 0, 1
0x018C	0x6E00      	MOVWF       R0 
0x018E	0x0E80      	MOVLW       128
0x0190	0x5C00      	SUBWF       R0, 0 
0x0192	0xE102      	BNZ         L__IntToStr115
0x0194	0x0E00      	MOVLW       0
0x0196	0x5D74      	SUBWF       FARG_IntToStr_input, 0, 1
L__IntToStr115:
0x0198	0xE20B      	BC          L_IntToStr23
;__Lib_Conversions.c,155 :: 		
0x019A	0x0E01      	MOVLW       1
0x019C	0x6F7A      	MOVWF       IntToStr_negative_L0, 1
0x019E	0x0E00      	MOVLW       0
0x01A0	0x6F7B      	MOVWF       IntToStr_negative_L0+1, 1
;__Lib_Conversions.c,156 :: 		
0x01A2	0x5174      	MOVF        FARG_IntToStr_input, 0, 1
0x01A4	0x0800      	SUBLW       0
0x01A6	0x6F7C      	MOVWF       IntToStr_inword_L0, 1
0x01A8	0xF17DC175  	MOVFF       FARG_IntToStr_input+1, IntToStr_inword_L0+1
0x01AC	0x0E00      	MOVLW       0
0x01AE	0x577D      	SUBFWB      IntToStr_inword_L0+1, 1, 1
;__Lib_Conversions.c,157 :: 		
L_IntToStr23:
;__Lib_Conversions.c,158 :: 		
0x01B0	0xF17EC17C  	MOVFF       IntToStr_inword_L0, FARG_WordToStr_input
0x01B4	0xF17FC17D  	MOVFF       IntToStr_inword_L0+1, FARG_WordToStr_input+1
0x01B8	0xF180C176  	MOVFF       FARG_IntToStr_output, FARG_WordToStr_output
0x01BC	0xF181C177  	MOVFF       FARG_IntToStr_output+1, FARG_WordToStr_output+1
0x01C0	0xDF70      	RCALL       _WordToStr
;__Lib_Conversions.c,160 :: 		
0x01C2	0x0E06      	MOVLW       6
0x01C4	0x6F78      	MOVWF       IntToStr_i_L0, 1
0x01C6	0x0E00      	MOVLW       0
0x01C8	0x6F79      	MOVWF       IntToStr_i_L0+1, 1
;__Lib_Conversions.c,161 :: 		
L_IntToStr24:
0x01CA	0x0E00      	MOVLW       0
0x01CC	0x6E00      	MOVWF       R0 
0x01CE	0x5179      	MOVF        IntToStr_i_L0+1, 0, 1
0x01D0	0x5C00      	SUBWF       R0, 0 
0x01D2	0xE102      	BNZ         L__IntToStr116
0x01D4	0x5178      	MOVF        IntToStr_i_L0, 0, 1
0x01D6	0x0800      	SUBLW       0
L__IntToStr116:
0x01D8	0xE219      	BC          L_IntToStr25
;__Lib_Conversions.c,162 :: 		
0x01DA	0x5178      	MOVF        IntToStr_i_L0, 0, 1
0x01DC	0x2576      	ADDWF       FARG_IntToStr_output, 0, 1
0x01DE	0x6EE1      	MOVWF       FSR1L 
0x01E0	0x5179      	MOVF        IntToStr_i_L0+1, 0, 1
0x01E2	0x2177      	ADDWFC      FARG_IntToStr_output+1, 0, 1
0x01E4	0x6EE2      	MOVWF       FSR1H 
0x01E6	0x0E01      	MOVLW       1
0x01E8	0x5D78      	SUBWF       IntToStr_i_L0, 0, 1
0x01EA	0x6E00      	MOVWF       R0 
0x01EC	0x0E00      	MOVLW       0
0x01EE	0x5979      	SUBWFB      IntToStr_i_L0+1, 0, 1
0x01F0	0x6E01      	MOVWF       R1 
0x01F2	0x5000      	MOVF        R0, 0 
0x01F4	0x2576      	ADDWF       FARG_IntToStr_output, 0, 1
0x01F6	0x6EE9      	MOVWF       FSR0L 
0x01F8	0x5001      	MOVF        R1, 0 
0x01FA	0x2177      	ADDWFC      FARG_IntToStr_output+1, 0, 1
0x01FC	0x6EEA      	MOVWF       FSR0H 
0x01FE	0xFFE6CFEE  	MOVFF       POSTINC0, POSTINC1
;__Lib_Conversions.c,163 :: 		
0x0202	0x0E01      	MOVLW       1
0x0204	0x5F78      	SUBWF       IntToStr_i_L0, 1, 1
0x0206	0x0E00      	MOVLW       0
0x0208	0x5B79      	SUBWFB      IntToStr_i_L0+1, 1, 1
;__Lib_Conversions.c,164 :: 		
0x020A	0xD7DF      	BRA         L_IntToStr24
L_IntToStr25:
;__Lib_Conversions.c,165 :: 		
0x020C	0xFFE1C176  	MOVFF       FARG_IntToStr_output, FSR1L
0x0210	0xFFE2C177  	MOVFF       FARG_IntToStr_output+1, FSR1H
0x0214	0x0E20      	MOVLW       32
0x0216	0x6EE6      	MOVWF       POSTINC1 
;__Lib_Conversions.c,166 :: 		
0x0218	0x517A      	MOVF        IntToStr_negative_L0, 0, 1
0x021A	0x117B      	IORWF       IntToStr_negative_L0+1, 0, 1
0x021C	0xE01A      	BZ          L_IntToStr26
;__Lib_Conversions.c,167 :: 		
0x021E	0x6B78      	CLRF        IntToStr_i_L0, 1
0x0220	0x6B79      	CLRF        IntToStr_i_L0+1, 1
;__Lib_Conversions.c,168 :: 		
L_IntToStr27:
0x0222	0x5178      	MOVF        IntToStr_i_L0, 0, 1
0x0224	0x2576      	ADDWF       FARG_IntToStr_output, 0, 1
0x0226	0x6EE9      	MOVWF       FSR0L 
0x0228	0x5179      	MOVF        IntToStr_i_L0+1, 0, 1
0x022A	0x2177      	ADDWFC      FARG_IntToStr_output+1, 0, 1
0x022C	0x6EEA      	MOVWF       FSR0H 
0x022E	0x50EE      	MOVF        POSTINC0, 0 
0x0230	0x0A20      	XORLW       32
0x0232	0xE103      	BNZ         L_IntToStr28
0x0234	0x4B78      	INFSNZ      IntToStr_i_L0, 1, 1
0x0236	0x2B79      	INCF        IntToStr_i_L0+1, 1, 1
0x0238	0xD7F4      	BRA         L_IntToStr27
L_IntToStr28:
;__Lib_Conversions.c,169 :: 		
0x023A	0x0E01      	MOVLW       1
0x023C	0x5F78      	SUBWF       IntToStr_i_L0, 1, 1
0x023E	0x0E00      	MOVLW       0
0x0240	0x5B79      	SUBWFB      IntToStr_i_L0+1, 1, 1
;__Lib_Conversions.c,170 :: 		
0x0242	0x5178      	MOVF        IntToStr_i_L0, 0, 1
0x0244	0x2576      	ADDWF       FARG_IntToStr_output, 0, 1
0x0246	0x6EE1      	MOVWF       FSR1L 
0x0248	0x5179      	MOVF        IntToStr_i_L0+1, 0, 1
0x024A	0x2177      	ADDWFC      FARG_IntToStr_output+1, 0, 1
0x024C	0x6EE2      	MOVWF       FSR1H 
0x024E	0x0E2D      	MOVLW       45
0x0250	0x6EE6      	MOVWF       POSTINC1 
L_IntToStr26:
;__Lib_Conversions.c,171 :: 		
L_end_IntToStr:
0x0252	0x0012      	RETURN      0
; end of _IntToStr
_SPI1_Init_Advanced:
;__Lib_SPI_c345.c,40 :: 		
;__Lib_SPI_c345.c,41 :: 		
0x0254	0x0E68      	MOVLW       _SPI1_Read
0x0256	0x0101      	MOVLB       1
0x0258	0x6F63      	MOVWF       _SPI_Rd_Ptr, 1
0x025A	0x0E01      	MOVLW       hi_addr(_SPI1_Read)
0x025C	0x6F64      	MOVWF       _SPI_Rd_Ptr+1, 1
0x025E	0x0E7E      	MOVLW       FARG_SPI1_Read_buffer
0x0260	0x6F65      	MOVWF       _SPI_Rd_Ptr+2, 1
0x0262	0x0E01      	MOVLW       hi_addr(FARG_SPI1_Read_buffer)
0x0264	0x6F66      	MOVWF       _SPI_Rd_Ptr+3, 1
;__Lib_SPI_c345.c,42 :: 		
0x0266	0x0E2A      	MOVLW       _SPI1_Write
0x0268	0x6F5F      	MOVWF       _SPI_Wr_Ptr, 1
0x026A	0x0E00      	MOVLW       hi_addr(_SPI1_Write)
0x026C	0x6F60      	MOVWF       _SPI_Wr_Ptr+1, 1
0x026E	0x0E86      	MOVLW       FARG_SPI1_Write_data_
0x0270	0x6F61      	MOVWF       _SPI_Wr_Ptr+2, 1
0x0272	0x0E01      	MOVLW       hi_addr(FARG_SPI1_Write_data_)
0x0274	0x6F62      	MOVWF       _SPI_Wr_Ptr+3, 1
;__Lib_SPI_c345.c,44 :: 		
0x0276	0x9A94      	BCF         TRISC5_bit, BitPos(TRISC5_bit+0) 
;__Lib_SPI_c345.c,45 :: 		
0x0278	0x5174      	MOVF        FARG_SPI1_Init_Advanced_master, 0, 1
0x027A	0x0A04      	XORLW       4
0x027C	0xE102      	BNZ         L_SPI1_Init_Advanced0
0x027E	0x8694      	BSF         TRISC3_bit, BitPos(TRISC3_bit+0) 
0x0280	0xD001      	BRA         L_SPI1_Init_Advanced1
L_SPI1_Init_Advanced0:
;__Lib_SPI_c345.c,46 :: 		
0x0282	0x9694      	BCF         TRISC3_bit, BitPos(TRISC3_bit+0) 
L_SPI1_Init_Advanced1:
;__Lib_SPI_c345.c,47 :: 		
0x0284	0x8894      	BSF         TRISC4_bit, BitPos(TRISC4_bit+0) 
;__Lib_SPI_c345.c,49 :: 		
0x0286	0x6AC6      	CLRF        SSPCON1 
;__Lib_SPI_c345.c,50 :: 		
0x0288	0x5174      	MOVF        FARG_SPI1_Init_Advanced_master, 0, 1
0x028A	0x12C6      	IORWF       SSPCON1, 1 
;__Lib_SPI_c345.c,51 :: 		
0x028C	0x5176      	MOVF        FARG_SPI1_Init_Advanced_clock_idle, 0, 1
0x028E	0x12C6      	IORWF       SSPCON1, 1 
;__Lib_SPI_c345.c,52 :: 		
0x0290	0x5175      	MOVF        FARG_SPI1_Init_Advanced_data_sample, 0, 1
0x0292	0x12C7      	IORWF       SSPSTAT, 1 
;__Lib_SPI_c345.c,54 :: 		
0x0294	0x5376      	MOVF        FARG_SPI1_Init_Advanced_clock_idle, 1, 1
0x0296	0xE005      	BZ          L_SPI1_Init_Advanced2
;__Lib_SPI_c345.c,55 :: 		
0x0298	0x5177      	MOVF        FARG_SPI1_Init_Advanced_transmit_edge, 0, 1
0x029A	0x0A00      	XORLW       0
0x029C	0xB4D8      	BTFSC       STATUS, 2 
;__Lib_SPI_c345.c,56 :: 		
0x029E	0x8CC7      	BSF         SSPSTAT, 6 
L_SPI1_Init_Advanced3:
;__Lib_SPI_c345.c,57 :: 		
0x02A0	0xD003      	BRA         L_SPI1_Init_Advanced4
L_SPI1_Init_Advanced2:
;__Lib_SPI_c345.c,59 :: 		
0x02A2	0x5377      	MOVF        FARG_SPI1_Init_Advanced_transmit_edge, 1, 1
0x02A4	0xA4D8      	BTFSS       STATUS, 2 
;__Lib_SPI_c345.c,60 :: 		
0x02A6	0x8CC7      	BSF         SSPSTAT, 6 
L_SPI1_Init_Advanced5:
;__Lib_SPI_c345.c,61 :: 		
L_SPI1_Init_Advanced4:
;__Lib_SPI_c345.c,62 :: 		
0x02A8	0x8AC6      	BSF         SSPCON1, 5 
;__Lib_SPI_c345.c,63 :: 		
L_end_SPI1_Init_Advanced:
0x02AA	0x0012      	RETURN      0
; end of _SPI1_Init_Advanced
_command:
;soundrec.c,123 :: 		command(char command, uint32_t fourbyte_arg, char CRCbits)
;soundrec.c,125 :: 		spiWrite(0xff);
0x02AC	0x0EFF      	MOVLW       255
0x02AE	0x0101      	MOVLB       1
0x02B0	0x6F86      	MOVWF       FARG_SPI1_Write_data_, 1
0x02B2	0xDEBB      	RCALL       _SPI1_Write
;soundrec.c,126 :: 		spiWrite(0b01000000 | command);
0x02B4	0x0E40      	MOVLW       64
0x02B6	0x0101      	MOVLB       1
0x02B8	0x1174      	IORWF       FARG_command_command, 0, 1
0x02BA	0x6F86      	MOVWF       FARG_SPI1_Write_data_, 1
0x02BC	0xDEB6      	RCALL       _SPI1_Write
;soundrec.c,127 :: 		spiWrite((uint8_t) (fourbyte_arg >> 24));
0x02BE	0xF000C178  	MOVFF       FARG_command_fourbyte_arg+3, R0
0x02C2	0x6A01      	CLRF        R1 
0x02C4	0x6A02      	CLRF        R2 
0x02C6	0x6A03      	CLRF        R3 
0x02C8	0xF186C000  	MOVFF       R0, FARG_SPI1_Write_data_
0x02CC	0xDEAE      	RCALL       _SPI1_Write
;soundrec.c,128 :: 		spiWrite((uint8_t) (fourbyte_arg >> 16));
0x02CE	0xF000C177  	MOVFF       FARG_command_fourbyte_arg+2, R0
0x02D2	0xF001C178  	MOVFF       FARG_command_fourbyte_arg+3, R1
0x02D6	0x6A02      	CLRF        R2 
0x02D8	0x6A03      	CLRF        R3 
0x02DA	0xF186C000  	MOVFF       R0, FARG_SPI1_Write_data_
0x02DE	0xDEA5      	RCALL       _SPI1_Write
;soundrec.c,129 :: 		spiWrite((uint8_t) (fourbyte_arg >> 8));
0x02E0	0xF000C176  	MOVFF       FARG_command_fourbyte_arg+1, R0
0x02E4	0xF001C177  	MOVFF       FARG_command_fourbyte_arg+2, R1
0x02E8	0xF002C178  	MOVFF       FARG_command_fourbyte_arg+3, R2
0x02EC	0x6A03      	CLRF        R3 
0x02EE	0xF186C000  	MOVFF       R0, FARG_SPI1_Write_data_
0x02F2	0xDE9B      	RCALL       _SPI1_Write
;soundrec.c,130 :: 		spiWrite((uint8_t) (fourbyte_arg));
0x02F4	0xF186C175  	MOVFF       FARG_command_fourbyte_arg, FARG_SPI1_Write_data_
0x02F8	0xDE98      	RCALL       _SPI1_Write
;soundrec.c,131 :: 		spiWrite(CRCbits);
0x02FA	0xF186C179  	MOVFF       FARG_command_CRCbits, FARG_SPI1_Write_data_
0x02FE	0xDE95      	RCALL       _SPI1_Write
;soundrec.c,132 :: 		spiReadData = spiRead();
0x0300	0x0EFF      	MOVLW       255
0x0302	0x0101      	MOVLB       1
0x0304	0x6F7E      	MOVWF       FARG_SPI1_Read_buffer, 1
0x0306	0xDF30      	RCALL       _SPI1_Read
0x0308	0xF15EC000  	MOVFF       R0, _spiReadData
;soundrec.c,133 :: 		}
L_end_command:
0x030C	0x0012      	RETURN      0
; end of _command
_sendCMD:
;soundrec.c,305 :: 		sendCMD(uint8_t cmd, uint32_t arg)
;soundrec.c,307 :: 		uint8_t retryTimes = 0;
0x030E	0x0101      	MOVLB       1
0x0310	0x6B79      	CLRF        sendCMD_retryTimes_L0, 1
;soundrec.c,310 :: 		spiWrite(0xff);
0x0312	0x0EFF      	MOVLW       255
0x0314	0x6F86      	MOVWF       FARG_SPI1_Write_data_, 1
0x0316	0xDE89      	RCALL       _SPI1_Write
;soundrec.c,311 :: 		spiReadData = spiRead();
0x0318	0x0EFF      	MOVLW       255
0x031A	0x0101      	MOVLB       1
0x031C	0x6F7E      	MOVWF       FARG_SPI1_Read_buffer, 1
0x031E	0xDF24      	RCALL       _SPI1_Read
0x0320	0xF15EC000  	MOVFF       R0, _spiReadData
;soundrec.c,312 :: 		while (spiReadData != 0xff);
L_sendCMD63:
0x0324	0x0101      	MOVLB       1
0x0326	0x515E      	MOVF        _spiReadData, 0, 1
0x0328	0x0AFF      	XORLW       255
0x032A	0xE001      	BZ          L_sendCMD64
0x032C	0xD7FB      	BRA         L_sendCMD63
L_sendCMD64:
;soundrec.c,314 :: 		spiReadData = spiRead();
0x032E	0x0EFF      	MOVLW       255
0x0330	0x6F7E      	MOVWF       FARG_SPI1_Read_buffer, 1
0x0332	0xDF1A      	RCALL       _SPI1_Read
0x0334	0xF15EC000  	MOVFF       R0, _spiReadData
;soundrec.c,316 :: 		UWR("Card free!");
0x0338	0x0E38      	MOVLW       ?lstr21_soundrec
0x033A	0x0101      	MOVLB       1
0x033C	0x6F7E      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x033E	0x0E01      	MOVLW       hi_addr(?lstr21_soundrec)
0x0340	0x6F7F      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x0342	0xDEF8      	RCALL       _UART_Write_Text
0x0344	0x0E0D      	MOVLW       13
0x0346	0x6F85      	MOVWF       FARG_UART_Write__data, 1
0x0348	0xDEA0      	RCALL       _UART_Write
0x034A	0x0E0A      	MOVLW       10
0x034C	0x0101      	MOVLB       1
0x034E	0x6F85      	MOVWF       FARG_UART_Write__data, 1
0x0350	0xDE9C      	RCALL       _UART_Write
;soundrec.c,319 :: 		spiWrite(0b01000000 | cmd);
0x0352	0x0E40      	MOVLW       64
0x0354	0x0101      	MOVLB       1
0x0356	0x1174      	IORWF       FARG_sendCMD_cmd, 0, 1
0x0358	0x6F86      	MOVWF       FARG_SPI1_Write_data_, 1
0x035A	0xDE67      	RCALL       _SPI1_Write
;soundrec.c,320 :: 		spiWrite((uint8_t) (arg >> 24));
0x035C	0xF000C178  	MOVFF       FARG_sendCMD_arg+3, R0
0x0360	0x6A01      	CLRF        R1 
0x0362	0x6A02      	CLRF        R2 
0x0364	0x6A03      	CLRF        R3 
0x0366	0xF186C000  	MOVFF       R0, FARG_SPI1_Write_data_
0x036A	0xDE5F      	RCALL       _SPI1_Write
;soundrec.c,321 :: 		spiWrite((uint8_t) (arg >> 16));
0x036C	0xF000C177  	MOVFF       FARG_sendCMD_arg+2, R0
0x0370	0xF001C178  	MOVFF       FARG_sendCMD_arg+3, R1
0x0374	0x6A02      	CLRF        R2 
0x0376	0x6A03      	CLRF        R3 
0x0378	0xF186C000  	MOVFF       R0, FARG_SPI1_Write_data_
0x037C	0xDE56      	RCALL       _SPI1_Write
;soundrec.c,322 :: 		spiWrite((uint8_t) (arg >> 8));
0x037E	0xF000C176  	MOVFF       FARG_sendCMD_arg+1, R0
0x0382	0xF001C177  	MOVFF       FARG_sendCMD_arg+2, R1
0x0386	0xF002C178  	MOVFF       FARG_sendCMD_arg+3, R2
0x038A	0x6A03      	CLRF        R3 
0x038C	0xF186C000  	MOVFF       R0, FARG_SPI1_Write_data_
0x0390	0xDE4C      	RCALL       _SPI1_Write
;soundrec.c,323 :: 		spiWrite((uint8_t) arg);
0x0392	0xF186C175  	MOVFF       FARG_sendCMD_arg, FARG_SPI1_Write_data_
0x0396	0xDE49      	RCALL       _SPI1_Write
;soundrec.c,324 :: 		spiWrite(0x95); // default CRC
0x0398	0x0E95      	MOVLW       149
0x039A	0x0101      	MOVLB       1
0x039C	0x6F86      	MOVWF       FARG_SPI1_Write_data_, 1
0x039E	0xDE45      	RCALL       _SPI1_Write
;soundrec.c,325 :: 		spiReadData = spiRead();
0x03A0	0x0EFF      	MOVLW       255
0x03A2	0x0101      	MOVLB       1
0x03A4	0x6F7E      	MOVWF       FARG_SPI1_Read_buffer, 1
0x03A6	0xDEE0      	RCALL       _SPI1_Read
0x03A8	0xF15EC000  	MOVFF       R0, _spiReadData
;soundrec.c,327 :: 		while (retryTimes < 10)
L_sendCMD65:
0x03AC	0x0E0A      	MOVLW       10
0x03AE	0x0101      	MOVLB       1
0x03B0	0x5D79      	SUBWF       sendCMD_retryTimes_L0, 0, 1
0x03B2	0xE20C      	BC          L_sendCMD66
;soundrec.c,329 :: 		if (spiReadData == 0)
0x03B4	0x515E      	MOVF        _spiReadData, 0, 1
0x03B6	0x0A00      	XORLW       0
0x03B8	0xE101      	BNZ         L_sendCMD67
;soundrec.c,331 :: 		break;
0x03BA	0xD008      	BRA         L_sendCMD66
;soundrec.c,332 :: 		}
L_sendCMD67:
;soundrec.c,333 :: 		spiReadData = spiRead();
0x03BC	0x0EFF      	MOVLW       255
0x03BE	0x6F7E      	MOVWF       FARG_SPI1_Read_buffer, 1
0x03C0	0xDED3      	RCALL       _SPI1_Read
0x03C2	0xF15EC000  	MOVFF       R0, _spiReadData
;soundrec.c,334 :: 		retryTimes++;
0x03C6	0x0101      	MOVLB       1
0x03C8	0x2B79      	INCF        sendCMD_retryTimes_L0, 1, 1
;soundrec.c,335 :: 		}
0x03CA	0xD7F0      	BRA         L_sendCMD65
L_sendCMD66:
;soundrec.c,337 :: 		if (retryTimes >= 10)
0x03CC	0x0E0A      	MOVLW       10
0x03CE	0x5D79      	SUBWF       sendCMD_retryTimes_L0, 0, 1
0x03D0	0xE303      	BNC         L_sendCMD68
;soundrec.c,339 :: 		return 1; // command rejected
0x03D2	0x0E01      	MOVLW       1
0x03D4	0x6E00      	MOVWF       R0 
0x03D6	0xD001      	BRA         L_end_sendCMD
;soundrec.c,340 :: 		}
L_sendCMD68:
;soundrec.c,343 :: 		return 0; // command accepted
0x03D8	0x6A00      	CLRF        R0 
;soundrec.c,345 :: 		}
L_end_sendCMD:
0x03DA	0x0012      	RETURN      0
; end of _sendCMD
_UART1_Init:
;__Lib_UART_c67.c,15 :: 		
;__Lib_UART_c67.c,18 :: 		
0x03DC	0x0E1C      	MOVLW       _UART1_Write
0x03DE	0x0101      	MOVLB       1
0x03E0	0x6F55      	MOVWF       _UART_Wr_Ptr, 1
0x03E2	0x0E00      	MOVLW       hi_addr(_UART1_Write)
0x03E4	0x6F56      	MOVWF       _UART_Wr_Ptr+1, 1
0x03E6	0x0E86      	MOVLW       FARG_UART1_Write_data_
0x03E8	0x6F57      	MOVWF       _UART_Wr_Ptr+2, 1
0x03EA	0x0E01      	MOVLW       hi_addr(FARG_UART1_Write_data_)
0x03EC	0x6F58      	MOVWF       _UART_Wr_Ptr+3, 1
;__Lib_UART_c67.c,19 :: 		
0x03EE	0x0EFF      	MOVLW       _UART1_Read
0x03F0	0x6F4D      	MOVWF       _UART_Rd_Ptr, 1
0x03F2	0x0EFF      	MOVLW       hi_addr(_UART1_Read)
0x03F4	0x6F4E      	MOVWF       _UART_Rd_Ptr+1, 1
0x03F6	0x0E00      	MOVLW       0
0x03F8	0x6F4F      	MOVWF       _UART_Rd_Ptr+2, 1
0x03FA	0x0E00      	MOVLW       0
0x03FC	0x6F50      	MOVWF       _UART_Rd_Ptr+3, 1
;__Lib_UART_c67.c,20 :: 		
0x03FE	0x0EFF      	MOVLW       _UART1_Data_Ready
0x0400	0x6F51      	MOVWF       _UART_Rdy_Ptr, 1
0x0402	0x0EFF      	MOVLW       hi_addr(_UART1_Data_Ready)
0x0404	0x6F52      	MOVWF       _UART_Rdy_Ptr+1, 1
0x0406	0x0E00      	MOVLW       0
0x0408	0x6F53      	MOVWF       _UART_Rdy_Ptr+2, 1
0x040A	0x0E00      	MOVLW       0
0x040C	0x6F54      	MOVWF       _UART_Rdy_Ptr+3, 1
;__Lib_UART_c67.c,21 :: 		
0x040E	0x0EFF      	MOVLW       _UART1_Tx_Idle
0x0410	0x6F59      	MOVWF       _UART_Tx_Idle_Ptr, 1
0x0412	0x0EFF      	MOVLW       hi_addr(_UART1_Tx_Idle)
0x0414	0x6F5A      	MOVWF       _UART_Tx_Idle_Ptr+1, 1
0x0416	0x0E00      	MOVLW       0
0x0418	0x6F5B      	MOVWF       _UART_Tx_Idle_Ptr+2, 1
0x041A	0x0E00      	MOVLW       0
0x041C	0x6F5C      	MOVWF       _UART_Tx_Idle_Ptr+3, 1
;__Lib_UART_c67.c,23 :: 		
0x041E	0x8AAC      	BSF         TXSTA, 5 
;__Lib_UART_c67.c,24 :: 		
0x0420	0x0E90      	MOVLW       144
0x0422	0x6EAB      	MOVWF       RCSTA 
;__Lib_UART_c67.c,25 :: 		
0x0424	0x8E94      	BSF         TRISC7_bit, BitPos(TRISC7_bit+0) 
;__Lib_UART_c67.c,26 :: 		
0x0426	0x9C94      	BCF         TRISC6_bit, BitPos(TRISC6_bit+0) 
;__Lib_UART_c67.c,28 :: 		
L_UART1_Init0:
0x0428	0xAA9E      	BTFSS       PIR1, 5 
0x042A	0xD003      	BRA         L_UART1_Init1
;__Lib_UART_c67.c,29 :: 		
0x042C	0xF000CFAE  	MOVFF       RCREG, R0
0x0430	0xD7FB      	BRA         L_UART1_Init0
L_UART1_Init1:
;__Lib_UART_c67.c,30 :: 		
L_end_UART1_Init:
0x0432	0x0012      	RETURN      0
; end of _UART1_Init
___CC2DW:
;__Lib_System.c,21 :: 		
;__Lib_System.c,23 :: 		
_CC2DL_Loop1:
;__Lib_System.c,24 :: 		
0x0434	0x0009      	TBLRD*+
;__Lib_System.c,25 :: 		
0x0436	0xFFE6CFF5  	MOVFF       TABLAT, POSTINC1
;__Lib_System.c,26 :: 		
0x043A	0x0600      	DECF        R0, 1, 0
;__Lib_System.c,27 :: 		
0x043C	0xE1FB      	BNZ         _CC2DL_Loop1
;__Lib_System.c,28 :: 		
0x043E	0x0601      	DECF        R1, 1, 0
;__Lib_System.c,29 :: 		
0x0440	0xE1F9      	BNZ         _CC2DL_Loop1
;__Lib_System.c,31 :: 		
L_end___CC2DW:
0x0442	0x0012      	RETURN      0
; end of ___CC2DW
_mmcInit:
;soundrec.c,136 :: 		mmcInit(void)
;soundrec.c,140 :: 		_SPI_CLK_IDLE_LOW, _SPI_LOW_2_HIGH);
0x0444	0x0E02      	MOVLW       2
0x0446	0x0101      	MOVLB       1
0x0448	0x6F74      	MOVWF       FARG_SPI1_Init_Advanced_master, 1
0x044A	0x6B75      	CLRF        FARG_SPI1_Init_Advanced_data_sample, 1
0x044C	0x6B76      	CLRF        FARG_SPI1_Init_Advanced_clock_idle, 1
0x044E	0x0E01      	MOVLW       1
0x0450	0x6F77      	MOVWF       FARG_SPI1_Init_Advanced_transmit_edge, 1
0x0452	0xDF00      	RCALL       _SPI1_Init_Advanced
;soundrec.c,141 :: 		Delay_ms(2);
0x0454	0x0E0D      	MOVLW       13
0x0456	0x6E0C      	MOVWF       R12, 0
0x0458	0x0EFB      	MOVLW       251
0x045A	0x6E0D      	MOVWF       R13, 0
L_mmcInit9:
0x045C	0x2E0D      	DECFSZ      R13, 1, 0
0x045E	0xD7FE      	BRA         L_mmcInit9
0x0460	0x2E0C      	DECFSZ      R12, 1, 0
0x0462	0xD7FC      	BRA         L_mmcInit9
0x0464	0x0000      	NOP
0x0466	0x0000      	NOP
;soundrec.c,142 :: 		Mmc_Chip_Select = 1;
0x0468	0x848B      	BSF         LATC2_bit, BitPos(LATC2_bit+0) 
;soundrec.c,143 :: 		UWR("CS is HIGH!");
0x046A	0x0EA3      	MOVLW       ?lstr3_soundrec
0x046C	0x6F7E      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x046E	0x0E00      	MOVLW       hi_addr(?lstr3_soundrec)
0x0470	0x6F7F      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x0472	0xDE60      	RCALL       _UART_Write_Text
0x0474	0x0E0D      	MOVLW       13
0x0476	0x6F85      	MOVWF       FARG_UART_Write__data, 1
0x0478	0xDE08      	RCALL       _UART_Write
0x047A	0x0E0A      	MOVLW       10
0x047C	0x0101      	MOVLB       1
0x047E	0x6F85      	MOVWF       FARG_UART_Write__data, 1
0x0480	0xDE04      	RCALL       _UART_Write
;soundrec.c,144 :: 		for (u = 0; u < 10; u++)
0x0482	0x0101      	MOVLB       1
0x0484	0x6B68      	CLRF        mmcInit_u_L0, 1
L_mmcInit10:
0x0486	0x0E0A      	MOVLW       10
0x0488	0x5D68      	SUBWF       mmcInit_u_L0, 0, 1
0x048A	0xE206      	BC          L_mmcInit11
;soundrec.c,146 :: 		spiWrite(0xff);
0x048C	0x0EFF      	MOVLW       255
0x048E	0x6F86      	MOVWF       FARG_SPI1_Write_data_, 1
0x0490	0xDDCC      	RCALL       _SPI1_Write
;soundrec.c,144 :: 		for (u = 0; u < 10; u++)
0x0492	0x0101      	MOVLB       1
0x0494	0x2B68      	INCF        mmcInit_u_L0, 1, 1
;soundrec.c,147 :: 		}
0x0496	0xD7F7      	BRA         L_mmcInit10
L_mmcInit11:
;soundrec.c,148 :: 		UWR("Dummy clock sent!");
0x0498	0x0EEE      	MOVLW       ?lstr4_soundrec
0x049A	0x6F7E      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x049C	0x0E00      	MOVLW       hi_addr(?lstr4_soundrec)
0x049E	0x6F7F      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x04A0	0xDE49      	RCALL       _UART_Write_Text
0x04A2	0x0E0D      	MOVLW       13
0x04A4	0x6F85      	MOVWF       FARG_UART_Write__data, 1
0x04A6	0xDDF1      	RCALL       _UART_Write
0x04A8	0x0E0A      	MOVLW       10
0x04AA	0x0101      	MOVLB       1
0x04AC	0x6F85      	MOVWF       FARG_UART_Write__data, 1
0x04AE	0xDDED      	RCALL       _UART_Write
;soundrec.c,149 :: 		Mmc_Chip_Select = 0;
0x04B0	0x948B      	BCF         LATC2_bit, BitPos(LATC2_bit+0) 
;soundrec.c,150 :: 		UWR("CS is LOW!\n");
0x04B2	0x0E00      	MOVLW       ?lstr5_soundrec
0x04B4	0x0101      	MOVLB       1
0x04B6	0x6F7E      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x04B8	0x0E01      	MOVLW       hi_addr(?lstr5_soundrec)
0x04BA	0x6F7F      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x04BC	0xDE3B      	RCALL       _UART_Write_Text
0x04BE	0x0E0D      	MOVLW       13
0x04C0	0x6F85      	MOVWF       FARG_UART_Write__data, 1
0x04C2	0xDDE3      	RCALL       _UART_Write
0x04C4	0x0E0A      	MOVLW       10
0x04C6	0x0101      	MOVLB       1
0x04C8	0x6F85      	MOVWF       FARG_UART_Write__data, 1
0x04CA	0xDDDF      	RCALL       _UART_Write
;soundrec.c,151 :: 		Delay_ms(1);
0x04CC	0x0E07      	MOVLW       7
0x04CE	0x6E0C      	MOVWF       R12, 0
0x04D0	0x0E7D      	MOVLW       125
0x04D2	0x6E0D      	MOVWF       R13, 0
L_mmcInit13:
0x04D4	0x2E0D      	DECFSZ      R13, 1, 0
0x04D6	0xD7FE      	BRA         L_mmcInit13
0x04D8	0x2E0C      	DECFSZ      R12, 1, 0
0x04DA	0xD7FC      	BRA         L_mmcInit13
;soundrec.c,152 :: 		command(0, 0, 0x95);
0x04DC	0x0101      	MOVLB       1
0x04DE	0x6B74      	CLRF        FARG_command_command, 1
0x04E0	0x6B75      	CLRF        FARG_command_fourbyte_arg, 1
0x04E2	0x6B76      	CLRF        FARG_command_fourbyte_arg+1, 1
0x04E4	0x6B77      	CLRF        FARG_command_fourbyte_arg+2, 1
0x04E6	0x6B78      	CLRF        FARG_command_fourbyte_arg+3, 1
0x04E8	0x0E95      	MOVLW       149
0x04EA	0x6F79      	MOVWF       FARG_command_CRCbits, 1
0x04EC	0xDEDF      	RCALL       _command
;soundrec.c,153 :: 		UWR("CMD0 sent!");
0x04EE	0x0EE3      	MOVLW       ?lstr6_soundrec
0x04F0	0x0101      	MOVLB       1
0x04F2	0x6F7E      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x04F4	0x0E00      	MOVLW       hi_addr(?lstr6_soundrec)
0x04F6	0x6F7F      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x04F8	0xDE1D      	RCALL       _UART_Write_Text
0x04FA	0x0E0D      	MOVLW       13
0x04FC	0x6F85      	MOVWF       FARG_UART_Write__data, 1
0x04FE	0xDDC5      	RCALL       _UART_Write
0x0500	0x0E0A      	MOVLW       10
0x0502	0x0101      	MOVLB       1
0x0504	0x6F85      	MOVWF       FARG_UART_Write__data, 1
0x0506	0xDDC1      	RCALL       _UART_Write
;soundrec.c,154 :: 		count = 0;
0x0508	0x0101      	MOVLB       1
0x050A	0x6B5D      	CLRF        _count, 1
;soundrec.c,155 :: 		while ((spiReadData != 1) && (count < 10))
L_mmcInit14:
0x050C	0x515E      	MOVF        _spiReadData, 0, 1
0x050E	0x0A01      	XORLW       1
0x0510	0xE00F      	BZ          L_mmcInit15
0x0512	0x0E0A      	MOVLW       10
0x0514	0x5D5D      	SUBWF       _count, 0, 1
0x0516	0xE20C      	BC          L_mmcInit15
L__mmcInit156:
;soundrec.c,157 :: 		spiReadData = spiRead();
0x0518	0x0EFF      	MOVLW       255
0x051A	0x6F7E      	MOVWF       FARG_SPI1_Read_buffer, 1
0x051C	0xDE25      	RCALL       _SPI1_Read
0x051E	0xF15EC000  	MOVFF       R0, _spiReadData
;soundrec.c,158 :: 		count++;
0x0522	0x0101      	MOVLB       1
0x0524	0x515D      	MOVF        _count, 0, 1
0x0526	0x0F01      	ADDLW       1
0x0528	0x6E00      	MOVWF       R0 
0x052A	0xF15DC000  	MOVFF       R0, _count
;soundrec.c,159 :: 		}
0x052E	0xD7EE      	BRA         L_mmcInit14
L_mmcInit15:
;soundrec.c,160 :: 		if (count >= 10)
0x0530	0x0E0A      	MOVLW       10
0x0532	0x5D5D      	SUBWF       _count, 0, 1
0x0534	0xE30D      	BNC         L_mmcInit18
;soundrec.c,162 :: 		UWR("CARD ERROR - CMD0");
0x0536	0x0EBF      	MOVLW       ?lstr7_soundrec
0x0538	0x6F7E      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x053A	0x0E00      	MOVLW       hi_addr(?lstr7_soundrec)
0x053C	0x6F7F      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x053E	0xDDFA      	RCALL       _UART_Write_Text
0x0540	0x0E0D      	MOVLW       13
0x0542	0x6F85      	MOVWF       FARG_UART_Write__data, 1
0x0544	0xDDA2      	RCALL       _UART_Write
0x0546	0x0E0A      	MOVLW       10
0x0548	0x0101      	MOVLB       1
0x054A	0x6F85      	MOVWF       FARG_UART_Write__data, 1
0x054C	0xDD9E      	RCALL       _UART_Write
;soundrec.c,163 :: 		while (1); // Trap the CPU
L_mmcInit19:
0x054E	0xD7FF      	BRA         L_mmcInit19
;soundrec.c,164 :: 		}
L_mmcInit18:
;soundrec.c,165 :: 		command(1, 0, 0xff);
0x0550	0x0E01      	MOVLW       1
0x0552	0x0101      	MOVLB       1
0x0554	0x6F74      	MOVWF       FARG_command_command, 1
0x0556	0x6B75      	CLRF        FARG_command_fourbyte_arg, 1
0x0558	0x6B76      	CLRF        FARG_command_fourbyte_arg+1, 1
0x055A	0x6B77      	CLRF        FARG_command_fourbyte_arg+2, 1
0x055C	0x6B78      	CLRF        FARG_command_fourbyte_arg+3, 1
0x055E	0x0EFF      	MOVLW       255
0x0560	0x6F79      	MOVWF       FARG_command_CRCbits, 1
0x0562	0xDEA4      	RCALL       _command
;soundrec.c,166 :: 		count = 0;
0x0564	0x0101      	MOVLB       1
0x0566	0x6B5D      	CLRF        _count, 1
;soundrec.c,167 :: 		while ((spiReadData != 0) && (count < 1000))
L_mmcInit21:
0x0568	0x515E      	MOVF        _spiReadData, 0, 1
0x056A	0x0A00      	XORLW       0
0x056C	0xE01F      	BZ          L_mmcInit22
0x056E	0x0E80      	MOVLW       128
0x0570	0x6E00      	MOVWF       R0 
0x0572	0x0E80      	MOVLW       128
0x0574	0x0A03      	XORLW       3
0x0576	0x5C00      	SUBWF       R0, 0 
0x0578	0xE102      	BNZ         L__mmcInit163
0x057A	0x0EE8      	MOVLW       232
0x057C	0x5D5D      	SUBWF       _count, 0, 1
L__mmcInit163:
0x057E	0xE216      	BC          L_mmcInit22
L__mmcInit155:
;soundrec.c,169 :: 		command(1, 0, 0xff);
0x0580	0x0E01      	MOVLW       1
0x0582	0x6F74      	MOVWF       FARG_command_command, 1
0x0584	0x6B75      	CLRF        FARG_command_fourbyte_arg, 1
0x0586	0x6B76      	CLRF        FARG_command_fourbyte_arg+1, 1
0x0588	0x6B77      	CLRF        FARG_command_fourbyte_arg+2, 1
0x058A	0x6B78      	CLRF        FARG_command_fourbyte_arg+3, 1
0x058C	0x0EFF      	MOVLW       255
0x058E	0x6F79      	MOVWF       FARG_command_CRCbits, 1
0x0590	0xDE8D      	RCALL       _command
;soundrec.c,170 :: 		spiReadData = spiRead();
0x0592	0x0EFF      	MOVLW       255
0x0594	0x0101      	MOVLB       1
0x0596	0x6F7E      	MOVWF       FARG_SPI1_Read_buffer, 1
0x0598	0xDDE7      	RCALL       _SPI1_Read
0x059A	0xF15EC000  	MOVFF       R0, _spiReadData
;soundrec.c,171 :: 		count++;
0x059E	0x0101      	MOVLB       1
0x05A0	0x515D      	MOVF        _count, 0, 1
0x05A2	0x0F01      	ADDLW       1
0x05A4	0x6E00      	MOVWF       R0 
0x05A6	0xF15DC000  	MOVFF       R0, _count
;soundrec.c,172 :: 		}
0x05AA	0xD7DE      	BRA         L_mmcInit21
L_mmcInit22:
;soundrec.c,173 :: 		if (count >= 1000)
0x05AC	0x0E80      	MOVLW       128
0x05AE	0x6E00      	MOVWF       R0 
0x05B0	0x0E80      	MOVLW       128
0x05B2	0x0A03      	XORLW       3
0x05B4	0x5C00      	SUBWF       R0, 0 
0x05B6	0xE102      	BNZ         L__mmcInit164
0x05B8	0x0EE8      	MOVLW       232
0x05BA	0x5D5D      	SUBWF       _count, 0, 1
L__mmcInit164:
0x05BC	0xE30D      	BNC         L_mmcInit25
;soundrec.c,175 :: 		UWR("Card ERROR - CMD1");
0x05BE	0x0ED1      	MOVLW       ?lstr8_soundrec
0x05C0	0x6F7E      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x05C2	0x0E00      	MOVLW       hi_addr(?lstr8_soundrec)
0x05C4	0x6F7F      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x05C6	0xDDB6      	RCALL       _UART_Write_Text
0x05C8	0x0E0D      	MOVLW       13
0x05CA	0x6F85      	MOVWF       FARG_UART_Write__data, 1
0x05CC	0xDD5E      	RCALL       _UART_Write
0x05CE	0x0E0A      	MOVLW       10
0x05D0	0x0101      	MOVLB       1
0x05D2	0x6F85      	MOVWF       FARG_UART_Write__data, 1
0x05D4	0xDD5A      	RCALL       _UART_Write
;soundrec.c,176 :: 		while (1); // Trap the CPU
L_mmcInit26:
0x05D6	0xD7FF      	BRA         L_mmcInit26
;soundrec.c,177 :: 		}
L_mmcInit25:
;soundrec.c,178 :: 		command(16, 512, 0xff);
0x05D8	0x0E10      	MOVLW       16
0x05DA	0x0101      	MOVLB       1
0x05DC	0x6F74      	MOVWF       FARG_command_command, 1
0x05DE	0x0E00      	MOVLW       0
0x05E0	0x6F75      	MOVWF       FARG_command_fourbyte_arg, 1
0x05E2	0x0E02      	MOVLW       2
0x05E4	0x6F76      	MOVWF       FARG_command_fourbyte_arg+1, 1
0x05E6	0x0E00      	MOVLW       0
0x05E8	0x6F77      	MOVWF       FARG_command_fourbyte_arg+2, 1
0x05EA	0x6F78      	MOVWF       FARG_command_fourbyte_arg+3, 1
0x05EC	0x0EFF      	MOVLW       255
0x05EE	0x6F79      	MOVWF       FARG_command_CRCbits, 1
0x05F0	0xDE5D      	RCALL       _command
;soundrec.c,179 :: 		count = 0;
0x05F2	0x0101      	MOVLB       1
0x05F4	0x6B5D      	CLRF        _count, 1
;soundrec.c,180 :: 		while ((spiReadData != 0) && (count < 1000))
L_mmcInit28:
0x05F6	0x515E      	MOVF        _spiReadData, 0, 1
0x05F8	0x0A00      	XORLW       0
0x05FA	0xE015      	BZ          L_mmcInit29
0x05FC	0x0E80      	MOVLW       128
0x05FE	0x6E00      	MOVWF       R0 
0x0600	0x0E80      	MOVLW       128
0x0602	0x0A03      	XORLW       3
0x0604	0x5C00      	SUBWF       R0, 0 
0x0606	0xE102      	BNZ         L__mmcInit165
0x0608	0x0EE8      	MOVLW       232
0x060A	0x5D5D      	SUBWF       _count, 0, 1
L__mmcInit165:
0x060C	0xE20C      	BC          L_mmcInit29
L__mmcInit154:
;soundrec.c,182 :: 		spiReadData = spiRead();
0x060E	0x0EFF      	MOVLW       255
0x0610	0x6F7E      	MOVWF       FARG_SPI1_Read_buffer, 1
0x0612	0xDDAA      	RCALL       _SPI1_Read
0x0614	0xF15EC000  	MOVFF       R0, _spiReadData
;soundrec.c,183 :: 		count++;
0x0618	0x0101      	MOVLB       1
0x061A	0x515D      	MOVF        _count, 0, 1
0x061C	0x0F01      	ADDLW       1
0x061E	0x6E00      	MOVWF       R0 
0x0620	0xF15DC000  	MOVFF       R0, _count
;soundrec.c,184 :: 		}
0x0624	0xD7E8      	BRA         L_mmcInit28
L_mmcInit29:
;soundrec.c,185 :: 		if (count >= 1000)
0x0626	0x0E80      	MOVLW       128
0x0628	0x6E00      	MOVWF       R0 
0x062A	0x0E80      	MOVLW       128
0x062C	0x0A03      	XORLW       3
0x062E	0x5C00      	SUBWF       R0, 0 
0x0630	0xE102      	BNZ         L__mmcInit166
0x0632	0x0EE8      	MOVLW       232
0x0634	0x5D5D      	SUBWF       _count, 0, 1
L__mmcInit166:
0x0636	0xE30D      	BNC         L_mmcInit32
;soundrec.c,187 :: 		UWR("Card error - CMD16");
0x0638	0x0E17      	MOVLW       ?lstr9_soundrec
0x063A	0x6F7E      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x063C	0x0E01      	MOVLW       hi_addr(?lstr9_soundrec)
0x063E	0x6F7F      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x0640	0xDD79      	RCALL       _UART_Write_Text
0x0642	0x0E0D      	MOVLW       13
0x0644	0x6F85      	MOVWF       FARG_UART_Write__data, 1
0x0646	0xDD21      	RCALL       _UART_Write
0x0648	0x0E0A      	MOVLW       10
0x064A	0x0101      	MOVLB       1
0x064C	0x6F85      	MOVWF       FARG_UART_Write__data, 1
0x064E	0xDD1D      	RCALL       _UART_Write
;soundrec.c,188 :: 		while (1); // Trap the CPU
L_mmcInit33:
0x0650	0xD7FF      	BRA         L_mmcInit33
;soundrec.c,189 :: 		}
L_mmcInit32:
;soundrec.c,190 :: 		UWR("MMC Detected!");
0x0652	0x0E8D      	MOVLW       ?lstr10_soundrec
0x0654	0x0101      	MOVLB       1
0x0656	0x6F7E      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x0658	0x0E00      	MOVLW       hi_addr(?lstr10_soundrec)
0x065A	0x6F7F      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x065C	0xDD6B      	RCALL       _UART_Write_Text
0x065E	0x0E0D      	MOVLW       13
0x0660	0x6F85      	MOVWF       FARG_UART_Write__data, 1
0x0662	0xDD13      	RCALL       _UART_Write
0x0664	0x0E0A      	MOVLW       10
0x0666	0x0101      	MOVLB       1
0x0668	0x6F85      	MOVWF       FARG_UART_Write__data, 1
0x066A	0xDD0F      	RCALL       _UART_Write
;soundrec.c,194 :: 		Delay_ms(20);
0x066C	0x0E82      	MOVLW       130
0x066E	0x6E0C      	MOVWF       R12, 0
0x0670	0x0EDD      	MOVLW       221
0x0672	0x6E0D      	MOVWF       R13, 0
L_mmcInit35:
0x0674	0x2E0D      	DECFSZ      R13, 1, 0
0x0676	0xD7FE      	BRA         L_mmcInit35
0x0678	0x2E0C      	DECFSZ      R12, 1, 0
0x067A	0xD7FC      	BRA         L_mmcInit35
0x067C	0x0000      	NOP
0x067E	0x0000      	NOP
;soundrec.c,196 :: 		}
L_end_mmcInit:
0x0680	0x0012      	RETURN      0
; end of _mmcInit
_writeMultipleBlock:
;soundrec.c,348 :: 		writeMultipleBlock(void)
;soundrec.c,351 :: 		volatile uint8_t temp = 0;
0x0682	0x0101      	MOVLB       1
0x0684	0x6B71      	CLRF        writeMultipleBlock_temp_L0, 1
0x0686	0x6B72      	CLRF        writeMultipleBlock_rejected_L0, 1
0x0688	0x6B73      	CLRF        writeMultipleBlock_rejected_L0+1, 1
;soundrec.c,355 :: 		temp = 1;
0x068A	0x0E01      	MOVLW       1
0x068C	0x6F71      	MOVWF       writeMultipleBlock_temp_L0, 1
;soundrec.c,356 :: 		count = 0;
0x068E	0x6B5D      	CLRF        _count, 1
;soundrec.c,357 :: 		while (temp)
L_writeMultipleBlock70:
0x0690	0x0101      	MOVLB       1
0x0692	0x5371      	MOVF        writeMultipleBlock_temp_L0, 1, 1
0x0694	0xE024      	BZ          L_writeMultipleBlock71
;soundrec.c,359 :: 		temp = sendCMD(25, 0);
0x0696	0x0E19      	MOVLW       25
0x0698	0x6F74      	MOVWF       FARG_sendCMD_cmd, 1
0x069A	0x6B75      	CLRF        FARG_sendCMD_arg, 1
0x069C	0x6B76      	CLRF        FARG_sendCMD_arg+1, 1
0x069E	0x6B77      	CLRF        FARG_sendCMD_arg+2, 1
0x06A0	0x6B78      	CLRF        FARG_sendCMD_arg+3, 1
0x06A2	0xDE35      	RCALL       _sendCMD
0x06A4	0xF171C000  	MOVFF       R0, writeMultipleBlock_temp_L0
;soundrec.c,360 :: 		count++;
0x06A8	0x515D      	MOVF        _count, 0, 1
0x06AA	0x0F01      	ADDLW       1
0x06AC	0x6E00      	MOVWF       R0 
0x06AE	0xF15DC000  	MOVFF       R0, _count
;soundrec.c,361 :: 		IntToStr(count, text);
0x06B2	0xF174C15D  	MOVFF       _count, FARG_IntToStr_input
0x06B6	0x0E00      	MOVLW       0
0x06B8	0x6F75      	MOVWF       FARG_IntToStr_input+1, 1
0x06BA	0x0E6A      	MOVLW       writeMultipleBlock_text_L0
0x06BC	0x6F76      	MOVWF       FARG_IntToStr_output, 1
0x06BE	0x0E01      	MOVLW       hi_addr(writeMultipleBlock_text_L0)
0x06C0	0x6F77      	MOVWF       FARG_IntToStr_output+1, 1
0x06C2	0xDD5B      	RCALL       _IntToStr
;soundrec.c,362 :: 		UWR(text);
0x06C4	0x0E6A      	MOVLW       writeMultipleBlock_text_L0
0x06C6	0x6F7E      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x06C8	0x0E01      	MOVLW       hi_addr(writeMultipleBlock_text_L0)
0x06CA	0x6F7F      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x06CC	0xDD33      	RCALL       _UART_Write_Text
0x06CE	0x0E0D      	MOVLW       13
0x06D0	0x6F85      	MOVWF       FARG_UART_Write__data, 1
0x06D2	0xDCDB      	RCALL       _UART_Write
0x06D4	0x0E0A      	MOVLW       10
0x06D6	0x0101      	MOVLB       1
0x06D8	0x6F85      	MOVWF       FARG_UART_Write__data, 1
0x06DA	0xDCD7      	RCALL       _UART_Write
;soundrec.c,363 :: 		}
0x06DC	0xD7D9      	BRA         L_writeMultipleBlock70
L_writeMultipleBlock71:
;soundrec.c,364 :: 		UWR("Command accepted!");
0x06DE	0x0E5D      	MOVLW       ?lstr22_soundrec
0x06E0	0x0101      	MOVLB       1
0x06E2	0x6F7E      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x06E4	0x0E00      	MOVLW       hi_addr(?lstr22_soundrec)
0x06E6	0x6F7F      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x06E8	0xDD25      	RCALL       _UART_Write_Text
0x06EA	0x0E0D      	MOVLW       13
0x06EC	0x6F85      	MOVWF       FARG_UART_Write__data, 1
0x06EE	0xDCCD      	RCALL       _UART_Write
0x06F0	0x0E0A      	MOVLW       10
0x06F2	0x0101      	MOVLB       1
0x06F4	0x6F85      	MOVWF       FARG_UART_Write__data, 1
0x06F6	0xDCC9      	RCALL       _UART_Write
;soundrec.c,365 :: 		spiWrite(0xff);
0x06F8	0x0EFF      	MOVLW       255
0x06FA	0x0101      	MOVLB       1
0x06FC	0x6F86      	MOVWF       FARG_SPI1_Write_data_, 1
0x06FE	0xDC95      	RCALL       _SPI1_Write
;soundrec.c,366 :: 		spiWrite(0xff);
0x0700	0x0EFF      	MOVLW       255
0x0702	0x0101      	MOVLB       1
0x0704	0x6F86      	MOVWF       FARG_SPI1_Write_data_, 1
0x0706	0xDC91      	RCALL       _SPI1_Write
;soundrec.c,367 :: 		spiWrite(0xff); // Dummy clock
0x0708	0x0EFF      	MOVLW       255
0x070A	0x0101      	MOVLB       1
0x070C	0x6F86      	MOVWF       FARG_SPI1_Write_data_, 1
0x070E	0xDC8D      	RCALL       _SPI1_Write
;soundrec.c,368 :: 		while (SLCT) // repeat until Select button pressed
L_writeMultipleBlock72:
0x0710	0xA483      	BTFSS       RD2_bit, BitPos(RD2_bit+0) 
0x0712	0xD093      	BRA         L_writeMultipleBlock73
;soundrec.c,370 :: 		spiWrite(0b11111100); // Data token for CMD 25
0x0714	0x0EFC      	MOVLW       252
0x0716	0x0101      	MOVLB       1
0x0718	0x6F86      	MOVWF       FARG_SPI1_Write_data_, 1
0x071A	0xDC87      	RCALL       _SPI1_Write
;soundrec.c,371 :: 		for (g = 0; g < 512; g++)
0x071C	0x0101      	MOVLB       1
0x071E	0x6B68      	CLRF        writeMultipleBlock_g_L0, 1
0x0720	0x6B69      	CLRF        writeMultipleBlock_g_L0+1, 1
L_writeMultipleBlock74:
0x0722	0x0E02      	MOVLW       2
0x0724	0x5D69      	SUBWF       writeMultipleBlock_g_L0+1, 0, 1
0x0726	0xE102      	BNZ         L__writeMultipleBlock173
0x0728	0x0E00      	MOVLW       0
0x072A	0x5D68      	SUBWF       writeMultipleBlock_g_L0, 0, 1
L__writeMultipleBlock173:
0x072C	0xE22F      	BC          L_writeMultipleBlock75
;soundrec.c,373 :: 		spiWrite((uint8_t) g);
0x072E	0xF186C168  	MOVFF       writeMultipleBlock_g_L0, FARG_SPI1_Write_data_
0x0732	0xDC7B      	RCALL       _SPI1_Write
;soundrec.c,374 :: 		IntToStr(g, text);
0x0734	0xF174C168  	MOVFF       writeMultipleBlock_g_L0, FARG_IntToStr_input
0x0738	0xF175C169  	MOVFF       writeMultipleBlock_g_L0+1, FARG_IntToStr_input+1
0x073C	0x0E6A      	MOVLW       writeMultipleBlock_text_L0
0x073E	0x0101      	MOVLB       1
0x0740	0x6F76      	MOVWF       FARG_IntToStr_output, 1
0x0742	0x0E01      	MOVLW       hi_addr(writeMultipleBlock_text_L0)
0x0744	0x6F77      	MOVWF       FARG_IntToStr_output+1, 1
0x0746	0xDD19      	RCALL       _IntToStr
;soundrec.c,375 :: 		UWR(text);
0x0748	0x0E6A      	MOVLW       writeMultipleBlock_text_L0
0x074A	0x6F7E      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x074C	0x0E01      	MOVLW       hi_addr(writeMultipleBlock_text_L0)
0x074E	0x6F7F      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x0750	0xDCF1      	RCALL       _UART_Write_Text
0x0752	0x0E0D      	MOVLW       13
0x0754	0x6F85      	MOVWF       FARG_UART_Write__data, 1
0x0756	0xDC99      	RCALL       _UART_Write
0x0758	0x0E0A      	MOVLW       10
0x075A	0x0101      	MOVLB       1
0x075C	0x6F85      	MOVWF       FARG_UART_Write__data, 1
0x075E	0xDC95      	RCALL       _UART_Write
;soundrec.c,376 :: 		Delay_ms(2);
0x0760	0x0E0D      	MOVLW       13
0x0762	0x6E0C      	MOVWF       R12, 0
0x0764	0x0EFB      	MOVLW       251
0x0766	0x6E0D      	MOVWF       R13, 0
L_writeMultipleBlock77:
0x0768	0x2E0D      	DECFSZ      R13, 1, 0
0x076A	0xD7FE      	BRA         L_writeMultipleBlock77
0x076C	0x2E0C      	DECFSZ      R12, 1, 0
0x076E	0xD7FC      	BRA         L_writeMultipleBlock77
0x0770	0x0000      	NOP
0x0772	0x0000      	NOP
;soundrec.c,371 :: 		for (g = 0; g < 512; g++)
0x0774	0x0E01      	MOVLW       1
0x0776	0x0101      	MOVLB       1
0x0778	0x2568      	ADDWF       writeMultipleBlock_g_L0, 0, 1
0x077A	0x6E00      	MOVWF       R0 
0x077C	0x0E00      	MOVLW       0
0x077E	0x2169      	ADDWFC      writeMultipleBlock_g_L0+1, 0, 1
0x0780	0x6E01      	MOVWF       R1 
0x0782	0xF168C000  	MOVFF       R0, writeMultipleBlock_g_L0
0x0786	0xF169C001  	MOVFF       R1, writeMultipleBlock_g_L0+1
;soundrec.c,377 :: 		} // write a block of 512 bytes data
0x078A	0xD7CB      	BRA         L_writeMultipleBlock74
L_writeMultipleBlock75:
;soundrec.c,378 :: 		spiWrite(0xff);
0x078C	0x0EFF      	MOVLW       255
0x078E	0x6F86      	MOVWF       FARG_SPI1_Write_data_, 1
0x0790	0xDC4C      	RCALL       _SPI1_Write
;soundrec.c,379 :: 		spiWrite(0xff); // 2 bytes CRC
0x0792	0x0EFF      	MOVLW       255
0x0794	0x0101      	MOVLB       1
0x0796	0x6F86      	MOVWF       FARG_SPI1_Write_data_, 1
0x0798	0xDC48      	RCALL       _SPI1_Write
;soundrec.c,381 :: 		count = 0;
0x079A	0x0101      	MOVLB       1
0x079C	0x6B5D      	CLRF        _count, 1
;soundrec.c,382 :: 		while (count < 8)
L_writeMultipleBlock78:
0x079E	0x0E08      	MOVLW       8
0x07A0	0x5D5D      	SUBWF       _count, 0, 1
0x07A2	0xE220      	BC          L_writeMultipleBlock79
;soundrec.c,384 :: 		spiReadData = spiRead();
0x07A4	0x0EFF      	MOVLW       255
0x07A6	0x6F7E      	MOVWF       FARG_SPI1_Read_buffer, 1
0x07A8	0xDCDF      	RCALL       _SPI1_Read
0x07AA	0xF15EC000  	MOVFF       R0, _spiReadData
;soundrec.c,385 :: 		if ((spiReadData & 0b00011111) == 0x05)
0x07AE	0x0E1F      	MOVLW       31
0x07B0	0x0101      	MOVLB       1
0x07B2	0x155E      	ANDWF       _spiReadData, 0, 1
0x07B4	0x6E01      	MOVWF       R1 
0x07B6	0x5001      	MOVF        R1, 0 
0x07B8	0x0A05      	XORLW       5
0x07BA	0xE10D      	BNZ         L_writeMultipleBlock80
;soundrec.c,387 :: 		UWR("Data accepted!");
0x07BC	0x0E6F      	MOVLW       ?lstr23_soundrec
0x07BE	0x6F7E      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x07C0	0x0E00      	MOVLW       hi_addr(?lstr23_soundrec)
0x07C2	0x6F7F      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x07C4	0xDCB7      	RCALL       _UART_Write_Text
0x07C6	0x0E0D      	MOVLW       13
0x07C8	0x6F85      	MOVWF       FARG_UART_Write__data, 1
0x07CA	0xDC5F      	RCALL       _UART_Write
0x07CC	0x0E0A      	MOVLW       10
0x07CE	0x0101      	MOVLB       1
0x07D0	0x6F85      	MOVWF       FARG_UART_Write__data, 1
0x07D2	0xDC5B      	RCALL       _UART_Write
;soundrec.c,388 :: 		break;
0x07D4	0xD007      	BRA         L_writeMultipleBlock79
;soundrec.c,389 :: 		}
L_writeMultipleBlock80:
;soundrec.c,390 :: 		count++;
0x07D6	0x0101      	MOVLB       1
0x07D8	0x515D      	MOVF        _count, 0, 1
0x07DA	0x0F01      	ADDLW       1
0x07DC	0x6E00      	MOVWF       R0 
0x07DE	0xF15DC000  	MOVFF       R0, _count
;soundrec.c,391 :: 		}
0x07E2	0xD7DD      	BRA         L_writeMultipleBlock78
L_writeMultipleBlock79:
0x07E4	0x0101      	MOVLB       1
;soundrec.c,392 :: 		if (count >= 8)
0x07E6	0x0E08      	MOVLW       8
0x07E8	0x5D5D      	SUBWF       _count, 0, 1
0x07EA	0xE317      	BNC         L_writeMultipleBlock81
;soundrec.c,394 :: 		UWR("Data rejected!");
0x07EC	0x0E7E      	MOVLW       ?lstr24_soundrec
0x07EE	0x6F7E      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x07F0	0x0E00      	MOVLW       hi_addr(?lstr24_soundrec)
0x07F2	0x6F7F      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x07F4	0xDC9F      	RCALL       _UART_Write_Text
0x07F6	0x0E0D      	MOVLW       13
0x07F8	0x6F85      	MOVWF       FARG_UART_Write__data, 1
0x07FA	0xDC47      	RCALL       _UART_Write
0x07FC	0x0E0A      	MOVLW       10
0x07FE	0x0101      	MOVLB       1
0x0800	0x6F85      	MOVWF       FARG_UART_Write__data, 1
0x0802	0xDC43      	RCALL       _UART_Write
;soundrec.c,395 :: 		rejected++;
0x0804	0x0E01      	MOVLW       1
0x0806	0x0101      	MOVLB       1
0x0808	0x2572      	ADDWF       writeMultipleBlock_rejected_L0, 0, 1
0x080A	0x6E00      	MOVWF       R0 
0x080C	0x0E00      	MOVLW       0
0x080E	0x2173      	ADDWFC      writeMultipleBlock_rejected_L0+1, 0, 1
0x0810	0x6E01      	MOVWF       R1 
0x0812	0xF172C000  	MOVFF       R0, writeMultipleBlock_rejected_L0
0x0816	0xF173C001  	MOVFF       R1, writeMultipleBlock_rejected_L0+1
;soundrec.c,396 :: 		}
L_writeMultipleBlock81:
;soundrec.c,397 :: 		spiReadData = spiRead(); // check if the card is busy
0x081A	0x0EFF      	MOVLW       255
0x081C	0x6F7E      	MOVWF       FARG_SPI1_Read_buffer, 1
0x081E	0xDCA4      	RCALL       _SPI1_Read
0x0820	0xF15EC000  	MOVFF       R0, _spiReadData
;soundrec.c,398 :: 		while (spiReadData != 0xff)
L_writeMultipleBlock82:
0x0824	0x0101      	MOVLB       1
0x0826	0x515E      	MOVF        _spiReadData, 0, 1
0x0828	0x0AFF      	XORLW       255
0x082A	0xE006      	BZ          L_writeMultipleBlock83
;soundrec.c,400 :: 		spiReadData = spiRead();
0x082C	0x0EFF      	MOVLW       255
0x082E	0x6F7E      	MOVWF       FARG_SPI1_Read_buffer, 1
0x0830	0xDC9B      	RCALL       _SPI1_Read
0x0832	0xF15EC000  	MOVFF       R0, _spiReadData
;soundrec.c,401 :: 		}
0x0836	0xD7F6      	BRA         L_writeMultipleBlock82
L_writeMultipleBlock83:
;soundrec.c,402 :: 		}
0x0838	0xD76B      	BRA         L_writeMultipleBlock72
L_writeMultipleBlock73:
;soundrec.c,405 :: 		spiWrite(0b11111101);
0x083A	0x0EFD      	MOVLW       253
0x083C	0x0101      	MOVLB       1
0x083E	0x6F86      	MOVWF       FARG_SPI1_Write_data_, 1
0x0840	0xF000EC15  	CALL        _SPI1_Write, 0
;soundrec.c,406 :: 		spiWrite(0xff);
0x0844	0x0EFF      	MOVLW       255
0x0846	0x0101      	MOVLB       1
0x0848	0x6F86      	MOVWF       FARG_SPI1_Write_data_, 1
0x084A	0xF000EC15  	CALL        _SPI1_Write, 0
;soundrec.c,407 :: 		spiReadData = spiRead();
0x084E	0x0EFF      	MOVLW       255
0x0850	0x0101      	MOVLB       1
0x0852	0x6F7E      	MOVWF       FARG_SPI1_Read_buffer, 1
0x0854	0xDC89      	RCALL       _SPI1_Read
0x0856	0xF15EC000  	MOVFF       R0, _spiReadData
;soundrec.c,408 :: 		while (spiReadData != 0xff) // check if the card is busy
L_writeMultipleBlock84:
0x085A	0x0101      	MOVLB       1
0x085C	0x515E      	MOVF        _spiReadData, 0, 1
0x085E	0x0AFF      	XORLW       255
0x0860	0xE006      	BZ          L_writeMultipleBlock85
;soundrec.c,410 :: 		spiReadData = spiRead();
0x0862	0x0EFF      	MOVLW       255
0x0864	0x6F7E      	MOVWF       FARG_SPI1_Read_buffer, 1
0x0866	0xDC80      	RCALL       _SPI1_Read
0x0868	0xF15EC000  	MOVFF       R0, _spiReadData
;soundrec.c,411 :: 		}
0x086C	0xD7F6      	BRA         L_writeMultipleBlock84
L_writeMultipleBlock85:
;soundrec.c,412 :: 		UWR("DONE Writing!")
0x086E	0x0E4F      	MOVLW       ?lstr25_soundrec
0x0870	0x0101      	MOVLB       1
0x0872	0x6F7E      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x0874	0x0E00      	MOVLW       hi_addr(?lstr25_soundrec)
0x0876	0x6F7F      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x0878	0xDC5D      	RCALL       _UART_Write_Text
0x087A	0x0E0D      	MOVLW       13
0x087C	0x6F85      	MOVWF       FARG_UART_Write__data, 1
0x087E	0xDC05      	RCALL       _UART_Write
0x0880	0x0E0A      	MOVLW       10
0x0882	0x0101      	MOVLB       1
0x0884	0x6F85      	MOVWF       FARG_UART_Write__data, 1
0x0886	0xDC01      	RCALL       _UART_Write
;soundrec.c,413 :: 		IntToStr(rejected, text);
0x0888	0xF174C172  	MOVFF       writeMultipleBlock_rejected_L0, FARG_IntToStr_input
0x088C	0xF175C173  	MOVFF       writeMultipleBlock_rejected_L0+1, FARG_IntToStr_input+1
0x0890	0x0E6A      	MOVLW       writeMultipleBlock_text_L0
0x0892	0x0101      	MOVLB       1
0x0894	0x6F76      	MOVWF       FARG_IntToStr_output, 1
0x0896	0x0E01      	MOVLW       hi_addr(writeMultipleBlock_text_L0)
0x0898	0x6F77      	MOVWF       FARG_IntToStr_output+1, 1
0x089A	0xDC6F      	RCALL       _IntToStr
;soundrec.c,414 :: 		UWR(text); // Print out number of recjected sector
0x089C	0x0E6A      	MOVLW       writeMultipleBlock_text_L0
0x089E	0x6F7E      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x08A0	0x0E01      	MOVLW       hi_addr(writeMultipleBlock_text_L0)
0x08A2	0x6F7F      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x08A4	0xDC47      	RCALL       _UART_Write_Text
0x08A6	0x0E0D      	MOVLW       13
0x08A8	0x6F85      	MOVWF       FARG_UART_Write__data, 1
0x08AA	0xF000EC45  	CALL        _UART_Write, 0
0x08AE	0x0E0A      	MOVLW       10
0x08B0	0x0101      	MOVLB       1
0x08B2	0x6F85      	MOVWF       FARG_UART_Write__data, 1
0x08B4	0xF000EC45  	CALL        _UART_Write, 0
;soundrec.c,415 :: 		}
L_end_writeMultipleBlock:
0x08B8	0x0012      	RETURN      0
; end of _writeMultipleBlock
_readMultipleBlock:
;soundrec.c,419 :: 		readMultipleBlock(void)
;soundrec.c,424 :: 		do
L_readMultipleBlock86:
;soundrec.c,426 :: 		spiReadData = spiRead();
0x08BA	0x0EFF      	MOVLW       255
0x08BC	0x0101      	MOVLB       1
0x08BE	0x6F7E      	MOVWF       FARG_SPI1_Read_buffer, 1
0x08C0	0xDC53      	RCALL       _SPI1_Read
0x08C2	0xF15EC000  	MOVFF       R0, _spiReadData
;soundrec.c,428 :: 		while (spiReadData != 0xff);
0x08C6	0x0101      	MOVLB       1
0x08C8	0x515E      	MOVF        _spiReadData, 0, 1
0x08CA	0x0AFF      	XORLW       255
0x08CC	0xE1F6      	BNZ         L_readMultipleBlock86
;soundrec.c,430 :: 		command(18, arg, 0x95);
0x08CE	0x0E12      	MOVLW       18
0x08D0	0x6F74      	MOVWF       FARG_command_command, 1
0x08D2	0xF175C015  	MOVFF       _arg, FARG_command_fourbyte_arg
0x08D6	0xF176C016  	MOVFF       _arg+1, FARG_command_fourbyte_arg+1
0x08DA	0xF177C017  	MOVFF       _arg+2, FARG_command_fourbyte_arg+2
0x08DE	0xF178C018  	MOVFF       _arg+3, FARG_command_fourbyte_arg+3
0x08E2	0x0E95      	MOVLW       149
0x08E4	0x6F79      	MOVWF       FARG_command_CRCbits, 1
0x08E6	0xDCE2      	RCALL       _command
;soundrec.c,431 :: 		count = 0;
0x08E8	0x0101      	MOVLB       1
0x08EA	0x6B5D      	CLRF        _count, 1
;soundrec.c,432 :: 		do // verify R1 respond
L_readMultipleBlock89:
;soundrec.c,434 :: 		if (spiReadData == 0)
0x08EC	0x515E      	MOVF        _spiReadData, 0, 1
0x08EE	0x0A00      	XORLW       0
0x08F0	0xE10F      	BNZ         L_readMultipleBlock92
;soundrec.c,436 :: 		UWR("Command accepted!");
0x08F2	0x0E3D      	MOVLW       ?lstr26_soundrec
0x08F4	0x6F7E      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x08F6	0x0E00      	MOVLW       hi_addr(?lstr26_soundrec)
0x08F8	0x6F7F      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x08FA	0xDC1C      	RCALL       _UART_Write_Text
0x08FC	0x0E0D      	MOVLW       13
0x08FE	0x6F85      	MOVWF       FARG_UART_Write__data, 1
0x0900	0xF000EC45  	CALL        _UART_Write, 0
0x0904	0x0E0A      	MOVLW       10
0x0906	0x0101      	MOVLB       1
0x0908	0x6F85      	MOVWF       FARG_UART_Write__data, 1
0x090A	0xF000EC45  	CALL        _UART_Write, 0
;soundrec.c,437 :: 		break;
0x090E	0xD00F      	BRA         L_readMultipleBlock90
;soundrec.c,438 :: 		}
L_readMultipleBlock92:
;soundrec.c,439 :: 		spiReadData = spiRead();
0x0910	0x0EFF      	MOVLW       255
0x0912	0x0101      	MOVLB       1
0x0914	0x6F7E      	MOVWF       FARG_SPI1_Read_buffer, 1
0x0916	0xDC28      	RCALL       _SPI1_Read
0x0918	0xF15EC000  	MOVFF       R0, _spiReadData
;soundrec.c,440 :: 		count++;
0x091C	0x0101      	MOVLB       1
0x091E	0x515D      	MOVF        _count, 0, 1
0x0920	0x0F01      	ADDLW       1
0x0922	0x6E00      	MOVWF       R0 
0x0924	0xF15DC000  	MOVFF       R0, _count
;soundrec.c,442 :: 		while (count < 10);
0x0928	0x0E0A      	MOVLW       10
0x092A	0x5D5D      	SUBWF       _count, 0, 1
0x092C	0xE3DF      	BNC         L_readMultipleBlock89
L_readMultipleBlock90:
0x092E	0x0101      	MOVLB       1
;soundrec.c,443 :: 		if (count >= 10)
0x0930	0x0E0A      	MOVLW       10
0x0932	0x5D5D      	SUBWF       _count, 0, 1
0x0934	0xE310      	BNC         L_readMultipleBlock93
;soundrec.c,445 :: 		UWR("Command Rejected!");
0x0936	0x0E19      	MOVLW       ?lstr27_soundrec
0x0938	0x6F7E      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x093A	0x0E00      	MOVLW       hi_addr(?lstr27_soundrec)
0x093C	0x6F7F      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x093E	0xF000EC9A  	CALL        _UART_Write_Text, 0
0x0942	0x0E0D      	MOVLW       13
0x0944	0x6F85      	MOVWF       FARG_UART_Write__data, 1
0x0946	0xF000EC45  	CALL        _UART_Write, 0
0x094A	0x0E0A      	MOVLW       10
0x094C	0x0101      	MOVLB       1
0x094E	0x6F85      	MOVWF       FARG_UART_Write__data, 1
0x0950	0xF000EC45  	CALL        _UART_Write, 0
;soundrec.c,446 :: 		while (1); // Trap the CPU
L_readMultipleBlock94:
0x0954	0xD7FF      	BRA         L_readMultipleBlock94
;soundrec.c,447 :: 		}
L_readMultipleBlock93:
;soundrec.c,448 :: 		while (SLCT) // play until SLCT button pressed
L_readMultipleBlock96:
0x0956	0xA483      	BTFSS       RD2_bit, BitPos(RD2_bit+0) 
0x0958	0xD056      	BRA         L_readMultipleBlock97
;soundrec.c,451 :: 		do
L_readMultipleBlock98:
;soundrec.c,453 :: 		spiReadData = spiRead();
0x095A	0x0EFF      	MOVLW       255
0x095C	0x0101      	MOVLB       1
0x095E	0x6F7E      	MOVWF       FARG_SPI1_Read_buffer, 1
0x0960	0xDC03      	RCALL       _SPI1_Read
0x0962	0xF15EC000  	MOVFF       R0, _spiReadData
;soundrec.c,455 :: 		while (spiReadData != 0xfe);
0x0966	0x0101      	MOVLB       1
0x0968	0x515E      	MOVF        _spiReadData, 0, 1
0x096A	0x0AFE      	XORLW       254
0x096C	0xE1F6      	BNZ         L_readMultipleBlock98
;soundrec.c,457 :: 		for (g = 0; g < 512; g++)
0x096E	0x6B68      	CLRF        readMultipleBlock_g_L0, 1
0x0970	0x6B69      	CLRF        readMultipleBlock_g_L0+1, 1
L_readMultipleBlock101:
0x0972	0x0E02      	MOVLW       2
0x0974	0x5D69      	SUBWF       readMultipleBlock_g_L0+1, 0, 1
0x0976	0xE102      	BNZ         L__readMultipleBlock175
0x0978	0x0E00      	MOVLW       0
0x097A	0x5D68      	SUBWF       readMultipleBlock_g_L0, 0, 1
L__readMultipleBlock175:
0x097C	0xE236      	BC          L_readMultipleBlock102
;soundrec.c,459 :: 		spiReadData = spiRead();
0x097E	0x0EFF      	MOVLW       255
0x0980	0x6F7E      	MOVWF       FARG_SPI1_Read_buffer, 1
0x0982	0xF000ECB4  	CALL        _SPI1_Read, 0
0x0986	0xF15EC000  	MOVFF       R0, _spiReadData
;soundrec.c,460 :: 		IntToStr(spiReadData, text);
0x098A	0xF174C15E  	MOVFF       _spiReadData, FARG_IntToStr_input
0x098E	0x0E00      	MOVLW       0
0x0990	0x0101      	MOVLB       1
0x0992	0x6F75      	MOVWF       FARG_IntToStr_input+1, 1
0x0994	0x0E6A      	MOVLW       readMultipleBlock_text_L0
0x0996	0x6F76      	MOVWF       FARG_IntToStr_output, 1
0x0998	0x0E01      	MOVLW       hi_addr(readMultipleBlock_text_L0)
0x099A	0x6F77      	MOVWF       FARG_IntToStr_output+1, 1
0x099C	0xF000ECBD  	CALL        _IntToStr, 0
;soundrec.c,461 :: 		UWR(text);
0x09A0	0x0E6A      	MOVLW       readMultipleBlock_text_L0
0x09A2	0x6F7E      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x09A4	0x0E01      	MOVLW       hi_addr(readMultipleBlock_text_L0)
0x09A6	0x6F7F      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x09A8	0xF000EC9A  	CALL        _UART_Write_Text, 0
0x09AC	0x0E0D      	MOVLW       13
0x09AE	0x6F85      	MOVWF       FARG_UART_Write__data, 1
0x09B0	0xF000EC45  	CALL        _UART_Write, 0
0x09B4	0x0E0A      	MOVLW       10
0x09B6	0x0101      	MOVLB       1
0x09B8	0x6F85      	MOVWF       FARG_UART_Write__data, 1
0x09BA	0xF000EC45  	CALL        _UART_Write, 0
;soundrec.c,462 :: 		Delay_ms(2);
0x09BE	0x0E0D      	MOVLW       13
0x09C0	0x6E0C      	MOVWF       R12, 0
0x09C2	0x0EFB      	MOVLW       251
0x09C4	0x6E0D      	MOVWF       R13, 0
L_readMultipleBlock104:
0x09C6	0x2E0D      	DECFSZ      R13, 1, 0
0x09C8	0xD7FE      	BRA         L_readMultipleBlock104
0x09CA	0x2E0C      	DECFSZ      R12, 1, 0
0x09CC	0xD7FC      	BRA         L_readMultipleBlock104
0x09CE	0x0000      	NOP
0x09D0	0x0000      	NOP
;soundrec.c,457 :: 		for (g = 0; g < 512; g++)
0x09D2	0x0E01      	MOVLW       1
0x09D4	0x0101      	MOVLB       1
0x09D6	0x2568      	ADDWF       readMultipleBlock_g_L0, 0, 1
0x09D8	0x6E00      	MOVWF       R0 
0x09DA	0x0E00      	MOVLW       0
0x09DC	0x2169      	ADDWFC      readMultipleBlock_g_L0+1, 0, 1
0x09DE	0x6E01      	MOVWF       R1 
0x09E0	0xF168C000  	MOVFF       R0, readMultipleBlock_g_L0
0x09E4	0xF169C001  	MOVFF       R1, readMultipleBlock_g_L0+1
;soundrec.c,463 :: 		}
0x09E8	0xD7C4      	BRA         L_readMultipleBlock101
L_readMultipleBlock102:
;soundrec.c,465 :: 		spiReadData = spiRead();
0x09EA	0x0EFF      	MOVLW       255
0x09EC	0x6F7E      	MOVWF       FARG_SPI1_Read_buffer, 1
0x09EE	0xF000ECB4  	CALL        _SPI1_Read, 0
0x09F2	0xF15EC000  	MOVFF       R0, _spiReadData
;soundrec.c,466 :: 		spiReadData = spiRead();
0x09F6	0x0EFF      	MOVLW       255
0x09F8	0x0101      	MOVLB       1
0x09FA	0x6F7E      	MOVWF       FARG_SPI1_Read_buffer, 1
0x09FC	0xF000ECB4  	CALL        _SPI1_Read, 0
0x0A00	0xF15EC000  	MOVFF       R0, _spiReadData
;soundrec.c,467 :: 		}
0x0A04	0xD7A8      	BRA         L_readMultipleBlock96
L_readMultipleBlock97:
;soundrec.c,470 :: 		command(12, 0, 0x95);
0x0A06	0x0E0C      	MOVLW       12
0x0A08	0x0101      	MOVLB       1
0x0A0A	0x6F74      	MOVWF       FARG_command_command, 1
0x0A0C	0x6B75      	CLRF        FARG_command_fourbyte_arg, 1
0x0A0E	0x6B76      	CLRF        FARG_command_fourbyte_arg+1, 1
0x0A10	0x6B77      	CLRF        FARG_command_fourbyte_arg+2, 1
0x0A12	0x6B78      	CLRF        FARG_command_fourbyte_arg+3, 1
0x0A14	0x0E95      	MOVLW       149
0x0A16	0x6F79      	MOVWF       FARG_command_CRCbits, 1
0x0A18	0xDC49      	RCALL       _command
;soundrec.c,471 :: 		count = 0;
0x0A1A	0x0101      	MOVLB       1
0x0A1C	0x6B5D      	CLRF        _count, 1
;soundrec.c,472 :: 		do
L_readMultipleBlock105:
;soundrec.c,474 :: 		if (spiReadData == 0)
0x0A1E	0x515E      	MOVF        _spiReadData, 0, 1
0x0A20	0x0A00      	XORLW       0
0x0A22	0xE110      	BNZ         L_readMultipleBlock108
;soundrec.c,476 :: 		UWR("Stopped Transfer!");
0x0A24	0x0E2B      	MOVLW       ?lstr28_soundrec
0x0A26	0x6F7E      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x0A28	0x0E00      	MOVLW       hi_addr(?lstr28_soundrec)
0x0A2A	0x6F7F      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x0A2C	0xF000EC9A  	CALL        _UART_Write_Text, 0
0x0A30	0x0E0D      	MOVLW       13
0x0A32	0x6F85      	MOVWF       FARG_UART_Write__data, 1
0x0A34	0xF000EC45  	CALL        _UART_Write, 0
0x0A38	0x0E0A      	MOVLW       10
0x0A3A	0x0101      	MOVLB       1
0x0A3C	0x6F85      	MOVWF       FARG_UART_Write__data, 1
0x0A3E	0xF000EC45  	CALL        _UART_Write, 0
;soundrec.c,477 :: 		break;
0x0A42	0xD010      	BRA         L_readMultipleBlock106
;soundrec.c,478 :: 		}
L_readMultipleBlock108:
;soundrec.c,479 :: 		spiReadData = spiRead();
0x0A44	0x0EFF      	MOVLW       255
0x0A46	0x0101      	MOVLB       1
0x0A48	0x6F7E      	MOVWF       FARG_SPI1_Read_buffer, 1
0x0A4A	0xF000ECB4  	CALL        _SPI1_Read, 0
0x0A4E	0xF15EC000  	MOVFF       R0, _spiReadData
;soundrec.c,480 :: 		count++;
0x0A52	0x0101      	MOVLB       1
0x0A54	0x515D      	MOVF        _count, 0, 1
0x0A56	0x0F01      	ADDLW       1
0x0A58	0x6E00      	MOVWF       R0 
0x0A5A	0xF15DC000  	MOVFF       R0, _count
;soundrec.c,482 :: 		while (count < 10);
0x0A5E	0x0E0A      	MOVLW       10
0x0A60	0x5D5D      	SUBWF       _count, 0, 1
0x0A62	0xE3DD      	BNC         L_readMultipleBlock105
L_readMultipleBlock106:
;soundrec.c,484 :: 		do
L_readMultipleBlock109:
0x0A64	0x0101      	MOVLB       1
;soundrec.c,486 :: 		spiReadData = spiRead();
0x0A66	0x0EFF      	MOVLW       255
0x0A68	0x6F7E      	MOVWF       FARG_SPI1_Read_buffer, 1
0x0A6A	0xF000ECB4  	CALL        _SPI1_Read, 0
0x0A6E	0xF15EC000  	MOVFF       R0, _spiReadData
;soundrec.c,488 :: 		while (spiReadData != 0xff);
0x0A72	0x0101      	MOVLB       1
0x0A74	0x515E      	MOVF        _spiReadData, 0, 1
0x0A76	0x0AFF      	XORLW       255
0x0A78	0xE1F5      	BNZ         L_readMultipleBlock109
;soundrec.c,489 :: 		UWR("Card free!");
0x0A7A	0x0E0C      	MOVLW       ?lstr29_soundrec
0x0A7C	0x6F7E      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x0A7E	0x0E01      	MOVLW       hi_addr(?lstr29_soundrec)
0x0A80	0x6F7F      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x0A82	0xF000EC9A  	CALL        _UART_Write_Text, 0
0x0A86	0x0E0D      	MOVLW       13
0x0A88	0x6F85      	MOVWF       FARG_UART_Write__data, 1
0x0A8A	0xF000EC45  	CALL        _UART_Write, 0
0x0A8E	0x0E0A      	MOVLW       10
0x0A90	0x0101      	MOVLB       1
0x0A92	0x6F85      	MOVWF       FARG_UART_Write__data, 1
0x0A94	0xF000EC45  	CALL        _UART_Write, 0
;soundrec.c,490 :: 		while (1); // Trap the CPU
L_readMultipleBlock112:
0x0A98	0xD7FF      	BRA         L_readMultipleBlock112
;soundrec.c,491 :: 		}
L_end_readMultipleBlock:
0x0A9A	0x0012      	RETURN      0
; end of _readMultipleBlock
_main:
0x0A9C	0xF006ECD4  	CALL        3496, 0
;soundrec.c,566 :: 		void main()
;soundrec.c,573 :: 		ADCON1 |= 0x0e; // AIN0 as analog input
0x0AA0	0x0E0E      	MOVLW       14
0x0AA2	0x12C1      	IORWF       ADCON1, 1 
;soundrec.c,574 :: 		ADCON2 |= 0x2d; // 12 Tad and FOSC/16
0x0AA4	0x0E2D      	MOVLW       45
0x0AA6	0x12C0      	IORWF       ADCON2, 1 
;soundrec.c,575 :: 		ADFM_bit = 0; // Left justified
0x0AA8	0x9EC0      	BCF         ADFM_bit, BitPos(ADFM_bit+0) 
;soundrec.c,576 :: 		ADON_bit = 1; // Enable ADC module
0x0AAA	0x80C2      	BSF         ADON_bit, BitPos(ADON_bit+0) 
;soundrec.c,577 :: 		Delay_ms(100);
0x0AAC	0x0E03      	MOVLW       3
0x0AAE	0x6E0B      	MOVWF       R11, 0
0x0AB0	0x0E8A      	MOVLW       138
0x0AB2	0x6E0C      	MOVWF       R12, 0
0x0AB4	0x0E55      	MOVLW       85
0x0AB6	0x6E0D      	MOVWF       R13, 0
L_main134:
0x0AB8	0x2E0D      	DECFSZ      R13, 1, 0
0x0ABA	0xD7FE      	BRA         L_main134
0x0ABC	0x2E0C      	DECFSZ      R12, 1, 0
0x0ABE	0xD7FC      	BRA         L_main134
0x0AC0	0x2E0B      	DECFSZ      R11, 1, 0
0x0AC2	0xD7FA      	BRA         L_main134
0x0AC4	0x0000      	NOP
0x0AC6	0x0000      	NOP
;soundrec.c,580 :: 		TRISD=0xf3;
0x0AC8	0x0EF3      	MOVLW       243
0x0ACA	0x6E95      	MOVWF       TRISD 
;soundrec.c,581 :: 		TRISA2_bit=1;
0x0ACC	0x8492      	BSF         TRISA2_bit, BitPos(TRISA2_bit+0) 
;soundrec.c,582 :: 		TRISD2_bit=1;
0x0ACE	0x8495      	BSF         TRISD2_bit, BitPos(TRISD2_bit+0) 
;soundrec.c,583 :: 		TRISD3_bit=1;
0x0AD0	0x8695      	BSF         TRISD3_bit, BitPos(TRISD3_bit+0) 
;soundrec.c,584 :: 		TRISB=0;
0x0AD2	0x6A93      	CLRF        TRISB 
;soundrec.c,585 :: 		TRISC = 0x00;
0x0AD4	0x6A94      	CLRF        TRISC 
;soundrec.c,588 :: 		UART1_Init(9600);
0x0AD6	0x86B8      	BSF         BAUDCON, 3, 0
0x0AD8	0x0E02      	MOVLW       2
0x0ADA	0x6EB0      	MOVWF       SPBRGH 
0x0ADC	0x0E08      	MOVLW       8
0x0ADE	0x6EAF      	MOVWF       SPBRG 
0x0AE0	0x84AC      	BSF         TXSTA, 2, 0
0x0AE2	0xDC7C      	RCALL       _UART1_Init
;soundrec.c,589 :: 		mmcInit();
0x0AE4	0xDCAF      	RCALL       _mmcInit
;soundrec.c,591 :: 		for ( ; ; )        // Repeats forever
L_main135:
;soundrec.c,594 :: 		while (SLCT != 0)        // Wait until SELECT pressed
L_main138:
0x0AE6	0xA483      	BTFSS       RD2_bit, BitPos(RD2_bit+0) 
0x0AE8	0xD001      	BRA         L_main139
;soundrec.c,596 :: 		}
0x0AEA	0xD7FD      	BRA         L_main138
L_main139:
;soundrec.c,601 :: 		UWR("Select a Menu");
0x0AEC	0x0E2A      	MOVLW       ?lstr35_soundrec
0x0AEE	0x0101      	MOVLB       1
0x0AF0	0x6F7E      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x0AF2	0x0E01      	MOVLW       hi_addr(?lstr35_soundrec)
0x0AF4	0x6F7F      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x0AF6	0xF000EC9A  	CALL        _UART_Write_Text, 0
0x0AFA	0x0E0D      	MOVLW       13
0x0AFC	0x6F85      	MOVWF       FARG_UART_Write__data, 1
0x0AFE	0xF000EC45  	CALL        _UART_Write, 0
0x0B02	0x0E0A      	MOVLW       10
0x0B04	0x0101      	MOVLB       1
0x0B06	0x6F85      	MOVWF       FARG_UART_Write__data, 1
0x0B08	0xF000EC45  	CALL        _UART_Write, 0
;soundrec.c,602 :: 		while (OK)
L_main140:
0x0B0C	0xA683      	BTFSS       RD3_bit, BitPos(RD3_bit+0) 
0x0B0E	0xD073      	BRA         L_main141
;soundrec.c,604 :: 		if (!SLCT)
0x0B10	0xB483      	BTFSC       RD2_bit, BitPos(RD2_bit+0) 
0x0B12	0xD023      	BRA         L_main142
;soundrec.c,606 :: 		Delay_ms(300);
0x0B14	0x0E08      	MOVLW       8
0x0B16	0x6E0B      	MOVWF       R11, 0
0x0B18	0x0E9D      	MOVLW       157
0x0B1A	0x6E0C      	MOVWF       R12, 0
0x0B1C	0x0E05      	MOVLW       5
0x0B1E	0x6E0D      	MOVWF       R13, 0
L_main143:
0x0B20	0x2E0D      	DECFSZ      R13, 1, 0
0x0B22	0xD7FE      	BRA         L_main143
0x0B24	0x2E0C      	DECFSZ      R12, 1, 0
0x0B26	0xD7FC      	BRA         L_main143
0x0B28	0x2E0B      	DECFSZ      R11, 1, 0
0x0B2A	0xD7FA      	BRA         L_main143
0x0B2C	0x0000      	NOP
0x0B2E	0x0000      	NOP
;soundrec.c,607 :: 		mode++;
0x0B30	0x0E01      	MOVLW       1
0x0B32	0x0101      	MOVLB       1
0x0B34	0x2543      	ADDWF       _mode, 0, 1
0x0B36	0x6E00      	MOVWF       R0 
0x0B38	0x0E00      	MOVLW       0
0x0B3A	0x2144      	ADDWFC      _mode+1, 0, 1
0x0B3C	0x6E01      	MOVWF       R1 
0x0B3E	0xF143C000  	MOVFF       R0, _mode
0x0B42	0xF144C001  	MOVFF       R1, _mode+1
;soundrec.c,608 :: 		if (mode == 3)
0x0B46	0x0E00      	MOVLW       0
0x0B48	0x1944      	XORWF       _mode+1, 0, 1
0x0B4A	0xE102      	BNZ         L__main185
0x0B4C	0x0E03      	MOVLW       3
0x0B4E	0x1943      	XORWF       _mode, 0, 1
L__main185:
0x0B50	0xE104      	BNZ         L_main144
;soundrec.c,610 :: 		mode = 1;
0x0B52	0x0E01      	MOVLW       1
0x0B54	0x6F43      	MOVWF       _mode, 1
0x0B56	0x0E00      	MOVLW       0
0x0B58	0x6F44      	MOVWF       _mode+1, 1
;soundrec.c,611 :: 		}
L_main144:
;soundrec.c,612 :: 		}
L_main142:
0x0B5A	0x0101      	MOVLB       1
;soundrec.c,614 :: 		if ((mode == 1) & (lastMode != mode))
0x0B5C	0x0E00      	MOVLW       0
0x0B5E	0x1944      	XORWF       _mode+1, 0, 1
0x0B60	0xE102      	BNZ         L__main186
0x0B62	0x0E01      	MOVLW       1
0x0B64	0x1943      	XORWF       _mode, 0, 1
L__main186:
0x0B66	0x0E01      	MOVLW       1
0x0B68	0xA4D8      	BTFSS       STATUS, 2 
0x0B6A	0x0E00      	MOVLW       0
0x0B6C	0x6E01      	MOVWF       R1 
0x0B6E	0x0E00      	MOVLW       0
0x0B70	0x1944      	XORWF       _mode+1, 0, 1
0x0B72	0xE102      	BNZ         L__main187
0x0B74	0x5143      	MOVF        _mode, 0, 1
0x0B76	0x1967      	XORWF       main_lastMode_L0, 0, 1
L__main187:
0x0B78	0x0E00      	MOVLW       0
0x0B7A	0xA4D8      	BTFSS       STATUS, 2 
0x0B7C	0x0E01      	MOVLW       1
0x0B7E	0x6E00      	MOVWF       R0 
0x0B80	0x5001      	MOVF        R1, 0 
0x0B82	0x1600      	ANDWF       R0, 1 
0x0B84	0xE010      	BZ          L_main145
;soundrec.c,617 :: 		UWR("Record\n");
0x0B86	0x0E45      	MOVLW       ?lstr36_soundrec
0x0B88	0x6F7E      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x0B8A	0x0E01      	MOVLW       hi_addr(?lstr36_soundrec)
0x0B8C	0x6F7F      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x0B8E	0xF000EC9A  	CALL        _UART_Write_Text, 0
0x0B92	0x0E0D      	MOVLW       13
0x0B94	0x6F85      	MOVWF       FARG_UART_Write__data, 1
0x0B96	0xF000EC45  	CALL        _UART_Write, 0
0x0B9A	0x0E0A      	MOVLW       10
0x0B9C	0x0101      	MOVLB       1
0x0B9E	0x6F85      	MOVWF       FARG_UART_Write__data, 1
0x0BA0	0xF000EC45  	CALL        _UART_Write, 0
;soundrec.c,618 :: 		}
0x0BA4	0xD025      	BRA         L_main146
L_main145:
;soundrec.c,619 :: 		else if ((mode == 2) & (lastMode != mode))
0x0BA6	0x0E00      	MOVLW       0
0x0BA8	0x0101      	MOVLB       1
0x0BAA	0x1944      	XORWF       _mode+1, 0, 1
0x0BAC	0xE102      	BNZ         L__main188
0x0BAE	0x0E02      	MOVLW       2
0x0BB0	0x1943      	XORWF       _mode, 0, 1
L__main188:
0x0BB2	0x0E01      	MOVLW       1
0x0BB4	0xA4D8      	BTFSS       STATUS, 2 
0x0BB6	0x0E00      	MOVLW       0
0x0BB8	0x6E01      	MOVWF       R1 
0x0BBA	0x0E00      	MOVLW       0
0x0BBC	0x1944      	XORWF       _mode+1, 0, 1
0x0BBE	0xE102      	BNZ         L__main189
0x0BC0	0x5143      	MOVF        _mode, 0, 1
0x0BC2	0x1967      	XORWF       main_lastMode_L0, 0, 1
L__main189:
0x0BC4	0x0E00      	MOVLW       0
0x0BC6	0xA4D8      	BTFSS       STATUS, 2 
0x0BC8	0x0E01      	MOVLW       1
0x0BCA	0x6E00      	MOVWF       R0 
0x0BCC	0x5001      	MOVF        R1, 0 
0x0BCE	0x1600      	ANDWF       R0, 1 
0x0BD0	0xE00F      	BZ          L_main147
;soundrec.c,622 :: 		UWR("Play\n");
0x0BD2	0x0EB7      	MOVLW       ?lstr37_soundrec
0x0BD4	0x6F7E      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x0BD6	0x0E00      	MOVLW       hi_addr(?lstr37_soundrec)
0x0BD8	0x6F7F      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x0BDA	0xF000EC9A  	CALL        _UART_Write_Text, 0
0x0BDE	0x0E0D      	MOVLW       13
0x0BE0	0x6F85      	MOVWF       FARG_UART_Write__data, 1
0x0BE2	0xF000EC45  	CALL        _UART_Write, 0
0x0BE6	0x0E0A      	MOVLW       10
0x0BE8	0x0101      	MOVLB       1
0x0BEA	0x6F85      	MOVWF       FARG_UART_Write__data, 1
0x0BEC	0xF000EC45  	CALL        _UART_Write, 0
;soundrec.c,623 :: 		}
L_main147:
L_main146:
;soundrec.c,628 :: 		lastMode = mode;
0x0BF0	0xF167C143  	MOVFF       _mode, main_lastMode_L0
;soundrec.c,629 :: 		}
0x0BF4	0xD78B      	BRA         L_main140
L_main141:
;soundrec.c,633 :: 		if (mode == 1)
0x0BF6	0x0E00      	MOVLW       0
0x0BF8	0x0101      	MOVLB       1
0x0BFA	0x1944      	XORWF       _mode+1, 0, 1
0x0BFC	0xE102      	BNZ         L__main190
0x0BFE	0x0E01      	MOVLW       1
0x0C00	0x1943      	XORWF       _mode, 0, 1
L__main190:
0x0C02	0xE115      	BNZ         L_main148
;soundrec.c,635 :: 		t = 0;
0x0C04	0x0100      	MOVLB       0
0x0C06	0x6BBD      	CLRF        _t, 1
0x0C08	0x6BBE      	CLRF        _t+1, 1
;soundrec.c,636 :: 		UWR("Writing");
0x0C0A	0x0EAF      	MOVLW       ?lstr38_soundrec
0x0C0C	0x0101      	MOVLB       1
0x0C0E	0x6F7E      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x0C10	0x0E00      	MOVLW       hi_addr(?lstr38_soundrec)
0x0C12	0x6F7F      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x0C14	0xF000EC9A  	CALL        _UART_Write_Text, 0
0x0C18	0x0E0D      	MOVLW       13
0x0C1A	0x6F85      	MOVWF       FARG_UART_Write__data, 1
0x0C1C	0xF000EC45  	CALL        _UART_Write, 0
0x0C20	0x0E0A      	MOVLW       10
0x0C22	0x0101      	MOVLB       1
0x0C24	0x6F85      	MOVWF       FARG_UART_Write__data, 1
0x0C26	0xF000EC45  	CALL        _UART_Write, 0
;soundrec.c,637 :: 		PORTB = 0x00;
0x0C2A	0x6A81      	CLRF        PORTB 
;soundrec.c,639 :: 		writeMultipleBlock();
0x0C2C	0xDD2A      	RCALL       _writeMultipleBlock
;soundrec.c,640 :: 		}
L_main148:
;soundrec.c,642 :: 		if (mode == 2)
0x0C2E	0x0E00      	MOVLW       0
0x0C30	0x0101      	MOVLB       1
0x0C32	0x1944      	XORWF       _mode+1, 0, 1
0x0C34	0xE102      	BNZ         L__main191
0x0C36	0x0E02      	MOVLW       2
0x0C38	0x1943      	XORWF       _mode, 0, 1
L__main191:
0x0C3A	0xE118      	BNZ         L_main149
;soundrec.c,646 :: 		UWR("Reading");
0x0C3C	0x0E9B      	MOVLW       ?lstr39_soundrec
0x0C3E	0x6F7E      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x0C40	0x0E00      	MOVLW       hi_addr(?lstr39_soundrec)
0x0C42	0x6F7F      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x0C44	0xF000EC9A  	CALL        _UART_Write_Text, 0
0x0C48	0x0E0D      	MOVLW       13
0x0C4A	0x6F85      	MOVWF       FARG_UART_Write__data, 1
0x0C4C	0xF000EC45  	CALL        _UART_Write, 0
0x0C50	0x0E0A      	MOVLW       10
0x0C52	0x0101      	MOVLB       1
0x0C54	0x6F85      	MOVWF       FARG_UART_Write__data, 1
0x0C56	0xF000EC45  	CALL        _UART_Write, 0
;soundrec.c,647 :: 		t = 0;
0x0C5A	0x0100      	MOVLB       0
0x0C5C	0x6BBD      	CLRF        _t, 1
0x0C5E	0x6BBE      	CLRF        _t+1, 1
;soundrec.c,649 :: 		readMultipleBlock();
0x0C60	0xDE2C      	RCALL       _readMultipleBlock
;soundrec.c,650 :: 		while (SLCT && OK)
L_main150:
0x0C62	0xA483      	BTFSS       RD2_bit, BitPos(RD2_bit+0) 
0x0C64	0xD003      	BRA         L_main151
0x0C66	0xA683      	BTFSS       RD3_bit, BitPos(RD3_bit+0) 
0x0C68	0xD001      	BRA         L_main151
L__main157:
;soundrec.c,652 :: 		}
0x0C6A	0xD7FB      	BRA         L_main150
L_main151:
;soundrec.c,653 :: 		}
L_main149:
;soundrec.c,655 :: 		}
0x0C6C	0xD73C      	BRA         L_main135
;soundrec.c,656 :: 		}
L_end_main:
0x0C6E	0xD7FF      	BRA         $+0
; end of _main
0x0DA8	0xF015EE10  	LFSR        1, 21
0x0DAC	0x0E38      	MOVLW       56
0x0DAE	0x6E00      	MOVWF       R0 
0x0DB0	0x0E02      	MOVLW       2
0x0DB2	0x6E01      	MOVWF       R1 
0x0DB4	0x0E70      	MOVLW       112
0x0DB6	0x6EF6      	MOVWF       4086 
0x0DB8	0x0E0C      	MOVLW       12
0x0DBA	0x6EF7      	MOVWF       TBLPTRH 
0x0DBC	0x0E00      	MOVLW       0
0x0DBE	0x6EF8      	MOVWF       TBLPTRU 
0x0DC0	0xF002EC1A  	CALL        1076, 0
0x0DC4	0x0012      	RETURN      0
;soundrec.c,0 :: ?ICS_arg
0x0C70	0x0000 ;?ICS_arg+0
0x0C72	0x0000 ;?ICS_arg+2
; end of ?ICS_arg
;soundrec.c,0 :: ?ICS?lstr27_soundrec
0x0C74	0x6F43 ;?ICS?lstr27_soundrec+0
0x0C76	0x6D6D ;?ICS?lstr27_soundrec+2
0x0C78	0x6E61 ;?ICS?lstr27_soundrec+4
0x0C7A	0x2064 ;?ICS?lstr27_soundrec+6
0x0C7C	0x6552 ;?ICS?lstr27_soundrec+8
0x0C7E	0x656A ;?ICS?lstr27_soundrec+10
0x0C80	0x7463 ;?ICS?lstr27_soundrec+12
0x0C82	0x6465 ;?ICS?lstr27_soundrec+14
0x0C84	0x0021 ;?ICS?lstr27_soundrec+16
; end of ?ICS?lstr27_soundrec
;soundrec.c,0 :: ?ICS?lstr28_soundrec
0x0C86	0x7453 ;?ICS?lstr28_soundrec+0
0x0C88	0x706F ;?ICS?lstr28_soundrec+2
0x0C8A	0x6570 ;?ICS?lstr28_soundrec+4
0x0C8C	0x2064 ;?ICS?lstr28_soundrec+6
0x0C8E	0x7254 ;?ICS?lstr28_soundrec+8
0x0C90	0x6E61 ;?ICS?lstr28_soundrec+10
0x0C92	0x6673 ;?ICS?lstr28_soundrec+12
0x0C94	0x7265 ;?ICS?lstr28_soundrec+14
0x0C96	0x0021 ;?ICS?lstr28_soundrec+16
; end of ?ICS?lstr28_soundrec
;soundrec.c,0 :: ?ICS?lstr26_soundrec
0x0C98	0x6F43 ;?ICS?lstr26_soundrec+0
0x0C9A	0x6D6D ;?ICS?lstr26_soundrec+2
0x0C9C	0x6E61 ;?ICS?lstr26_soundrec+4
0x0C9E	0x2064 ;?ICS?lstr26_soundrec+6
0x0CA0	0x6361 ;?ICS?lstr26_soundrec+8
0x0CA2	0x6563 ;?ICS?lstr26_soundrec+10
0x0CA4	0x7470 ;?ICS?lstr26_soundrec+12
0x0CA6	0x6465 ;?ICS?lstr26_soundrec+14
0x0CA8	0x0021 ;?ICS?lstr26_soundrec+16
; end of ?ICS?lstr26_soundrec
;soundrec.c,0 :: ?ICS?lstr25_soundrec
0x0CAA	0x4F44 ;?ICS?lstr25_soundrec+0
0x0CAC	0x454E ;?ICS?lstr25_soundrec+2
0x0CAE	0x5720 ;?ICS?lstr25_soundrec+4
0x0CB0	0x6972 ;?ICS?lstr25_soundrec+6
0x0CB2	0x6974 ;?ICS?lstr25_soundrec+8
0x0CB4	0x676E ;?ICS?lstr25_soundrec+10
0x0CB6	0x0021 ;?ICS?lstr25_soundrec+12
; end of ?ICS?lstr25_soundrec
;soundrec.c,0 :: ?ICS?lstr22_soundrec
0x0CB8	0x6F43 ;?ICS?lstr22_soundrec+0
0x0CBA	0x6D6D ;?ICS?lstr22_soundrec+2
0x0CBC	0x6E61 ;?ICS?lstr22_soundrec+4
0x0CBE	0x2064 ;?ICS?lstr22_soundrec+6
0x0CC0	0x6361 ;?ICS?lstr22_soundrec+8
0x0CC2	0x6563 ;?ICS?lstr22_soundrec+10
0x0CC4	0x7470 ;?ICS?lstr22_soundrec+12
0x0CC6	0x6465 ;?ICS?lstr22_soundrec+14
0x0CC8	0x0021 ;?ICS?lstr22_soundrec+16
; end of ?ICS?lstr22_soundrec
;soundrec.c,0 :: ?ICS?lstr23_soundrec
0x0CCA	0x6144 ;?ICS?lstr23_soundrec+0
0x0CCC	0x6174 ;?ICS?lstr23_soundrec+2
0x0CCE	0x6120 ;?ICS?lstr23_soundrec+4
0x0CD0	0x6363 ;?ICS?lstr23_soundrec+6
0x0CD2	0x7065 ;?ICS?lstr23_soundrec+8
0x0CD4	0x6574 ;?ICS?lstr23_soundrec+10
0x0CD6	0x2164 ;?ICS?lstr23_soundrec+12
0x0CD8	0x00 ;?ICS?lstr23_soundrec+14
; end of ?ICS?lstr23_soundrec
;soundrec.c,0 :: ?ICS?lstr24_soundrec
0x0CD9	0x6144 ;?ICS?lstr24_soundrec+0
0x0CDB	0x6174 ;?ICS?lstr24_soundrec+2
0x0CDD	0x7220 ;?ICS?lstr24_soundrec+4
0x0CDF	0x6A65 ;?ICS?lstr24_soundrec+6
0x0CE1	0x6365 ;?ICS?lstr24_soundrec+8
0x0CE3	0x6574 ;?ICS?lstr24_soundrec+10
0x0CE5	0x2164 ;?ICS?lstr24_soundrec+12
0x0CE7	0x00 ;?ICS?lstr24_soundrec+14
; end of ?ICS?lstr24_soundrec
;soundrec.c,0 :: ?ICS?lstr10_soundrec
0x0CE8	0x4D4D ;?ICS?lstr10_soundrec+0
0x0CEA	0x2043 ;?ICS?lstr10_soundrec+2
0x0CEC	0x6544 ;?ICS?lstr10_soundrec+4
0x0CEE	0x6574 ;?ICS?lstr10_soundrec+6
0x0CF0	0x7463 ;?ICS?lstr10_soundrec+8
0x0CF2	0x6465 ;?ICS?lstr10_soundrec+10
0x0CF4	0x0021 ;?ICS?lstr10_soundrec+12
; end of ?ICS?lstr10_soundrec
;soundrec.c,0 :: ?ICS?lstr39_soundrec
0x0CF6	0x6552 ;?ICS?lstr39_soundrec+0
0x0CF8	0x6461 ;?ICS?lstr39_soundrec+2
0x0CFA	0x6E69 ;?ICS?lstr39_soundrec+4
0x0CFC	0x0067 ;?ICS?lstr39_soundrec+6
; end of ?ICS?lstr39_soundrec
;soundrec.c,0 :: ?ICS?lstr3_soundrec
0x0CFE	0x5343 ;?ICS?lstr3_soundrec+0
0x0D00	0x6920 ;?ICS?lstr3_soundrec+2
0x0D02	0x2073 ;?ICS?lstr3_soundrec+4
0x0D04	0x4948 ;?ICS?lstr3_soundrec+6
0x0D06	0x4847 ;?ICS?lstr3_soundrec+8
0x0D08	0x0021 ;?ICS?lstr3_soundrec+10
; end of ?ICS?lstr3_soundrec
;soundrec.c,0 :: ?ICS?lstr38_soundrec
0x0D0A	0x7257 ;?ICS?lstr38_soundrec+0
0x0D0C	0x7469 ;?ICS?lstr38_soundrec+2
0x0D0E	0x6E69 ;?ICS?lstr38_soundrec+4
0x0D10	0x0067 ;?ICS?lstr38_soundrec+6
; end of ?ICS?lstr38_soundrec
;soundrec.c,0 :: ?ICS?lstr37_soundrec
0x0D12	0x6C50 ;?ICS?lstr37_soundrec+0
0x0D14	0x7961 ;?ICS?lstr37_soundrec+2
0x0D16	0x000A ;?ICS?lstr37_soundrec+4
; end of ?ICS?lstr37_soundrec
;soundrec.c,0 :: ?ICS_t
0x0D18	0x0000 ;?ICS_t+0
; end of ?ICS_t
;soundrec.c,0 :: ?ICS?lstr7_soundrec
0x0D1A	0x4143 ;?ICS?lstr7_soundrec+0
0x0D1C	0x4452 ;?ICS?lstr7_soundrec+2
0x0D1E	0x4520 ;?ICS?lstr7_soundrec+4
0x0D20	0x5252 ;?ICS?lstr7_soundrec+6
0x0D22	0x524F ;?ICS?lstr7_soundrec+8
0x0D24	0x2D20 ;?ICS?lstr7_soundrec+10
0x0D26	0x4320 ;?ICS?lstr7_soundrec+12
0x0D28	0x444D ;?ICS?lstr7_soundrec+14
0x0D2A	0x0030 ;?ICS?lstr7_soundrec+16
; end of ?ICS?lstr7_soundrec
;soundrec.c,0 :: ?ICS?lstr8_soundrec
0x0D2C	0x6143 ;?ICS?lstr8_soundrec+0
0x0D2E	0x6472 ;?ICS?lstr8_soundrec+2
0x0D30	0x4520 ;?ICS?lstr8_soundrec+4
0x0D32	0x5252 ;?ICS?lstr8_soundrec+6
0x0D34	0x524F ;?ICS?lstr8_soundrec+8
0x0D36	0x2D20 ;?ICS?lstr8_soundrec+10
0x0D38	0x4320 ;?ICS?lstr8_soundrec+12
0x0D3A	0x444D ;?ICS?lstr8_soundrec+14
0x0D3C	0x0031 ;?ICS?lstr8_soundrec+16
; end of ?ICS?lstr8_soundrec
;soundrec.c,0 :: ?ICS?lstr6_soundrec
0x0D3E	0x4D43 ;?ICS?lstr6_soundrec+0
0x0D40	0x3044 ;?ICS?lstr6_soundrec+2
0x0D42	0x7320 ;?ICS?lstr6_soundrec+4
0x0D44	0x6E65 ;?ICS?lstr6_soundrec+6
0x0D46	0x2174 ;?ICS?lstr6_soundrec+8
0x0D48	0x00 ;?ICS?lstr6_soundrec+10
; end of ?ICS?lstr6_soundrec
;soundrec.c,0 :: ?ICS?lstr4_soundrec
0x0D49	0x7544 ;?ICS?lstr4_soundrec+0
0x0D4B	0x6D6D ;?ICS?lstr4_soundrec+2
0x0D4D	0x2079 ;?ICS?lstr4_soundrec+4
0x0D4F	0x6C63 ;?ICS?lstr4_soundrec+6
0x0D51	0x636F ;?ICS?lstr4_soundrec+8
0x0D53	0x206B ;?ICS?lstr4_soundrec+10
0x0D55	0x6573 ;?ICS?lstr4_soundrec+12
0x0D57	0x746E ;?ICS?lstr4_soundrec+14
0x0D59	0x0021 ;?ICS?lstr4_soundrec+16
; end of ?ICS?lstr4_soundrec
;soundrec.c,0 :: ?ICS?lstr5_soundrec
0x0D5B	0x5343 ;?ICS?lstr5_soundrec+0
0x0D5D	0x6920 ;?ICS?lstr5_soundrec+2
0x0D5F	0x2073 ;?ICS?lstr5_soundrec+4
0x0D61	0x4F4C ;?ICS?lstr5_soundrec+6
0x0D63	0x2157 ;?ICS?lstr5_soundrec+8
0x0D65	0x000A ;?ICS?lstr5_soundrec+10
; end of ?ICS?lstr5_soundrec
;soundrec.c,0 :: ?ICS?lstr29_soundrec
0x0D67	0x6143 ;?ICS?lstr29_soundrec+0
0x0D69	0x6472 ;?ICS?lstr29_soundrec+2
0x0D6B	0x6620 ;?ICS?lstr29_soundrec+4
0x0D6D	0x6572 ;?ICS?lstr29_soundrec+6
0x0D6F	0x2165 ;?ICS?lstr29_soundrec+8
0x0D71	0x00 ;?ICS?lstr29_soundrec+10
; end of ?ICS?lstr29_soundrec
;soundrec.c,0 :: ?ICS?lstr9_soundrec
0x0D72	0x6143 ;?ICS?lstr9_soundrec+0
0x0D74	0x6472 ;?ICS?lstr9_soundrec+2
0x0D76	0x6520 ;?ICS?lstr9_soundrec+4
0x0D78	0x7272 ;?ICS?lstr9_soundrec+6
0x0D7A	0x726F ;?ICS?lstr9_soundrec+8
0x0D7C	0x2D20 ;?ICS?lstr9_soundrec+10
0x0D7E	0x4320 ;?ICS?lstr9_soundrec+12
0x0D80	0x444D ;?ICS?lstr9_soundrec+14
0x0D82	0x3631 ;?ICS?lstr9_soundrec+16
0x0D84	0x00 ;?ICS?lstr9_soundrec+18
; end of ?ICS?lstr9_soundrec
;soundrec.c,0 :: ?ICS?lstr35_soundrec
0x0D85	0x6553 ;?ICS?lstr35_soundrec+0
0x0D87	0x656C ;?ICS?lstr35_soundrec+2
0x0D89	0x7463 ;?ICS?lstr35_soundrec+4
0x0D8B	0x6120 ;?ICS?lstr35_soundrec+6
0x0D8D	0x4D20 ;?ICS?lstr35_soundrec+8
0x0D8F	0x6E65 ;?ICS?lstr35_soundrec+10
0x0D91	0x0075 ;?ICS?lstr35_soundrec+12
; end of ?ICS?lstr35_soundrec
;soundrec.c,0 :: ?ICS?lstr21_soundrec
0x0D93	0x6143 ;?ICS?lstr21_soundrec+0
0x0D95	0x6472 ;?ICS?lstr21_soundrec+2
0x0D97	0x6620 ;?ICS?lstr21_soundrec+4
0x0D99	0x6572 ;?ICS?lstr21_soundrec+6
0x0D9B	0x2165 ;?ICS?lstr21_soundrec+8
0x0D9D	0x00 ;?ICS?lstr21_soundrec+10
; end of ?ICS?lstr21_soundrec
;soundrec.c,0 :: ?ICS_mode
0x0D9E	0x0000 ;?ICS_mode+0
; end of ?ICS_mode
;soundrec.c,0 :: ?ICS?lstr36_soundrec
0x0DA0	0x6552 ;?ICS?lstr36_soundrec+0
0x0DA2	0x6F63 ;?ICS?lstr36_soundrec+2
0x0DA4	0x6472 ;?ICS?lstr36_soundrec+4
0x0DA6	0x000A ;?ICS?lstr36_soundrec+6
; end of ?ICS?lstr36_soundrec
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x001C      [14]    _UART1_Write
0x002A      [18]    _SPI1_Write
0x003C      [24]    _____DoIFC
0x0054      [54]    _Div_16x16_U
0x008A      [24]    _UART_Write
0x00A2     [146]    _WordToStr
0x0134      [52]    _UART_Write_Text
0x0168      [18]    _SPI1_Read
0x017A     [218]    _IntToStr
0x0254      [88]    _SPI1_Init_Advanced
0x02AC      [98]    _command
0x030E     [206]    _sendCMD
0x03DC      [88]    _UART1_Init
0x0434      [16]    ___CC2DW
0x0444     [574]    _mmcInit
0x0682     [568]    _writeMultipleBlock
0x08BA     [482]    _readMultipleBlock
0x0A9C     [468]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    R0
0x0000       [1]    UART1_Init_tmp_L0
0x0000       [1]    SPI1_Write_tmp_L0
0x0000       [1]    EEPROM_Write_SaveINTCON_L0
0x0000       [1]    __Lib_SoftI2C_PutZerosToLATSda_temp_sda_L0
0x0000       [1]    FLASH_Erase_64_SaveINTCON_L0
0x0000       [1]    __Lib_SoftI2C_PutZerosToLATScl_temp_scl_L0
0x0001       [1]    FLASH_Write_32_i_L0
0x0001       [1]    ispunct_rslt_L0
0x0001       [1]    FLASH_Erase_Write_64_i_L0
0x0001       [1]    I2C1_Rd_tmp_L0
0x0001       [1]    UART1_Read___tmp_UART1_Read_L0
0x0001       [1]    __Lib_PS2_Wait_Falling_nsample_L0
0x0001       [2]    FLASH_Read_N_Bytes_i_L0
0x0001       [1]    R1
0x0002       [2]    memchr_s_L0
0x0002       [1]    R2
0x0002       [2]    memcpy_dd_L0
0x0002       [1]    FLASH_Write_32_SaveINTCON_L0
0x0002       [2]    memset_pp_L0
0x0002       [1]    FLASH_Erase_Write_64_j_L0
0x0002       [2]    strlen_cp_L0
0x0003       [1]    FLASH_Erase_Write_64_SaveINTCON_L0
0x0003       [1]    MM_Init_i_L0
0x0003       [2]    __Lib_MmcFat16_f16_toInt_l_L0
0x0003       [2]    Ltrim_original_L0
0x0003       [1]    R3
0x0003       [2]    memmove_tt_L0
0x0003       [1]    codeToRam_i_L0
0x0003       [2]    MM_TotalFreeMemSize_Tot_L0
0x0004       [2]    __Lib_MemManager_MM_GetMemAlign_P_L0
0x0004       [2]    strcpy_cp_L0
0x0004       [2]    memcpy_ss_L0
0x0004       [2]    frexp_pom_L0
0x0004       [1]    R4
0x0004       [2]    strncat_cp_L0
0x0004       [2]    strncpy_cp_L0
0x0004       [2]    strcat_cp_L0
0x0005       [1]    R5
0x0005       [2]    memmove_ff_L0
0x0005       [2]    Ltrim_p_L0
0x0005       [2]    LongIntToHex_input_half_L0
0x0005       [2]    LongWordToHex_input_half_L0
0x0005       [1]    MM_TotalFreeMemSize_i_L0
0x0006       [1]    __Lib_MemManager_MM_GetMemAlign_i_L0
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [1]    R8
0x0009       [4]    __Lib_MmcFat16_f16_toLong_l_L0
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0015       [4]    _arg
0x0019      [18]    ?lstr27_soundrec
0x002B      [18]    ?lstr28_soundrec
0x003D      [18]    ?lstr26_soundrec
0x004F      [14]    ?lstr25_soundrec
0x005D      [18]    ?lstr22_soundrec
0x006F      [15]    ?lstr23_soundrec
0x007E      [15]    ?lstr24_soundrec
0x008D      [14]    ?lstr10_soundrec
0x009B       [8]    ?lstr39_soundrec
0x00A3      [12]    ?lstr3_soundrec
0x00AF       [8]    ?lstr38_soundrec
0x00B7       [6]    ?lstr37_soundrec
0x00BD       [2]    _t
0x00BF      [18]    ?lstr7_soundrec
0x00D1      [18]    ?lstr8_soundrec
0x00E3      [11]    ?lstr6_soundrec
0x00EE      [18]    ?lstr4_soundrec
0x0100      [12]    ?lstr5_soundrec
0x010C      [11]    ?lstr29_soundrec
0x0117      [19]    ?lstr9_soundrec
0x012A      [14]    ?lstr35_soundrec
0x0138      [11]    ?lstr21_soundrec
0x0143       [2]    _mode
0x0145       [8]    ?lstr36_soundrec
0x014D       [4]    _UART_Rd_Ptr
0x0151       [4]    _UART_Rdy_Ptr
0x0155       [4]    _UART_Wr_Ptr
0x0159       [4]    _UART_Tx_Idle_Ptr
0x015D       [1]    _count
0x015E       [1]    _spiReadData
0x015F       [4]    _SPI_Wr_Ptr
0x0163       [4]    _SPI_Rd_Ptr
0x0167       [1]    main_lastMode_L0
0x0168       [2]    readMultipleBlock_g_L0
0x0168       [1]    mmcInit_u_L0
0x0168       [2]    writeMultipleBlock_g_L0
0x016A       [7]    readMultipleBlock_text_L0
0x016A       [7]    writeMultipleBlock_text_L0
0x0171       [1]    writeMultipleBlock_temp_L0
0x0172       [2]    writeMultipleBlock_rejected_L0
0x0174       [2]    FARG_IntToStr_input
0x0174       [1]    FARG_SPI1_Init_Advanced_master
0x0174       [1]    FARG_sendCMD_cmd
0x0174       [1]    FARG_command_command
0x0175       [4]    FARG_command_fourbyte_arg
0x0175       [1]    FARG_SPI1_Init_Advanced_data_sample
0x0175       [4]    FARG_sendCMD_arg
0x0176       [2]    FARG_IntToStr_output
0x0176       [1]    FARG_SPI1_Init_Advanced_clock_idle
0x0177       [1]    FARG_SPI1_Init_Advanced_transmit_edge
0x0178       [2]    IntToStr_i_L0
0x0179       [1]    FARG_command_CRCbits
0x0179       [1]    sendCMD_retryTimes_L0
0x017A       [2]    IntToStr_negative_L0
0x017C       [2]    IntToStr_inword_L0
0x017E       [1]    FARG_SPI1_Read_buffer
0x017E       [2]    FARG_UART_Write_Text_uart_text
0x017E       [2]    FARG_WordToStr_input
0x0180       [1]    UART_Write_Text_data__L0
0x0180       [2]    FARG_WordToStr_output
0x0181       [1]    UART_Write_Text_counter_L0
0x0182       [1]    WordToStr_len_L0
0x0183       [2]    FLOC__WordToStr
0x0185       [1]    FARG_UART_Write__data
0x0186       [1]    FARG_SPI1_Write_data_
0x0186       [1]    FARG_UART1_Write_data_
0x0F81       [1]    PORTB
0x0F83       [0]    RD3_bit
0x0F83       [0]    RD2_bit
0x0F8B       [0]    LATC2_bit
0x0F8B       [0]    Mmc_Chip_Select
0x0F8C       [0]    LATD5_bit
0x0F8C       [0]    LATD7_bit
0x0F8C       [0]    LATD6_bit
0x0F8C       [0]    LATD1_bit
0x0F8C       [0]    LATD0_bit
0x0F8C       [0]    LATD4_bit
0x0F92       [0]    TRISA2_bit
0x0F93       [1]    TRISB
0x0F94       [0]    TRISC7_bit
0x0F94       [0]    TRISC4_bit
0x0F94       [0]    TRISC3_bit
0x0F94       [0]    TRISC5_bit
0x0F94       [1]    TRISC
0x0F94       [0]    TRISC2_bit
0x0F94       [0]    TRISC6_bit
0x0F95       [0]    TRISD4_bit
0x0F95       [0]    TRISD5_bit
0x0F95       [0]    TRISD6_bit
0x0F95       [0]    TRISD7_bit
0x0F95       [1]    TRISD
0x0F95       [0]    TRISD0_bit
0x0F95       [0]    TRISD3_bit
0x0F95       [0]    TRISD1_bit
0x0F95       [0]    TRISD2_bit
0x0F9E       [1]    PIR1
0x0FAB       [1]    RCSTA
0x0FAC       [1]    TXSTA
0x0FAD       [1]    TXREG
0x0FAE       [1]    RCREG
0x0FAF       [1]    SPBRG
0x0FB0       [1]    SPBRGH
0x0FB8       [1]    BAUDCON
0x0FC0       [1]    ADCON2
0x0FC0       [0]    ADFM_bit
0x0FC1       [1]    ADCON1
0x0FC2       [0]    ADON_bit
0x0FC6       [1]    SSPCON1
0x0FC7       [1]    SSPSTAT
0x0FC9       [1]    SSPBUF
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [2]    FSR1
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF2       [1]    INTCON
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
0x0FFD       [1]    TOSL
0x0FFE       [1]    TOSH
0x0FFF       [1]    TOSU
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x0C70       [4]    ?ICS_arg
0x0C74      [18]    ?ICS?lstr27_soundrec
0x0C86      [18]    ?ICS?lstr28_soundrec
0x0C98      [18]    ?ICS?lstr26_soundrec
0x0CAA      [14]    ?ICS?lstr25_soundrec
0x0CB8      [18]    ?ICS?lstr22_soundrec
0x0CCA      [15]    ?ICS?lstr23_soundrec
0x0CD9      [15]    ?ICS?lstr24_soundrec
0x0CE8      [14]    ?ICS?lstr10_soundrec
0x0CF6       [8]    ?ICS?lstr39_soundrec
0x0CFE      [12]    ?ICS?lstr3_soundrec
0x0D0A       [8]    ?ICS?lstr38_soundrec
0x0D12       [6]    ?ICS?lstr37_soundrec
0x0D18       [2]    ?ICS_t
0x0D1A      [18]    ?ICS?lstr7_soundrec
0x0D2C      [18]    ?ICS?lstr8_soundrec
0x0D3E      [11]    ?ICS?lstr6_soundrec
0x0D49      [18]    ?ICS?lstr4_soundrec
0x0D5B      [12]    ?ICS?lstr5_soundrec
0x0D67      [11]    ?ICS?lstr29_soundrec
0x0D72      [19]    ?ICS?lstr9_soundrec
0x0D85      [14]    ?ICS?lstr35_soundrec
0x0D93      [11]    ?ICS?lstr21_soundrec
0x0D9E       [2]    ?ICS_mode
0x0DA0       [8]    ?ICS?lstr36_soundrec
//** Label List: ** 
//----------------------------------------------
  L_codeToRam0
  L_codeToRam1
  L_codeToRam2
  L_adcRead3
  L_adcRead4
  L_caidatMMC5
  L_caidatMMC6
  L_caidatMMC7
  L_caidatMMC8
  L_mmcInit9
  L_mmcInit10
  L_mmcInit11
  L_mmcInit12
  L_mmcInit13
  L_mmcInit14
  L_mmcInit15
  L_mmcInit16
  L_mmcInit17
  L_mmcInit18
  L_mmcInit19
  L_mmcInit20
  L_mmcInit21
  L_mmcInit22
  L_mmcInit23
  L_mmcInit24
  L_mmcInit25
  L_mmcInit26
  L_mmcInit27
  L_mmcInit28
  L_mmcInit29
  L_mmcInit30
  L_mmcInit31
  L_mmcInit32
  L_mmcInit33
  L_mmcInit34
  L_mmcInit35
  L_writeSingleBlock36
  L_writeSingleBlock37
  L_writeSingleBlock38
  L_writeSingleBlock39
  L_writeSingleBlock40
  L_writeSingleBlock41
  L_writeSingleBlock42
  L_writeSingleBlock43
  L_writeSingleBlock44
  L_writeSingleBlock45
  L_writeSingleBlock46
  L_writeSingleBlock47
  L_writeSingleBlock48
  L_readSingleBlock49
  L_readSingleBlock50
  L_readSingleBlock51
  L_readSingleBlock52
  L_readSingleBlock53
  L_readSingleBlock54
  L_readSingleBlock55
  L_readSingleBlock56
  L_readSingleBlock57
  L_readSingleBlock58
  L_readSingleBlock59
  L_readSingleBlock60
  L_readSingleBlock61
  L_readSingleBlock62
  L_sendCMD63
  L_sendCMD64
  L_sendCMD65
  L_sendCMD66
  L_sendCMD67
  L_sendCMD68
  L_sendCMD69
  L_writeMultipleBlock70
  L_writeMultipleBlock71
  L_writeMultipleBlock72
  L_writeMultipleBlock73
  L_writeMultipleBlock74
  L_writeMultipleBlock75
  L_writeMultipleBlock76
  L_writeMultipleBlock77
  L_writeMultipleBlock78
  L_writeMultipleBlock79
  L_writeMultipleBlock80
  L_writeMultipleBlock81
  L_writeMultipleBlock82
  L_writeMultipleBlock83
  L_writeMultipleBlock84
  L_writeMultipleBlock85
  L_readMultipleBlock86
  L_readMultipleBlock87
  L_readMultipleBlock88
  L_readMultipleBlock89
  L_readMultipleBlock90
  L_readMultipleBlock91
  L_readMultipleBlock92
  L_readMultipleBlock93
  L_readMultipleBlock94
  L_readMultipleBlock95
  L_readMultipleBlock96
  L_readMultipleBlock97
  L_readMultipleBlock98
  L_readMultipleBlock99
  L_readMultipleBlock100
  L_readMultipleBlock101
  L_readMultipleBlock102
  L_readMultipleBlock103
  L_readMultipleBlock104
  L_readMultipleBlock105
  L_readMultipleBlock106
  L_readMultipleBlock107
  L_readMultipleBlock108
  L_readMultipleBlock109
  L_readMultipleBlock110
  L_readMultipleBlock111
  L_readMultipleBlock112
  L_readMultipleBlock113
  L_hamghi114
  L_hamghi115
  L_hamghi116
  L_hamghi117
  L_hamghi118
  L_hamghi119
  L_hamghi120
  L_hamdoc121
  L_hamdoc122
  L_hamdoc123
  L_hamdoc124
  L_hamdoc125
  L_hamcaidat126
  L_hamcaidat127
  L_hamcaidat128
  L_hamcaidat129
  L_hamcaidat130
  L_hamcaidat131
  L_hamcaidat132
  L_hamcaidat133
  L_main134
  L_main135
  L_main136
  L_main137
  L_main138
  L_main139
  L_main140
  L_main141
  L_main142
  L_main143
  L_main144
  L_main145
  L_main146
  L_main147
  L_main148
  L_main149
  L_main150
  L_main151
  L_main152
  L_main153
  L__mmcInit154
  L__mmcInit155
  L__mmcInit156
  L__main157
  L_end_codeToRam
  _codeToRam
  L_end_adcRead
  _adcRead
  L_end_caidatMMC
  _caidatMMC
  L_end_command
  _command
  L_end_mmcInit
  _mmcInit
  L__mmcInit163
  L__mmcInit164
  L__mmcInit165
  L__mmcInit166
  L_end_writeSingleBlock
  _writeSingleBlock
  L__writeSingleBlock168
  L_end_readSingleBlock
  _readSingleBlock
  L__readSingleBlock170
  L_end_sendCMD
  _sendCMD
  L_end_writeMultipleBlock
  _writeMultipleBlock
  L__writeMultipleBlock173
  L_end_readMultipleBlock
  _readMultipleBlock
  L__readMultipleBlock175
  L_end_hamghi
  _hamghi
  L__hamghi177
  L_end_hamdoc
  _hamdoc
  L__hamdoc179
  L_end_hamcaidat
  _hamcaidat
  L__hamcaidat181
  L__hamcaidat182
  L__hamcaidat183
  L_end_main
  _main
  L__main185
  L__main186
  L__main187
  L__main188
  L__main189
  L__main190
  L__main191
  L_ByteToStr0
  L_ByteToStr1
  L_ByteToStr2
  L_ByteToStr3
  L_ByteToStr4
  L_ByteToStr5
  L_WordToStr6
  L_WordToStr7
  L_WordToStr8
  L_WordToStr9
  L_WordToStr10
  L_WordToStr11
  L_WordToStrWithZeros12
  L_WordToStrWithZeros13
  L_WordToStrWithZeros14
  L_WordToStrWithZeros15
  L_WordToStrWithZeros16
  L_ShortToStr17
  L_ShortToStr18
  L_ShortToStr19
  L_ShortToStr20
  L_ShortToStr21
  L_ShortToStr22
  L_IntToStr23
  L_IntToStr24
  L_IntToStr25
  L_IntToStr26
  L_IntToStr27
  L_IntToStr28
  L_IntToStrWithZeros29
  L_IntToStrWithZeros30
  L_IntToStrWithZeros31
  L_IntToStrWithZeros32
  L_IntToStrWithZeros33
  L_IntToStrWithZeros34
  L_IntToStrWithZeros35
  L_IntToStrWithZeros36
  L_IntToStrWithZeros37
  L_LongWordToStr38
  L_LongWordToStr39
  L_LongWordToStr40
  L_LongWordToStr41
  L_LongWordToStr42
  L_LongWordToStr43
  L_LongWordToStrWithZeros44
  L_LongWordToStrWithZeros45
  L_LongWordToStrWithZeros46
  L_LongWordToStrWithZeros47
  L_LongWordToStrWithZeros48
  L_LongToStr49
  L_LongToStr50
  L_LongToStr51
  L_LongToStr52
  L_LongToStr53
  L_LongToStr54
  L_LongIntToStrWithZeros55
  L_LongIntToStrWithZeros56
  L_LongIntToStrWithZeros57
  L_LongIntToStrWithZeros58
  L_LongIntToStrWithZeros59
  L_LongIntToStrWithZeros60
  L_LongIntToStrWithZeros61
  L_LongIntToStrWithZeros62
  L_LongIntToStrWithZeros63
  L_Dec2Bcd64
  L_Dec2Bcd65
  L_Rtrim66
  L_Rtrim67
  L_Rtrim68
  L_Rtrim69
  L_Ltrim70
  L_Ltrim71
  L_Ltrim72
  L_Ltrim73
  L_Ltrim74
  L_Ltrim75
  L_FloatToStr76
  L_FloatToStr77
  L_FloatToStr78
  L_FloatToStr79
  L_FloatToStr80
  L_FloatToStr81
  L_FloatToStr82
  L_FloatToStr83
  L_FloatToStr84
  L_FloatToStr85
  L_FloatToStr86
  L_FloatToStr87
  L_FloatToStr88
  L_FloatToStr89
  L_FloatToStr90
  L_FloatToStr91
  L_FloatToStr92
  L_FloatToStr93
  L_FloatToStr94
  L_FloatToStr95
  L_FloatToStr96
  L_FloatToStr97
  L__Rtrim98
  L__Ltrim99
  L__FloatToStr100
  L_end_ByteToHex
  _ByteToHex
  L_end_ShortToHex
  _ShortToHex
  L_end_WordToHex
  _WordToHex
  L_end_IntToHex
  _IntToHex
  L_end_LongWordToHex
  _LongWordToHex
  L_end_LongIntToHex
  _LongIntToHex
  L_end_ByteToStr
  _ByteToStr
  L_end_WordToStr
  _WordToStr
  L__WordToStr109
  L_end_WordToStrWithZeros
  _WordToStrWithZeros
  L__WordToStrWithZeros111
  L_end_ShortToStr
  _ShortToStr
  L__ShortToStr113
  L_end_IntToStr
  _IntToStr
  L__IntToStr115
  L__IntToStr116
  L_end_IntToStrWithZeros
  _IntToStrWithZeros
  L__IntToStrWithZeros118
  L__IntToStrWithZeros119
  L__IntToStrWithZeros120
  L_end_LongWordToStr
  _LongWordToStr
  L__LongWordToStr122
  L__LongWordToStr123
  L_end_LongWordToStrWithZeros
  _LongWordToStrWithZeros
  L__LongWordToStrWithZeros125
  L_end_LongToStr
  _LongToStr
  L__LongToStr127
  L__LongToStr128
  L_end_LongIntToStrWithZeros
  _LongIntToStrWithZeros
  L__LongIntToStrWithZeros130
  L__LongIntToStrWithZeros131
  L__LongIntToStrWithZeros132
  L_end_Dec2Bcd
  _Dec2Bcd
  L_end_Bcd2Dec
  _Bcd2Dec
  L_end_Bcd2Dec16
  _Bcd2Dec16
  L__Bcd2Dec16136
  L__Bcd2Dec16137
  L_end_Dec2Bcd16
  _Dec2Bcd16
  L__Dec2Bcd16139
  L__Dec2Bcd16140
  L_end_Rtrim
  _Rtrim
  L__Rtrim142
  L_end_Ltrim
  _Ltrim
  L_end_FloatToStr
  _FloatToStr
  L__FloatToStr145
  L__FloatToStr146
  L__FloatToStr147
  L__FloatToStr148
  L__FloatToStr149
  L_Div_16x16_S0
  L_Div_16x16_S1
  LOOPS3232A
  SADD22LA
  SOK22LA
  SADD22L8
  SOK22L8
  LOOPS3232B
  SADD22LB
  SOK22LB
  SADD22L16
  SOK22L16
  LOOPS3232C
  SADD22LC
  SOK22LC
  SADD22L24
  SOK22L24
  LOOPS3232D
  SADD22LD
  SOK22LD
  SOK22L
  L_Div_32x32_S6
  L_Div_32x32_S7
  L_Div_32x32_S8
  L_Div_32x32_S9
  FXD3232S
  END_ALL
  CA3232S
  C3232SX
  C3232SX1
  C3232S
  C3232S2
  C3232SX4
  C3232SOK
  C3232SX3
  C3232SX2
  avoid_comfrem
  LOOPU3232A
  UADD22LA
  UOK22LA
  UADD22L8
  UOK22L8
  LOOPU3232B
  UADD22LB
  UOK22LB
  UADD22L16
  UOK22L16
  LOOPU3232C
  UADD22LC
  UOK22LC
  UADD22L24
  UOK22L24
  LOOPU3232D
  UADD22LD
  UOK22LD
  UOK22L
  _NEXT
  _EXIT2
  _LOOP
  _EXIT1
  _IF_FIRST
  _IF_SECOND
  _INVERCE_FIRST
  _MULT
  _INBERSE_SECOND
  _EXIT
  L_end_Div_8x8_U
  _Div_8x8_U
  L_end_Div_16x16_U
  _Div_16x16_U
  L_end_Div_16x16_S_L
  _Div_16x16_S_L
  L_end_Div_16x16_S
  _Div_16x16_S
  L_end_Div_8x8_S
  _Div_8x8_S
  L_end_Mul_8x8_S
  _Mul_8x8_S
  L_end_Mul_16x16_U
  _Mul_16x16_U
  L_end_Mul_16x16_S
  _Mul_16x16_S
  L_end_SDIV3232L
  _SDIV3232L
  L_end_COMFREM
  _COMFREM
  L_end_Div_32x32_S
  _Div_32x32_S
  L_end_Div_32x32_U
  _Div_32x32_U
  L_end_Mul_32x32_U
  _Mul_32x32_U
  L_end_Mul_32x32_S
  _Mul_32x32_S
  L_SPI1_Init_Advanced0
  L_SPI1_Init_Advanced1
  L_SPI1_Init_Advanced2
  L_SPI1_Init_Advanced3
  L_SPI1_Init_Advanced4
  L_SPI1_Init_Advanced5
  L_SPI1_Read6
  L_SPI1_Read7
  L_SPI1_Write8
  L_SPI1_Write9
  L_end_SPI1_Init
  _SPI1_Init
  L_end_SPI1_Init_Advanced
  _SPI1_Init_Advanced
  L_end_SPI1_Read
  _SPI1_Read
  L_end_SPI1_Write
  _SPI1_Write
  L_end_SPI_Set_Active
  _SPI_Set_Active
  L_end_SPI_Read
  _SPI_Read
  L_end_SPI_Write
  _SPI_Write
  _CC2D_Loop1
  _CC2DL_Loop1
  L_loopCA2AWs
  L_loopCCA2AWs
  L_loopCS2Ss
  L_CS2Send
  L_loopCCS2Ss
  L_CCS2Send
  L_loopFZinSWs
  L_longjmp7
  L_end___CC2D
  ___CC2D
  L_end___CC2DW
  ___CC2DW
  L_end___CA2AW
  ___CA2AW
  L_end___CCA2AW
  ___CCA2AW
  L_end___CS2S
  ___CS2S
  L_end___CCS2S
  ___CCS2S
  L_end___FZinS
  ___FZinS
  L_end_____DoIFC
  _____DoIFC
  L_end_Swap
  _Swap
  L_end_setjmp
  _setjmp
  L_end_longjmp
  _longjmp
  L_UART1_Init0
  L_UART1_Init1
  L_UART1_Read2
  L_UART1_Write3
  L_UART1_Write4
  L_UART1_Write_Text5
  L_UART1_Write_Text6
  L_UART1_Read_Text7
  L_UART1_Read_Text8
  L_UART1_Read_Text9
  L_UART1_Read_Text10
  L_UART1_Read_Text11
  L_UART1_Read_Text12
  L_UART1_Read_Text13
  L_UART1_Read_Text14
  L_UART1_Read_Text15
  L_UART_Write_Text16
  L_UART_Write_Text17
  L_UART_Read_Text18
  L_UART_Read_Text19
  L_UART_Read_Text20
  L_UART_Read_Text21
  L_UART_Read_Text22
  L_UART_Read_Text23
  L_UART_Read_Text24
  L_UART_Read_Text25
  L_UART_Read_Text26
  L_end_UART1_Init
  _UART1_Init
  L_end_UART1_Data_Ready
  _UART1_Data_Ready
  L_end_UART1_Read
  _UART1_Read
  L_end_UART1_Tx_Idle
  _UART1_Tx_Idle
  L_end_UART1_Write
  _UART1_Write
  L_end_UART1_Write_Text
  _UART1_Write_Text
  L_end_UART1_Read_Text
  _UART1_Read_Text
  L_end_UART_Set_Active
  _UART_Set_Active
  L_end_UART_Write
  _UART_Write
  L_end_UART_Write_Text
  _UART_Write_Text
  L_end_UART_Read
  _UART_Read
  L_end_UART_Data_Ready
  _UART_Data_Ready
  L_end_UART_Read_Text
  _UART_Read_Text
  L_end_UART_Tx_Idle
  _UART_Tx_Idle
