;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 27/11/2013 11:48:45 CH
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF005EF6F  	GOTO        2782
_interrupt:
;soundrec.c,320 :: 		void interrupt()
0x0008	0xF016C000  	MOVFF       R0, 22
0x000C	0xF015C001  	MOVFF       R1, 21
;soundrec.c,322 :: 		if (PIR1.TMR1IF == 1)
0x0010	0xF019CFE1  	MOVFF       FSR1L, 25
0x0014	0xF01ACFE2  	MOVFF       FSR1H, 26
0x0018	0xF017CFE9  	MOVFF       FSR0L, 23
0x001C	0xF018CFEA  	MOVFF       FSR0H, 24
0x0020	0xA09E      	BTFSS       PIR1, 0 
0x0022	0xD040      	BRA         L_interrupt51
;soundrec.c,325 :: 		PIR1.TMR1IF = 0;
0x0024	0x909E      	BCF         PIR1, 0 
;soundrec.c,330 :: 		TMR1H = 0xfe;
0x0026	0x0EFE      	MOVLW       254
0x0028	0x6ECF      	MOVWF       TMR1H 
;soundrec.c,331 :: 		TMR1L = 0xc7;
0x002A	0x0EC7      	MOVLW       199
0x002C	0x6ECE      	MOVWF       TMR1L 
;soundrec.c,333 :: 		if (mode == 1)					/* Record mode */
0x002E	0x0E00      	MOVLW       0
0x0030	0x1829      	XORWF       _mode+1, 0 
0x0032	0xE102      	BNZ         L__interrupt81
0x0034	0x0E01      	MOVLW       1
0x0036	0x1828      	XORWF       _mode, 0 
L__interrupt81:
0x0038	0xE102      	BNZ         L_interrupt52
;soundrec.c,336 :: 		GO_bit = 1;
0x003A	0x82C2      	BSF         GO_bit, BitPos(GO_bit+0) 
;soundrec.c,337 :: 		}
0x003C	0xD033      	BRA         L_interrupt53
L_interrupt52:
;soundrec.c,339 :: 		else if (mode == 2)				/* Play mode */
0x003E	0x0E00      	MOVLW       0
0x0040	0x1829      	XORWF       _mode+1, 0 
0x0042	0xE102      	BNZ         L__interrupt82
0x0044	0x0E02      	MOVLW       2
0x0046	0x1828      	XORWF       _mode, 0 
L__interrupt82:
0x0048	0xE12D      	BNZ         L_interrupt54
;soundrec.c,346 :: 		LATD = *(ptr + (ptrIndex++));
0x004A	0x501B      	MOVF        soundrec_ptrIndex, 0 
0x004C	0x2437      	ADDWF       soundrec_ptr, 0 
0x004E	0x6EE9      	MOVWF       FSR0L 
0x0050	0x501C      	MOVF        soundrec_ptrIndex+1, 0 
0x0052	0x2038      	ADDWFC      soundrec_ptr+1, 0 
0x0054	0x6EEA      	MOVWF       FSR0H 
0x0056	0xF000CFEE  	MOVFF       POSTINC0, R0
0x005A	0xFF8CC000  	MOVFF       R0, LATD
0x005E	0x0E01      	MOVLW       1
0x0060	0x241B      	ADDWF       soundrec_ptrIndex, 0 
0x0062	0x6E00      	MOVWF       R0 
0x0064	0x0E00      	MOVLW       0
0x0066	0x201C      	ADDWFC      soundrec_ptrIndex+1, 0 
0x0068	0x6E01      	MOVWF       R1 
0x006A	0xF01BC000  	MOVFF       R0, soundrec_ptrIndex
0x006E	0xF01CC001  	MOVFF       R1, soundrec_ptrIndex+1
;soundrec.c,350 :: 		if (ptrIndex == 512)
0x0072	0x501C      	MOVF        soundrec_ptrIndex+1, 0 
0x0074	0x0A02      	XORLW       2
0x0076	0xE102      	BNZ         L__interrupt83
0x0078	0x0E00      	MOVLW       0
0x007A	0x181B      	XORWF       soundrec_ptrIndex, 0 
L__interrupt83:
0x007C	0xE113      	BNZ         L_interrupt55
;soundrec.c,352 :: 		ptrIndex = 0;
0x007E	0x6A1B      	CLRF        soundrec_ptrIndex 
0x0080	0x6A1C      	CLRF        soundrec_ptrIndex+1 
;soundrec.c,353 :: 		bufferFull = 1;
0x0082	0x0E01      	MOVLW       1
0x0084	0x6E25      	MOVWF       _bufferFull 
;soundrec.c,354 :: 		if (currentBuffer == 0)
0x0086	0x5027      	MOVF        _currentBuffer, 0 
0x0088	0x0A00      	XORLW       0
0x008A	0xE107      	BNZ         L_interrupt56
;soundrec.c,356 :: 		ptr = buffer1;
0x008C	0x0E39      	MOVLW       _buffer1
0x008E	0x6E37      	MOVWF       soundrec_ptr 
0x0090	0x0E00      	MOVLW       hi_addr(_buffer1)
0x0092	0x6E38      	MOVWF       soundrec_ptr+1 
;soundrec.c,357 :: 		currentBuffer = 1;
0x0094	0x0E01      	MOVLW       1
0x0096	0x6E27      	MOVWF       _currentBuffer 
;soundrec.c,358 :: 		}
0x0098	0xD005      	BRA         L_interrupt57
L_interrupt56:
;soundrec.c,361 :: 		ptr = buffer0;
0x009A	0x0E47      	MOVLW       _buffer0
0x009C	0x6E37      	MOVWF       soundrec_ptr 
0x009E	0x0E02      	MOVLW       hi_addr(_buffer0)
0x00A0	0x6E38      	MOVWF       soundrec_ptr+1 
;soundrec.c,362 :: 		currentBuffer = 0;
0x00A2	0x6A27      	CLRF        _currentBuffer 
;soundrec.c,363 :: 		}
L_interrupt57:
;soundrec.c,364 :: 		}
L_interrupt55:
;soundrec.c,365 :: 		}
L_interrupt54:
L_interrupt53:
;soundrec.c,366 :: 		}
L_interrupt51:
;soundrec.c,368 :: 		if (PIR1 & (1 << ADIF))
0x00A4	0xAC9E      	BTFSS       PIR1, 6 
0x00A6	0xD02E      	BRA         L_interrupt58
;soundrec.c,371 :: 		PIR1 &= ~(1 << ADIF);
0x00A8	0x9C9E      	BCF         PIR1, 6 
;soundrec.c,374 :: 		adcResult = ADRESH;
0x00AA	0xF02ACFC4  	MOVFF       ADRESH, _adcResult
;soundrec.c,376 :: 		*(ptr + (ptrIndex++)) = adcResult;
0x00AE	0x501B      	MOVF        soundrec_ptrIndex, 0 
0x00B0	0x2437      	ADDWF       soundrec_ptr, 0 
0x00B2	0x6EE1      	MOVWF       FSR1L 
0x00B4	0x501C      	MOVF        soundrec_ptrIndex+1, 0 
0x00B6	0x2038      	ADDWFC      soundrec_ptr+1, 0 
0x00B8	0x6EE2      	MOVWF       FSR1H 
0x00BA	0xFFE6C02A  	MOVFF       _adcResult, POSTINC1
0x00BE	0x0E01      	MOVLW       1
0x00C0	0x241B      	ADDWF       soundrec_ptrIndex, 0 
0x00C2	0x6E00      	MOVWF       R0 
0x00C4	0x0E00      	MOVLW       0
0x00C6	0x201C      	ADDWFC      soundrec_ptrIndex+1, 0 
0x00C8	0x6E01      	MOVWF       R1 
0x00CA	0xF01BC000  	MOVFF       R0, soundrec_ptrIndex
0x00CE	0xF01CC001  	MOVFF       R1, soundrec_ptrIndex+1
;soundrec.c,379 :: 		if (ptrIndex == 512)
0x00D2	0x501C      	MOVF        soundrec_ptrIndex+1, 0 
0x00D4	0x0A02      	XORLW       2
0x00D6	0xE102      	BNZ         L__interrupt84
0x00D8	0x0E00      	MOVLW       0
0x00DA	0x181B      	XORWF       soundrec_ptrIndex, 0 
L__interrupt84:
0x00DC	0xE113      	BNZ         L_interrupt59
;soundrec.c,381 :: 		ptrIndex = 0;
0x00DE	0x6A1B      	CLRF        soundrec_ptrIndex 
0x00E0	0x6A1C      	CLRF        soundrec_ptrIndex+1 
;soundrec.c,382 :: 		bufferFull = 1;
0x00E2	0x0E01      	MOVLW       1
0x00E4	0x6E25      	MOVWF       _bufferFull 
;soundrec.c,383 :: 		if (currentBuffer == 0)
0x00E6	0x5027      	MOVF        _currentBuffer, 0 
0x00E8	0x0A00      	XORLW       0
0x00EA	0xE107      	BNZ         L_interrupt60
;soundrec.c,385 :: 		ptr = buffer1;
0x00EC	0x0E39      	MOVLW       _buffer1
0x00EE	0x6E37      	MOVWF       soundrec_ptr 
0x00F0	0x0E00      	MOVLW       hi_addr(_buffer1)
0x00F2	0x6E38      	MOVWF       soundrec_ptr+1 
;soundrec.c,386 :: 		currentBuffer = 1;
0x00F4	0x0E01      	MOVLW       1
0x00F6	0x6E27      	MOVWF       _currentBuffer 
;soundrec.c,387 :: 		}
0x00F8	0xD005      	BRA         L_interrupt61
L_interrupt60:
;soundrec.c,390 :: 		ptr = buffer0;
0x00FA	0x0E47      	MOVLW       _buffer0
0x00FC	0x6E37      	MOVWF       soundrec_ptr 
0x00FE	0x0E02      	MOVLW       hi_addr(_buffer0)
0x0100	0x6E38      	MOVWF       soundrec_ptr+1 
;soundrec.c,391 :: 		currentBuffer = 0;
0x0102	0x6A27      	CLRF        _currentBuffer 
;soundrec.c,392 :: 		}
L_interrupt61:
;soundrec.c,393 :: 		}
L_interrupt59:
;soundrec.c,394 :: 		}
L_interrupt58:
;soundrec.c,395 :: 		}
L_end_interrupt:
L__interrupt80:
0x0104	0xF000C016  	MOVFF       22, R0
0x0108	0xF001C015  	MOVFF       21, R1
0x010C	0xFFE9C017  	MOVFF       23, FSR0L
0x0110	0xFFEAC018  	MOVFF       24, FSR0H
0x0114	0xFFE1C019  	MOVFF       25, FSR1L
0x0118	0xFFE2C01A  	MOVFF       26, FSR1H
0x011C	0x0011      	RETFIE      1
; end of _interrupt
_SPI1_Read:
;__Lib_SPI_c345.c,67 :: 		
;__Lib_SPI_c345.c,68 :: 		
0x011E	0xFFC9C489  	MOVFF       FARG_SPI1_Read_buffer, SSPBUF
;__Lib_SPI_c345.c,69 :: 		
L_SPI1_Read6:
0x0122	0xB0C7      	BTFSC       SSPSTAT, 0 
0x0124	0xD002      	BRA         L_SPI1_Read7
;__Lib_SPI_c345.c,70 :: 		
0x0126	0x0000      	NOP
0x0128	0xD7FC      	BRA         L_SPI1_Read6
L_SPI1_Read7:
;__Lib_SPI_c345.c,71 :: 		
0x012A	0xF000CFC9  	MOVFF       SSPBUF, R0
;__Lib_SPI_c345.c,72 :: 		
L_end_SPI1_Read:
0x012E	0x0012      	RETURN      0
; end of _SPI1_Read
_____DoIFC:
;__Lib_System.c,93 :: 		
;__Lib_System.c,94 :: 		
0x0130	0x50F2      	MOVF        INTCON, 0, 0
;__Lib_System.c,95 :: 		
0x0132	0x6E02      	MOVWF       R2, 0
;__Lib_System.c,96 :: 		
0x0134	0x9EF2      	BCF         INTCON, 7 
;__Lib_System.c,97 :: 		
0x0136	0x0005      	PUSH
;__Lib_System.c,98 :: 		
0x0138	0x6AFF      	CLRF        TOSU, 0
;__Lib_System.c,99 :: 		
0x013A	0x5001      	MOVF        R1, 0, 0
;__Lib_System.c,100 :: 		
0x013C	0x6EFE      	MOVWF       TOSH, 0
;__Lib_System.c,101 :: 		
0x013E	0x5000      	MOVF        R0, 0, 0
;__Lib_System.c,102 :: 		
0x0140	0x6EFD      	MOVWF       TOSL, 0
;__Lib_System.c,103 :: 		
0x0142	0xBE02      	BTFSC       R2, 7, 0
;__Lib_System.c,104 :: 		
0x0144	0x8EF2      	BSF         INTCON, 7, 0
;__Lib_System.c,105 :: 		
;__Lib_System.c,107 :: 		
L_end_____DoIFC:
0x0146	0x0012      	RETURN      0
; end of _____DoIFC
__Lib_Mmc_Mmc_Send_Command:
;__Lib_Mmc.c,77 :: 		
;__Lib_Mmc.c,81 :: 		
0x0148	0x0E40      	MOVLW       64
0x014A	0x0104      	MOVLB       4
0x014C	0x2580      	ADDWF       FARG___Lib_Mmc_Mmc_Send_Command_partial_cmm, 0, 1
0x014E	0x6E00      	MOVWF       R0 
0x0150	0xFFE1C245  	MOVFF       _SPI_Rd_Ptr+2, FSR1L
0x0154	0xFFE2C246  	MOVFF       _SPI_Rd_Ptr+3, FSR1H
0x0158	0xFFE6C000  	MOVFF       R0, POSTINC1
0x015C	0xF000C243  	MOVFF       _SPI_Rd_Ptr, R0
0x0160	0xF001C244  	MOVFF       _SPI_Rd_Ptr+1, R1
0x0164	0xDFE5      	RCALL       _____DoIFC
;__Lib_Mmc.c,82 :: 		
0x0166	0xFFE1C245  	MOVFF       _SPI_Rd_Ptr+2, FSR1L
0x016A	0xFFE2C246  	MOVFF       _SPI_Rd_Ptr+3, FSR1H
0x016E	0xFFE6C484  	MOVFF       FARG___Lib_Mmc_Mmc_Send_Command_content+3, POSTINC1
0x0172	0xF000C243  	MOVFF       _SPI_Rd_Ptr, R0
0x0176	0xF001C244  	MOVFF       _SPI_Rd_Ptr+1, R1
0x017A	0xDFDA      	RCALL       _____DoIFC
;__Lib_Mmc.c,83 :: 		
0x017C	0xFFE1C245  	MOVFF       _SPI_Rd_Ptr+2, FSR1L
0x0180	0xFFE2C246  	MOVFF       _SPI_Rd_Ptr+3, FSR1H
0x0184	0xFFE6C483  	MOVFF       FARG___Lib_Mmc_Mmc_Send_Command_content+2, POSTINC1
0x0188	0xF000C243  	MOVFF       _SPI_Rd_Ptr, R0
0x018C	0xF001C244  	MOVFF       _SPI_Rd_Ptr+1, R1
0x0190	0xDFCF      	RCALL       _____DoIFC
;__Lib_Mmc.c,84 :: 		
0x0192	0xFFE1C245  	MOVFF       _SPI_Rd_Ptr+2, FSR1L
0x0196	0xFFE2C246  	MOVFF       _SPI_Rd_Ptr+3, FSR1H
0x019A	0xFFE6C482  	MOVFF       FARG___Lib_Mmc_Mmc_Send_Command_content+1, POSTINC1
0x019E	0xF000C243  	MOVFF       _SPI_Rd_Ptr, R0
0x01A2	0xF001C244  	MOVFF       _SPI_Rd_Ptr+1, R1
0x01A6	0xDFC4      	RCALL       _____DoIFC
;__Lib_Mmc.c,85 :: 		
0x01A8	0xFFE1C245  	MOVFF       _SPI_Rd_Ptr+2, FSR1L
0x01AC	0xFFE2C246  	MOVFF       _SPI_Rd_Ptr+3, FSR1H
0x01B0	0xFFE6C481  	MOVFF       FARG___Lib_Mmc_Mmc_Send_Command_content, POSTINC1
0x01B4	0xF000C243  	MOVFF       _SPI_Rd_Ptr, R0
0x01B8	0xF001C244  	MOVFF       _SPI_Rd_Ptr+1, R1
0x01BC	0xDFB9      	RCALL       _____DoIFC
;__Lib_Mmc.c,86 :: 		
0x01BE	0xFFE1C245  	MOVFF       _SPI_Rd_Ptr+2, FSR1L
0x01C2	0xFFE2C246  	MOVFF       _SPI_Rd_Ptr+3, FSR1H
0x01C6	0xFFE6C485  	MOVFF       FARG___Lib_Mmc_Mmc_Send_Command_crc, POSTINC1
0x01CA	0xF000C243  	MOVFF       _SPI_Rd_Ptr, R0
0x01CE	0xF001C244  	MOVFF       _SPI_Rd_Ptr+1, R1
0x01D2	0xDFAE      	RCALL       _____DoIFC
;__Lib_Mmc.c,89 :: 		
0x01D4	0x0104      	MOVLB       4
0x01D6	0x6B87      	CLRF        __Lib_Mmc_Mmc_Send_Command_timeout_L0, 1
0x01D8	0x6B88      	CLRF        __Lib_Mmc_Mmc_Send_Command_timeout_L0+1, 1
;__Lib_Mmc.c,90 :: 		
L___Lib_Mmc_Mmc_Send_Command0:
;__Lib_Mmc.c,91 :: 		
0x01DA	0xFFE1C245  	MOVFF       _SPI_Rd_Ptr+2, FSR1L
0x01DE	0xFFE2C246  	MOVFF       _SPI_Rd_Ptr+3, FSR1H
0x01E2	0x0EFF      	MOVLW       255
0x01E4	0x6EE6      	MOVWF       POSTINC1 
0x01E6	0xF000C243  	MOVFF       _SPI_Rd_Ptr, R0
0x01EA	0xF001C244  	MOVFF       _SPI_Rd_Ptr+1, R1
0x01EE	0xDFA0      	RCALL       _____DoIFC
0x01F0	0xF486C000  	MOVFF       R0, __Lib_Mmc_Mmc_Send_Command_response_L0
;__Lib_Mmc.c,92 :: 		
0x01F4	0x0104      	MOVLB       4
0x01F6	0x4B87      	INFSNZ      __Lib_Mmc_Mmc_Send_Command_timeout_L0, 1, 1
0x01F8	0x2B88      	INCF        __Lib_Mmc_Mmc_Send_Command_timeout_L0+1, 1, 1
;__Lib_Mmc.c,93 :: 		
0x01FA	0x0E80      	MOVLW       128
0x01FC	0x1400      	ANDWF       R0, 0 
0x01FE	0x6E01      	MOVWF       R1 
0x0200	0x5001      	MOVF        R1, 0 
0x0202	0x0A00      	XORLW       0
0x0204	0xE007      	BZ          L___Lib_Mmc_Mmc_Send_Command75
0x0206	0x0E00      	MOVLW       0
0x0208	0x5D88      	SUBWF       __Lib_Mmc_Mmc_Send_Command_timeout_L0+1, 0, 1
0x020A	0xE102      	BNZ         L___Lib_Mmc_Mmc_Send_Command80
0x020C	0x0E64      	MOVLW       100
0x020E	0x5D87      	SUBWF       __Lib_Mmc_Mmc_Send_Command_timeout_L0, 0, 1
L___Lib_Mmc_Mmc_Send_Command80:
0x0210	0xE201      	BC          L___Lib_Mmc_Mmc_Send_Command75
0x0212	0xD7E3      	BRA         L___Lib_Mmc_Mmc_Send_Command0
L___Lib_Mmc_Mmc_Send_Command75:
;__Lib_Mmc.c,95 :: 		
0x0214	0xF000C486  	MOVFF       __Lib_Mmc_Mmc_Send_Command_response_L0, R0
;__Lib_Mmc.c,96 :: 		
L_end_Mmc_Send_Command:
0x0218	0x0012      	RETURN      0
; end of __Lib_Mmc_Mmc_Send_Command
__Lib_Mmc_Mmc_DeSelect:
;__Lib_Mmc.c,67 :: 		
;__Lib_Mmc.c,69 :: 		
0x021A	0x848B      	BSF         Mmc_Chip_Select, BitPos(Mmc_Chip_Select+0) 
;__Lib_Mmc.c,73 :: 		
0x021C	0xFFE1C245  	MOVFF       _SPI_Rd_Ptr+2, FSR1L
0x0220	0xFFE2C246  	MOVFF       _SPI_Rd_Ptr+3, FSR1H
0x0224	0x0EFF      	MOVLW       255
0x0226	0x6EE6      	MOVWF       POSTINC1 
0x0228	0xF000C243  	MOVFF       _SPI_Rd_Ptr, R0
0x022C	0xF001C244  	MOVFF       _SPI_Rd_Ptr+1, R1
0x0230	0xDF7F      	RCALL       _____DoIFC
;__Lib_Mmc.c,74 :: 		
L_end_Mmc_DeSelect:
0x0232	0x0012      	RETURN      0
; end of __Lib_Mmc_Mmc_DeSelect
_UART1_Write:
;__Lib_UART_c67.c,58 :: 		
;__Lib_UART_c67.c,59 :: 		
L_UART1_Write3:
0x0234	0xB2AC      	BTFSC       TXSTA, 1 
0x0236	0xD002      	BRA         L_UART1_Write4
;__Lib_UART_c67.c,60 :: 		
0x0238	0x0000      	NOP
0x023A	0xD7FC      	BRA         L_UART1_Write3
L_UART1_Write4:
;__Lib_UART_c67.c,61 :: 		
0x023C	0xFFADC480  	MOVFF       FARG_UART1_Write_data_, TXREG
;__Lib_UART_c67.c,62 :: 		
L_end_UART1_Write:
0x0240	0x0012      	RETURN      0
; end of _UART1_Write
_SPI1_Write:
;__Lib_SPI_c345.c,76 :: 		
;__Lib_SPI_c345.c,79 :: 		
0x0242	0xFFC9C480  	MOVFF       FARG_SPI1_Write_data_, SSPBUF
;__Lib_SPI_c345.c,80 :: 		
L_SPI1_Write8:
0x0246	0xB0C7      	BTFSC       SSPSTAT, 0 
0x0248	0xD002      	BRA         L_SPI1_Write9
;__Lib_SPI_c345.c,81 :: 		
0x024A	0x0000      	NOP
0x024C	0xD7FC      	BRA         L_SPI1_Write8
L_SPI1_Write9:
;__Lib_SPI_c345.c,82 :: 		
0x024E	0xF000CFC9  	MOVFF       SSPBUF, R0
;__Lib_SPI_c345.c,84 :: 		
L_end_SPI1_Write:
0x0252	0x0012      	RETURN      0
; end of _SPI1_Write
__Lib_Mmc_Mmc_Select:
;__Lib_Mmc.c,53 :: 		
;__Lib_Mmc.c,55 :: 		
0x0254	0x948B      	BCF         Mmc_Chip_Select, BitPos(Mmc_Chip_Select+0) 
;__Lib_Mmc.c,65 :: 		
L_end_Mmc_Select:
0x0256	0x0012      	RETURN      0
; end of __Lib_Mmc_Mmc_Select
__Lib_Mmc_Mmc_UnIdle:
;__Lib_Mmc.c,98 :: 		
;__Lib_Mmc.c,102 :: 		
0x0258	0x0104      	MOVLB       4
0x025A	0x6B7C      	CLRF        __Lib_Mmc_Mmc_UnIdle_cnt_L0, 1
0x025C	0x6B7D      	CLRF        __Lib_Mmc_Mmc_UnIdle_cnt_L0+1, 1
L___Lib_Mmc_Mmc_UnIdle5:
0x025E	0x0E27      	MOVLW       39
0x0260	0x5D7D      	SUBWF       __Lib_Mmc_Mmc_UnIdle_cnt_L0+1, 0, 1
0x0262	0xE102      	BNZ         L___Lib_Mmc_Mmc_UnIdle82
0x0264	0x0E10      	MOVLW       16
0x0266	0x5D7C      	SUBWF       __Lib_Mmc_Mmc_UnIdle_cnt_L0, 0, 1
L___Lib_Mmc_Mmc_UnIdle82:
0x0268	0xB0D8      	BTFSC       STATUS, 0 
0x026A	0xD09A      	BRA         L___Lib_Mmc_Mmc_UnIdle6
;__Lib_Mmc.c,103 :: 		
0x026C	0x0E00      	MOVLW       0
0x026E	0x0A00      	XORLW       0
0x0270	0xE102      	BNZ         L___Lib_Mmc_Mmc_UnIdle83
0x0272	0x0E00      	MOVLW       0
0x0274	0x197B      	XORWF       FARG___Lib_Mmc_Mmc_UnIdle_ctype, 0, 1
L___Lib_Mmc_Mmc_UnIdle83:
0x0276	0xE115      	BNZ         L___Lib_Mmc_Mmc_UnIdle8
;__Lib_Mmc.c,104 :: 		
0x0278	0xDFED      	RCALL       __Lib_Mmc_Mmc_Select
;__Lib_Mmc.c,106 :: 		
0x027A	0x0E01      	MOVLW       1
0x027C	0x6F80      	MOVWF       FARG___Lib_Mmc_Mmc_Send_Command_partial_cmm, 1
0x027E	0x6B81      	CLRF        FARG___Lib_Mmc_Mmc_Send_Command_content, 1
0x0280	0x6B82      	CLRF        FARG___Lib_Mmc_Mmc_Send_Command_content+1, 1
0x0282	0x6B83      	CLRF        FARG___Lib_Mmc_Mmc_Send_Command_content+2, 1
0x0284	0x6B84      	CLRF        FARG___Lib_Mmc_Mmc_Send_Command_content+3, 1
0x0286	0x0EFF      	MOVLW       255
0x0288	0x6F85      	MOVWF       FARG___Lib_Mmc_Mmc_Send_Command_crc, 1
0x028A	0xDF5E      	RCALL       __Lib_Mmc_Mmc_Send_Command
0x028C	0xF47EC000  	MOVFF       R0, __Lib_Mmc_Mmc_UnIdle_response_L0
;__Lib_Mmc.c,107 :: 		
0x0290	0xDFC4      	RCALL       __Lib_Mmc_Mmc_DeSelect
;__Lib_Mmc.c,108 :: 		
0x0292	0x0104      	MOVLB       4
0x0294	0x517E      	MOVF        __Lib_Mmc_Mmc_UnIdle_response_L0, 0, 1
0x0296	0x0A00      	XORLW       0
0x0298	0xE103      	BNZ         L___Lib_Mmc_Mmc_UnIdle9
;__Lib_Mmc.c,110 :: 		
0x029A	0x6A26      	CLRF        __Lib_Mmc_cardType 
;__Lib_Mmc.c,111 :: 		
0x029C	0x6A00      	CLRF        R0 
0x029E	0xD082      	BRA         L_end_Mmc_UnIdle
;__Lib_Mmc.c,112 :: 		
L___Lib_Mmc_Mmc_UnIdle9:
;__Lib_Mmc.c,113 :: 		
0x02A0	0xD07C      	BRA         L___Lib_Mmc_Mmc_UnIdle10
L___Lib_Mmc_Mmc_UnIdle8:
;__Lib_Mmc.c,115 :: 		
0x02A2	0xDFD8      	RCALL       __Lib_Mmc_Mmc_Select
;__Lib_Mmc.c,118 :: 		
0x02A4	0x0E37      	MOVLW       55
0x02A6	0x6F80      	MOVWF       FARG___Lib_Mmc_Mmc_Send_Command_partial_cmm, 1
0x02A8	0x6B81      	CLRF        FARG___Lib_Mmc_Mmc_Send_Command_content, 1
0x02AA	0x6B82      	CLRF        FARG___Lib_Mmc_Mmc_Send_Command_content+1, 1
0x02AC	0x6B83      	CLRF        FARG___Lib_Mmc_Mmc_Send_Command_content+2, 1
0x02AE	0x6B84      	CLRF        FARG___Lib_Mmc_Mmc_Send_Command_content+3, 1
0x02B0	0x0EFF      	MOVLW       255
0x02B2	0x6F85      	MOVWF       FARG___Lib_Mmc_Mmc_Send_Command_crc, 1
0x02B4	0xDF49      	RCALL       __Lib_Mmc_Mmc_Send_Command
0x02B6	0xF47EC000  	MOVFF       R0, __Lib_Mmc_Mmc_UnIdle_response_L0
;__Lib_Mmc.c,119 :: 		
0x02BA	0xDFAF      	RCALL       __Lib_Mmc_Mmc_DeSelect
;__Lib_Mmc.c,120 :: 		
0x02BC	0x0104      	MOVLB       4
0x02BE	0x517E      	MOVF        __Lib_Mmc_Mmc_UnIdle_response_L0, 0, 1
0x02C0	0x0A01      	XORLW       1
0x02C2	0xA4D8      	BTFSS       STATUS, 2 
0x02C4	0xD069      	BRA         L___Lib_Mmc_Mmc_UnIdle11
;__Lib_Mmc.c,122 :: 		
0x02C6	0xDFC6      	RCALL       __Lib_Mmc_Mmc_Select
;__Lib_Mmc.c,124 :: 		
0x02C8	0x0E29      	MOVLW       41
0x02CA	0x6F80      	MOVWF       FARG___Lib_Mmc_Mmc_Send_Command_partial_cmm, 1
0x02CC	0x0E00      	MOVLW       0
0x02CE	0x6F81      	MOVWF       FARG___Lib_Mmc_Mmc_Send_Command_content, 1
0x02D0	0x0E00      	MOVLW       0
0x02D2	0x6F82      	MOVWF       FARG___Lib_Mmc_Mmc_Send_Command_content+1, 1
0x02D4	0x0E00      	MOVLW       0
0x02D6	0x6F83      	MOVWF       FARG___Lib_Mmc_Mmc_Send_Command_content+2, 1
0x02D8	0x0E40      	MOVLW       64
0x02DA	0x6F84      	MOVWF       FARG___Lib_Mmc_Mmc_Send_Command_content+3, 1
0x02DC	0x0EFF      	MOVLW       255
0x02DE	0x6F85      	MOVWF       FARG___Lib_Mmc_Mmc_Send_Command_crc, 1
0x02E0	0xDF33      	RCALL       __Lib_Mmc_Mmc_Send_Command
0x02E2	0xF47EC000  	MOVFF       R0, __Lib_Mmc_Mmc_UnIdle_response_L0
;__Lib_Mmc.c,125 :: 		
0x02E6	0xDF99      	RCALL       __Lib_Mmc_Mmc_DeSelect
;__Lib_Mmc.c,126 :: 		
0x02E8	0x0104      	MOVLB       4
0x02EA	0x517E      	MOVF        __Lib_Mmc_Mmc_UnIdle_response_L0, 0, 1
0x02EC	0x0A00      	XORLW       0
0x02EE	0xE153      	BNZ         L___Lib_Mmc_Mmc_UnIdle12
;__Lib_Mmc.c,127 :: 		
0x02F0	0x0E00      	MOVLW       0
0x02F2	0x0A00      	XORLW       0
0x02F4	0xE102      	BNZ         L___Lib_Mmc_Mmc_UnIdle84
0x02F6	0x0E02      	MOVLW       2
0x02F8	0x197B      	XORWF       FARG___Lib_Mmc_Mmc_UnIdle_ctype, 0, 1
L___Lib_Mmc_Mmc_UnIdle84:
0x02FA	0xE149      	BNZ         L___Lib_Mmc_Mmc_UnIdle13
;__Lib_Mmc.c,128 :: 		
0x02FC	0xDFAB      	RCALL       __Lib_Mmc_Mmc_Select
;__Lib_Mmc.c,129 :: 		
0x02FE	0x0E3A      	MOVLW       58
0x0300	0x6F80      	MOVWF       FARG___Lib_Mmc_Mmc_Send_Command_partial_cmm, 1
0x0302	0x6B81      	CLRF        FARG___Lib_Mmc_Mmc_Send_Command_content, 1
0x0304	0x6B82      	CLRF        FARG___Lib_Mmc_Mmc_Send_Command_content+1, 1
0x0306	0x6B83      	CLRF        FARG___Lib_Mmc_Mmc_Send_Command_content+2, 1
0x0308	0x6B84      	CLRF        FARG___Lib_Mmc_Mmc_Send_Command_content+3, 1
0x030A	0x0EFF      	MOVLW       255
0x030C	0x6F85      	MOVWF       FARG___Lib_Mmc_Mmc_Send_Command_crc, 1
0x030E	0xDF1C      	RCALL       __Lib_Mmc_Mmc_Send_Command
0x0310	0xF47EC000  	MOVFF       R0, __Lib_Mmc_Mmc_UnIdle_response_L0
;__Lib_Mmc.c,130 :: 		
0x0314	0xFFE1C245  	MOVFF       _SPI_Rd_Ptr+2, FSR1L
0x0318	0xFFE2C246  	MOVFF       _SPI_Rd_Ptr+3, FSR1H
0x031C	0x0EFF      	MOVLW       255
0x031E	0x6EE6      	MOVWF       POSTINC1 
0x0320	0xF000C243  	MOVFF       _SPI_Rd_Ptr, R0
0x0324	0xF001C244  	MOVFF       _SPI_Rd_Ptr+1, R1
0x0328	0xDF03      	RCALL       _____DoIFC
0x032A	0xF47FC000  	MOVFF       R0, __Lib_Mmc_Mmc_UnIdle_response2_L0
;__Lib_Mmc.c,131 :: 		
0x032E	0xFFE1C245  	MOVFF       _SPI_Rd_Ptr+2, FSR1L
0x0332	0xFFE2C246  	MOVFF       _SPI_Rd_Ptr+3, FSR1H
0x0336	0x0EFF      	MOVLW       255
0x0338	0x6EE6      	MOVWF       POSTINC1 
0x033A	0xF000C243  	MOVFF       _SPI_Rd_Ptr, R0
0x033E	0xF001C244  	MOVFF       _SPI_Rd_Ptr+1, R1
0x0342	0xDEF6      	RCALL       _____DoIFC
;__Lib_Mmc.c,132 :: 		
0x0344	0xFFE1C245  	MOVFF       _SPI_Rd_Ptr+2, FSR1L
0x0348	0xFFE2C246  	MOVFF       _SPI_Rd_Ptr+3, FSR1H
0x034C	0x0EFF      	MOVLW       255
0x034E	0x6EE6      	MOVWF       POSTINC1 
0x0350	0xF000C243  	MOVFF       _SPI_Rd_Ptr, R0
0x0354	0xF001C244  	MOVFF       _SPI_Rd_Ptr+1, R1
0x0358	0xDEEB      	RCALL       _____DoIFC
;__Lib_Mmc.c,133 :: 		
0x035A	0xFFE1C245  	MOVFF       _SPI_Rd_Ptr+2, FSR1L
0x035E	0xFFE2C246  	MOVFF       _SPI_Rd_Ptr+3, FSR1H
0x0362	0x0EFF      	MOVLW       255
0x0364	0x6EE6      	MOVWF       POSTINC1 
0x0366	0xF000C243  	MOVFF       _SPI_Rd_Ptr, R0
0x036A	0xF001C244  	MOVFF       _SPI_Rd_Ptr+1, R1
0x036E	0xDEE0      	RCALL       _____DoIFC
;__Lib_Mmc.c,134 :: 		
0x0370	0xDF54      	RCALL       __Lib_Mmc_Mmc_DeSelect
;__Lib_Mmc.c,135 :: 		
0x0372	0x0104      	MOVLB       4
0x0374	0x517E      	MOVF        __Lib_Mmc_Mmc_UnIdle_response_L0, 0, 1
0x0376	0x0A00      	XORLW       0
0x0378	0xE109      	BNZ         L___Lib_Mmc_Mmc_UnIdle14
;__Lib_Mmc.c,136 :: 		
0x037A	0xAD7F      	BTFSS       __Lib_Mmc_Mmc_UnIdle_response2_L0, 6, 1
0x037C	0xD003      	BRA         L___Lib_Mmc_Mmc_UnIdle15
;__Lib_Mmc.c,138 :: 		
0x037E	0x0E04      	MOVLW       4
0x0380	0x6E26      	MOVWF       __Lib_Mmc_cardType 
0x0382	0xD002      	BRA         L___Lib_Mmc_Mmc_UnIdle16
L___Lib_Mmc_Mmc_UnIdle15:
;__Lib_Mmc.c,141 :: 		
0x0384	0x0E03      	MOVLW       3
0x0386	0x6E26      	MOVWF       __Lib_Mmc_cardType 
L___Lib_Mmc_Mmc_UnIdle16:
;__Lib_Mmc.c,142 :: 		
0x0388	0x6A00      	CLRF        R0 
0x038A	0xD00C      	BRA         L_end_Mmc_UnIdle
;__Lib_Mmc.c,143 :: 		
L___Lib_Mmc_Mmc_UnIdle14:
;__Lib_Mmc.c,144 :: 		
0x038C	0xD004      	BRA         L___Lib_Mmc_Mmc_UnIdle17
L___Lib_Mmc_Mmc_UnIdle13:
;__Lib_Mmc.c,146 :: 		
0x038E	0x0E01      	MOVLW       1
0x0390	0x6E26      	MOVWF       __Lib_Mmc_cardType 
;__Lib_Mmc.c,147 :: 		
0x0392	0x6A00      	CLRF        R0 
0x0394	0xD007      	BRA         L_end_Mmc_UnIdle
;__Lib_Mmc.c,148 :: 		
L___Lib_Mmc_Mmc_UnIdle17:
;__Lib_Mmc.c,149 :: 		
L___Lib_Mmc_Mmc_UnIdle12:
;__Lib_Mmc.c,150 :: 		
0x0396	0xD001      	BRA         L___Lib_Mmc_Mmc_UnIdle18
L___Lib_Mmc_Mmc_UnIdle11:
;__Lib_Mmc.c,153 :: 		
0x0398	0xD003      	BRA         L___Lib_Mmc_Mmc_UnIdle6
;__Lib_Mmc.c,154 :: 		
L___Lib_Mmc_Mmc_UnIdle18:
;__Lib_Mmc.c,155 :: 		
L___Lib_Mmc_Mmc_UnIdle10:
;__Lib_Mmc.c,102 :: 		
0x039A	0x4B7C      	INFSNZ      __Lib_Mmc_Mmc_UnIdle_cnt_L0, 1, 1
0x039C	0x2B7D      	INCF        __Lib_Mmc_Mmc_UnIdle_cnt_L0+1, 1, 1
;__Lib_Mmc.c,156 :: 		
0x039E	0xD75F      	BRA         L___Lib_Mmc_Mmc_UnIdle5
L___Lib_Mmc_Mmc_UnIdle6:
;__Lib_Mmc.c,157 :: 		
0x03A0	0x0E01      	MOVLW       1
0x03A2	0x6E00      	MOVWF       R0 
;__Lib_Mmc.c,158 :: 		
L_end_Mmc_UnIdle:
0x03A4	0x0012      	RETURN      0
; end of __Lib_Mmc_Mmc_UnIdle
_Div_16x16_U:
;__Lib_Math.c,102 :: 		
;__Lib_Math.c,109 :: 		
0x03A6	0x6A08      	CLRF        R8, 0
;__Lib_Math.c,110 :: 		
0x03A8	0x6A09      	CLRF        R9, 0
;__Lib_Math.c,111 :: 		
0x03AA	0x0E10      	MOVLW       16
;__Lib_Math.c,112 :: 		
0x03AC	0x6E0C      	MOVWF       R12, 0
;__Lib_Math.c,113 :: 		
0x03AE	0x3401      	RLCF        R1, 0, 0
;__Lib_Math.c,114 :: 		
0x03B0	0x3608      	RLCF        R8, 1, 0
;__Lib_Math.c,115 :: 		
0x03B2	0x3609      	RLCF        R9, 1, 0
;__Lib_Math.c,116 :: 		
0x03B4	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c,117 :: 		
0x03B6	0x5E08      	SUBWF       R8, 1, 0
;__Lib_Math.c,118 :: 		
0x03B8	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,119 :: 		
0x03BA	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_Math.c,120 :: 		
0x03BC	0x3C05      	INCFSZ      R5, 0, 0
;__Lib_Math.c,121 :: 		
0x03BE	0x5E09      	SUBWF       R9, 1, 0
;__Lib_Math.c,122 :: 		
0x03C0	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_Math.c,123 :: 		
0x03C2	0xD007      	BRA         $+16
;__Lib_Math.c,124 :: 		
0x03C4	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c,125 :: 		
0x03C6	0x2608      	ADDWF       R8, 1, 0
;__Lib_Math.c,126 :: 		
0x03C8	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,127 :: 		
0x03CA	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_Math.c,128 :: 		
0x03CC	0x3C05      	INCFSZ      R5, 0, 0
;__Lib_Math.c,129 :: 		
0x03CE	0x2609      	ADDWF       R9, 1, 0
;__Lib_Math.c,130 :: 		
0x03D0	0x90D8      	BCF         STATUS, 0, 0
;__Lib_Math.c,131 :: 		
0x03D2	0x3600      	RLCF        R0, 1, 0
;__Lib_Math.c,132 :: 		
0x03D4	0x3601      	RLCF        R1, 1, 0
;__Lib_Math.c,133 :: 		
0x03D6	0x2E0C      	DECFSZ      R12, 1, 0
;__Lib_Math.c,134 :: 		
0x03D8	0xD7EA      	BRA         $-42
;__Lib_Math.c,136 :: 		
L_end_Div_16x16_U:
0x03DA	0x0012      	RETURN      0
; end of _Div_16x16_U
_Mmc_Init:
;__Lib_Mmc.c,164 :: 		
;__Lib_Mmc.c,168 :: 		
0x03DC	0x0E05      	MOVLW       5
0x03DE	0x6E26      	MOVWF       __Lib_Mmc_cardType 
;__Lib_Mmc.c,170 :: 		
0x03E0	0x9494      	BCF         Mmc_Chip_Select_Direction, BitPos(Mmc_Chip_Select_Direction+0) 
;__Lib_Mmc.c,172 :: 		
0x03E2	0xDF1B      	RCALL       __Lib_Mmc_Mmc_DeSelect
;__Lib_Mmc.c,175 :: 		
0x03E4	0x0104      	MOVLB       4
0x03E6	0x6B74      	CLRF        Mmc_Init_cnt_L0, 1
0x03E8	0x6B75      	CLRF        Mmc_Init_cnt_L0+1, 1
L_Mmc_Init19:
0x03EA	0x0E00      	MOVLW       0
0x03EC	0x5D75      	SUBWF       Mmc_Init_cnt_L0+1, 0, 1
0x03EE	0xE102      	BNZ         L__Mmc_Init86
0x03F0	0x0E0A      	MOVLW       10
0x03F2	0x5D74      	SUBWF       Mmc_Init_cnt_L0, 0, 1
L__Mmc_Init86:
0x03F4	0xE20F      	BC          L_Mmc_Init20
;__Lib_Mmc.c,176 :: 		
0x03F6	0xFFE1C245  	MOVFF       _SPI_Rd_Ptr+2, FSR1L
0x03FA	0xFFE2C246  	MOVFF       _SPI_Rd_Ptr+3, FSR1H
0x03FE	0x0EFF      	MOVLW       255
0x0400	0x6EE6      	MOVWF       POSTINC1 
0x0402	0xF000C243  	MOVFF       _SPI_Rd_Ptr, R0
0x0406	0xF001C244  	MOVFF       _SPI_Rd_Ptr+1, R1
0x040A	0xDE92      	RCALL       _____DoIFC
;__Lib_Mmc.c,175 :: 		
0x040C	0x0104      	MOVLB       4
0x040E	0x4B74      	INFSNZ      Mmc_Init_cnt_L0, 1, 1
0x0410	0x2B75      	INCF        Mmc_Init_cnt_L0+1, 1, 1
;__Lib_Mmc.c,176 :: 		
0x0412	0xD7EB      	BRA         L_Mmc_Init19
L_Mmc_Init20:
;__Lib_Mmc.c,180 :: 		
0x0414	0xDF1F      	RCALL       __Lib_Mmc_Mmc_Select
;__Lib_Mmc.c,182 :: 		
0x0416	0x6B80      	CLRF        FARG___Lib_Mmc_Mmc_Send_Command_partial_cmm, 1
0x0418	0x6B81      	CLRF        FARG___Lib_Mmc_Mmc_Send_Command_content, 1
0x041A	0x6B82      	CLRF        FARG___Lib_Mmc_Mmc_Send_Command_content+1, 1
0x041C	0x6B83      	CLRF        FARG___Lib_Mmc_Mmc_Send_Command_content+2, 1
0x041E	0x6B84      	CLRF        FARG___Lib_Mmc_Mmc_Send_Command_content+3, 1
0x0420	0x0E95      	MOVLW       149
0x0422	0x6F85      	MOVWF       FARG___Lib_Mmc_Mmc_Send_Command_crc, 1
0x0424	0xDE91      	RCALL       __Lib_Mmc_Mmc_Send_Command
0x0426	0xF476C000  	MOVFF       R0, Mmc_Init_response_L0
;__Lib_Mmc.c,183 :: 		
0x042A	0xDEF7      	RCALL       __Lib_Mmc_Mmc_DeSelect
;__Lib_Mmc.c,186 :: 		
0x042C	0x0104      	MOVLB       4
0x042E	0x5176      	MOVF        Mmc_Init_response_L0, 0, 1
0x0430	0x0A01      	XORLW       1
0x0432	0xE003      	BZ          L_Mmc_Init22
;__Lib_Mmc.c,187 :: 		
0x0434	0x0E01      	MOVLW       1
0x0436	0x6E00      	MOVWF       R0 
0x0438	0xD072      	BRA         L_end_Mmc_Init
L_Mmc_Init22:
;__Lib_Mmc.c,189 :: 		
0x043A	0xDF0C      	RCALL       __Lib_Mmc_Mmc_Select
;__Lib_Mmc.c,190 :: 		
0x043C	0x0E08      	MOVLW       8
0x043E	0x6F80      	MOVWF       FARG___Lib_Mmc_Mmc_Send_Command_partial_cmm, 1
0x0440	0x0EAA      	MOVLW       170
0x0442	0x6F81      	MOVWF       FARG___Lib_Mmc_Mmc_Send_Command_content, 1
0x0444	0x0E01      	MOVLW       1
0x0446	0x6F82      	MOVWF       FARG___Lib_Mmc_Mmc_Send_Command_content+1, 1
0x0448	0x0E00      	MOVLW       0
0x044A	0x6F83      	MOVWF       FARG___Lib_Mmc_Mmc_Send_Command_content+2, 1
0x044C	0x6F84      	MOVWF       FARG___Lib_Mmc_Mmc_Send_Command_content+3, 1
0x044E	0x0E87      	MOVLW       135
0x0450	0x6F85      	MOVWF       FARG___Lib_Mmc_Mmc_Send_Command_crc, 1
0x0452	0xDE7A      	RCALL       __Lib_Mmc_Mmc_Send_Command
0x0454	0xF476C000  	MOVFF       R0, Mmc_Init_response_L0
;__Lib_Mmc.c,192 :: 		
0x0458	0xFFE1C245  	MOVFF       _SPI_Rd_Ptr+2, FSR1L
0x045C	0xFFE2C246  	MOVFF       _SPI_Rd_Ptr+3, FSR1H
0x0460	0x0EFF      	MOVLW       255
0x0462	0x6EE6      	MOVWF       POSTINC1 
0x0464	0xF000C243  	MOVFF       _SPI_Rd_Ptr, R0
0x0468	0xF001C244  	MOVFF       _SPI_Rd_Ptr+1, R1
0x046C	0xDE61      	RCALL       _____DoIFC
;__Lib_Mmc.c,193 :: 		
0x046E	0xFFE1C245  	MOVFF       _SPI_Rd_Ptr+2, FSR1L
0x0472	0xFFE2C246  	MOVFF       _SPI_Rd_Ptr+3, FSR1H
0x0476	0x0EFF      	MOVLW       255
0x0478	0x6EE6      	MOVWF       POSTINC1 
0x047A	0xF000C243  	MOVFF       _SPI_Rd_Ptr, R0
0x047E	0xF001C244  	MOVFF       _SPI_Rd_Ptr+1, R1
0x0482	0xDE56      	RCALL       _____DoIFC
;__Lib_Mmc.c,194 :: 		
0x0484	0xFFE1C245  	MOVFF       _SPI_Rd_Ptr+2, FSR1L
0x0488	0xFFE2C246  	MOVFF       _SPI_Rd_Ptr+3, FSR1H
0x048C	0x0EFF      	MOVLW       255
0x048E	0x6EE6      	MOVWF       POSTINC1 
0x0490	0xF000C243  	MOVFF       _SPI_Rd_Ptr, R0
0x0494	0xF001C244  	MOVFF       _SPI_Rd_Ptr+1, R1
0x0498	0xDE4B      	RCALL       _____DoIFC
;__Lib_Mmc.c,195 :: 		
0x049A	0xFFE1C245  	MOVFF       _SPI_Rd_Ptr+2, FSR1L
0x049E	0xFFE2C246  	MOVFF       _SPI_Rd_Ptr+3, FSR1H
0x04A2	0x0EFF      	MOVLW       255
0x04A4	0x6EE6      	MOVWF       POSTINC1 
0x04A6	0xF000C243  	MOVFF       _SPI_Rd_Ptr, R0
0x04AA	0xF001C244  	MOVFF       _SPI_Rd_Ptr+1, R1
0x04AE	0xDE40      	RCALL       _____DoIFC
;__Lib_Mmc.c,196 :: 		
0x04B0	0xDEB4      	RCALL       __Lib_Mmc_Mmc_DeSelect
;__Lib_Mmc.c,199 :: 		
0x04B2	0x0104      	MOVLB       4
0x04B4	0x5176      	MOVF        Mmc_Init_response_L0, 0, 1
0x04B6	0x0A01      	XORLW       1
0x04B8	0xE008      	BZ          L_Mmc_Init23
;__Lib_Mmc.c,201 :: 		
0x04BA	0x0E01      	MOVLW       1
0x04BC	0x6F7B      	MOVWF       FARG___Lib_Mmc_Mmc_UnIdle_ctype, 1
0x04BE	0xDECC      	RCALL       __Lib_Mmc_Mmc_UnIdle
0x04C0	0x5200      	MOVF        R0, 1 
0x04C2	0xE002      	BZ          L_Mmc_Init24
;__Lib_Mmc.c,202 :: 		
0x04C4	0x6B7B      	CLRF        FARG___Lib_Mmc_Mmc_UnIdle_ctype, 1
0x04C6	0xDEC8      	RCALL       __Lib_Mmc_Mmc_UnIdle
L_Mmc_Init24:
;__Lib_Mmc.c,203 :: 		
0x04C8	0xD003      	BRA         L_Mmc_Init25
L_Mmc_Init23:
;__Lib_Mmc.c,206 :: 		
0x04CA	0x0E02      	MOVLW       2
0x04CC	0x6F7B      	MOVWF       FARG___Lib_Mmc_Mmc_UnIdle_ctype, 1
0x04CE	0xDEC4      	RCALL       __Lib_Mmc_Mmc_UnIdle
;__Lib_Mmc.c,207 :: 		
L_Mmc_Init25:
;__Lib_Mmc.c,210 :: 		
0x04D0	0x0E00      	MOVLW       0
0x04D2	0x0A00      	XORLW       0
0x04D4	0xE102      	BNZ         L__Mmc_Init87
0x04D6	0x0E05      	MOVLW       5
0x04D8	0x1826      	XORWF       __Lib_Mmc_cardType, 0 
L__Mmc_Init87:
0x04DA	0xE103      	BNZ         L_Mmc_Init26
;__Lib_Mmc.c,211 :: 		
0x04DC	0x0E02      	MOVLW       2
0x04DE	0x6E00      	MOVWF       R0 
0x04E0	0xD01E      	BRA         L_end_Mmc_Init
L_Mmc_Init26:
;__Lib_Mmc.c,213 :: 		
0x04E2	0x0E00      	MOVLW       0
0x04E4	0x0A00      	XORLW       0
0x04E6	0xE102      	BNZ         L__Mmc_Init88
0x04E8	0x0E04      	MOVLW       4
0x04EA	0x1826      	XORWF       __Lib_Mmc_cardType, 0 
L__Mmc_Init88:
0x04EC	0xE017      	BZ          L_Mmc_Init27
;__Lib_Mmc.c,215 :: 		
0x04EE	0xDEB2      	RCALL       __Lib_Mmc_Mmc_Select
;__Lib_Mmc.c,217 :: 		
0x04F0	0x0E10      	MOVLW       16
0x04F2	0x6F80      	MOVWF       FARG___Lib_Mmc_Mmc_Send_Command_partial_cmm, 1
0x04F4	0x0E00      	MOVLW       0
0x04F6	0x6F81      	MOVWF       FARG___Lib_Mmc_Mmc_Send_Command_content, 1
0x04F8	0x0E02      	MOVLW       2
0x04FA	0x6F82      	MOVWF       FARG___Lib_Mmc_Mmc_Send_Command_content+1, 1
0x04FC	0x0E00      	MOVLW       0
0x04FE	0x6F83      	MOVWF       FARG___Lib_Mmc_Mmc_Send_Command_content+2, 1
0x0500	0x6F84      	MOVWF       FARG___Lib_Mmc_Mmc_Send_Command_content+3, 1
0x0502	0x0EFF      	MOVLW       255
0x0504	0x6F85      	MOVWF       FARG___Lib_Mmc_Mmc_Send_Command_crc, 1
0x0506	0xDE20      	RCALL       __Lib_Mmc_Mmc_Send_Command
0x0508	0xF476C000  	MOVFF       R0, Mmc_Init_response_L0
;__Lib_Mmc.c,218 :: 		
0x050C	0xDE86      	RCALL       __Lib_Mmc_Mmc_DeSelect
;__Lib_Mmc.c,220 :: 		
0x050E	0x0104      	MOVLB       4
0x0510	0x5176      	MOVF        Mmc_Init_response_L0, 0, 1
0x0512	0x0A00      	XORLW       0
0x0514	0xE003      	BZ          L_Mmc_Init28
;__Lib_Mmc.c,221 :: 		
0x0516	0x0E03      	MOVLW       3
0x0518	0x6E00      	MOVWF       R0 
0x051A	0xD001      	BRA         L_end_Mmc_Init
L_Mmc_Init28:
;__Lib_Mmc.c,222 :: 		
L_Mmc_Init27:
;__Lib_Mmc.c,224 :: 		
0x051C	0x6A00      	CLRF        R0 
;__Lib_Mmc.c,225 :: 		
L_end_Mmc_Init:
0x051E	0x0012      	RETURN      0
; end of _Mmc_Init
_WordToStr:
;__Lib_Conversions.c,84 :: 		
;__Lib_Conversions.c,89 :: 		
0x0520	0x0104      	MOVLB       4
0x0522	0x6B78      	CLRF        WordToStr_len_L0, 1
L_WordToStr6:
0x0524	0x0E05      	MOVLW       5
0x0526	0x5D78      	SUBWF       WordToStr_len_L0, 0, 1
0x0528	0xE20A      	BC          L_WordToStr7
;__Lib_Conversions.c,90 :: 		
0x052A	0x5178      	MOVF        WordToStr_len_L0, 0, 1
0x052C	0x2576      	ADDWF       FARG_WordToStr_output, 0, 1
0x052E	0x6EE1      	MOVWF       FSR1L 
0x0530	0x0E00      	MOVLW       0
0x0532	0x2177      	ADDWFC      FARG_WordToStr_output+1, 0, 1
0x0534	0x6EE2      	MOVWF       FSR1H 
0x0536	0x0E20      	MOVLW       32
0x0538	0x6EE6      	MOVWF       POSTINC1 
;__Lib_Conversions.c,89 :: 		
0x053A	0x2B78      	INCF        WordToStr_len_L0, 1, 1
;__Lib_Conversions.c,90 :: 		
0x053C	0xD7F3      	BRA         L_WordToStr6
L_WordToStr7:
;__Lib_Conversions.c,91 :: 		
0x053E	0x5178      	MOVF        WordToStr_len_L0, 0, 1
0x0540	0x2576      	ADDWF       FARG_WordToStr_output, 0, 1
0x0542	0x6EE1      	MOVWF       FSR1L 
0x0544	0x0E00      	MOVLW       0
0x0546	0x2177      	ADDWFC      FARG_WordToStr_output+1, 0, 1
0x0548	0x6EE2      	MOVWF       FSR1H 
0x054A	0x6AE6      	CLRF        POSTINC1 
0x054C	0x0778      	DECF        WordToStr_len_L0, 1, 1
;__Lib_Conversions.c,93 :: 		
L_WordToStr9:
;__Lib_Conversions.c,94 :: 		
0x054E	0x5178      	MOVF        WordToStr_len_L0, 0, 1
0x0550	0x2576      	ADDWF       FARG_WordToStr_output, 0, 1
0x0552	0x6F79      	MOVWF       FLOC__WordToStr, 1
0x0554	0x0E00      	MOVLW       0
0x0556	0x2177      	ADDWFC      FARG_WordToStr_output+1, 0, 1
0x0558	0x6F7A      	MOVWF       FLOC__WordToStr+1, 1
0x055A	0x0E0A      	MOVLW       10
0x055C	0x6E04      	MOVWF       R4 
0x055E	0x0E00      	MOVLW       0
0x0560	0x6E05      	MOVWF       R5 
0x0562	0xF000C474  	MOVFF       FARG_WordToStr_input, R0
0x0566	0xF001C475  	MOVFF       FARG_WordToStr_input+1, R1
0x056A	0xDF1D      	RCALL       _Div_16x16_U
0x056C	0xF000C008  	MOVFF       R8, R0
0x0570	0xF001C009  	MOVFF       R9, R1
0x0574	0x0E30      	MOVLW       48
0x0576	0x2600      	ADDWF       R0, 1 
0x0578	0xFFE1C479  	MOVFF       FLOC__WordToStr, FSR1L
0x057C	0xFFE2C47A  	MOVFF       FLOC__WordToStr+1, FSR1H
0x0580	0xFFE6C000  	MOVFF       R0, POSTINC1
;__Lib_Conversions.c,95 :: 		
0x0584	0x0E0A      	MOVLW       10
0x0586	0x6E04      	MOVWF       R4 
0x0588	0x0E00      	MOVLW       0
0x058A	0x6E05      	MOVWF       R5 
0x058C	0xF000C474  	MOVFF       FARG_WordToStr_input, R0
0x0590	0xF001C475  	MOVFF       FARG_WordToStr_input+1, R1
0x0594	0xDF08      	RCALL       _Div_16x16_U
0x0596	0xF474C000  	MOVFF       R0, FARG_WordToStr_input
0x059A	0xF475C001  	MOVFF       R1, FARG_WordToStr_input+1
;__Lib_Conversions.c,96 :: 		
0x059E	0x0E00      	MOVLW       0
0x05A0	0x1801      	XORWF       R1, 0 
0x05A2	0xE102      	BNZ         L__WordToStr109
0x05A4	0x0E00      	MOVLW       0
0x05A6	0x1800      	XORWF       R0, 0 
L__WordToStr109:
0x05A8	0xE101      	BNZ         L_WordToStr11
;__Lib_Conversions.c,97 :: 		
0x05AA	0xD002      	BRA         L_WordToStr10
L_WordToStr11:
;__Lib_Conversions.c,98 :: 		
0x05AC	0x0778      	DECF        WordToStr_len_L0, 1, 1
;__Lib_Conversions.c,99 :: 		
0x05AE	0xD7CF      	BRA         L_WordToStr9
L_WordToStr10:
;__Lib_Conversions.c,100 :: 		
L_end_WordToStr:
0x05B0	0x0012      	RETURN      0
; end of _WordToStr
_UART_Write:
;__Lib_UART_c67.c,119 :: 		
;__Lib_UART_c67.c,120 :: 		
0x05B2	0xFFE1C035  	MOVFF       _UART_Wr_Ptr+2, FSR1L
0x05B6	0xFFE2C036  	MOVFF       _UART_Wr_Ptr+3, FSR1H
0x05BA	0xFFE6C474  	MOVFF       FARG_UART_Write__data, POSTINC1
0x05BE	0xF000C033  	MOVFF       _UART_Wr_Ptr, R0
0x05C2	0xF001C034  	MOVFF       _UART_Wr_Ptr+1, R1
0x05C6	0xDDB4      	RCALL       _____DoIFC
;__Lib_UART_c67.c,121 :: 		
L_end_UART_Write:
0x05C8	0x0012      	RETURN      0
; end of _UART_Write
_SPI1_Init_Advanced:
;__Lib_SPI_c345.c,40 :: 		
;__Lib_SPI_c345.c,41 :: 		
0x05CA	0x0E1E      	MOVLW       _SPI1_Read
0x05CC	0x0102      	MOVLB       2
0x05CE	0x6F43      	MOVWF       _SPI_Rd_Ptr, 1
0x05D0	0x0E01      	MOVLW       hi_addr(_SPI1_Read)
0x05D2	0x6F44      	MOVWF       _SPI_Rd_Ptr+1, 1
0x05D4	0x0E89      	MOVLW       FARG_SPI1_Read_buffer
0x05D6	0x6F45      	MOVWF       _SPI_Rd_Ptr+2, 1
0x05D8	0x0E04      	MOVLW       hi_addr(FARG_SPI1_Read_buffer)
0x05DA	0x6F46      	MOVWF       _SPI_Rd_Ptr+3, 1
;__Lib_SPI_c345.c,42 :: 		
0x05DC	0x0E42      	MOVLW       _SPI1_Write
0x05DE	0x6E2B      	MOVWF       _SPI_Wr_Ptr 
0x05E0	0x0E02      	MOVLW       hi_addr(_SPI1_Write)
0x05E2	0x6E2C      	MOVWF       _SPI_Wr_Ptr+1 
0x05E4	0x0E80      	MOVLW       FARG_SPI1_Write_data_
0x05E6	0x6E2D      	MOVWF       _SPI_Wr_Ptr+2 
0x05E8	0x0E04      	MOVLW       hi_addr(FARG_SPI1_Write_data_)
0x05EA	0x6E2E      	MOVWF       _SPI_Wr_Ptr+3 
;__Lib_SPI_c345.c,44 :: 		
0x05EC	0x9A94      	BCF         TRISC5_bit, BitPos(TRISC5_bit+0) 
;__Lib_SPI_c345.c,45 :: 		
0x05EE	0x0104      	MOVLB       4
0x05F0	0x5174      	MOVF        FARG_SPI1_Init_Advanced_master, 0, 1
0x05F2	0x0A04      	XORLW       4
0x05F4	0xE102      	BNZ         L_SPI1_Init_Advanced0
0x05F6	0x8694      	BSF         TRISC3_bit, BitPos(TRISC3_bit+0) 
0x05F8	0xD001      	BRA         L_SPI1_Init_Advanced1
L_SPI1_Init_Advanced0:
;__Lib_SPI_c345.c,46 :: 		
0x05FA	0x9694      	BCF         TRISC3_bit, BitPos(TRISC3_bit+0) 
L_SPI1_Init_Advanced1:
;__Lib_SPI_c345.c,47 :: 		
0x05FC	0x8894      	BSF         TRISC4_bit, BitPos(TRISC4_bit+0) 
;__Lib_SPI_c345.c,49 :: 		
0x05FE	0x6AC6      	CLRF        SSPCON1 
;__Lib_SPI_c345.c,50 :: 		
0x0600	0x5174      	MOVF        FARG_SPI1_Init_Advanced_master, 0, 1
0x0602	0x12C6      	IORWF       SSPCON1, 1 
;__Lib_SPI_c345.c,51 :: 		
0x0604	0x5176      	MOVF        FARG_SPI1_Init_Advanced_clock_idle, 0, 1
0x0606	0x12C6      	IORWF       SSPCON1, 1 
;__Lib_SPI_c345.c,52 :: 		
0x0608	0x5175      	MOVF        FARG_SPI1_Init_Advanced_data_sample, 0, 1
0x060A	0x12C7      	IORWF       SSPSTAT, 1 
;__Lib_SPI_c345.c,54 :: 		
0x060C	0x5376      	MOVF        FARG_SPI1_Init_Advanced_clock_idle, 1, 1
0x060E	0xE005      	BZ          L_SPI1_Init_Advanced2
;__Lib_SPI_c345.c,55 :: 		
0x0610	0x5177      	MOVF        FARG_SPI1_Init_Advanced_transmit_edge, 0, 1
0x0612	0x0A00      	XORLW       0
0x0614	0xB4D8      	BTFSC       STATUS, 2 
;__Lib_SPI_c345.c,56 :: 		
0x0616	0x8CC7      	BSF         SSPSTAT, 6 
L_SPI1_Init_Advanced3:
;__Lib_SPI_c345.c,57 :: 		
0x0618	0xD003      	BRA         L_SPI1_Init_Advanced4
L_SPI1_Init_Advanced2:
;__Lib_SPI_c345.c,59 :: 		
0x061A	0x5377      	MOVF        FARG_SPI1_Init_Advanced_transmit_edge, 1, 1
0x061C	0xA4D8      	BTFSS       STATUS, 2 
;__Lib_SPI_c345.c,60 :: 		
0x061E	0x8CC7      	BSF         SSPSTAT, 6 
L_SPI1_Init_Advanced5:
;__Lib_SPI_c345.c,61 :: 		
L_SPI1_Init_Advanced4:
;__Lib_SPI_c345.c,62 :: 		
0x0620	0x8AC6      	BSF         SSPCON1, 5 
;__Lib_SPI_c345.c,63 :: 		
L_end_SPI1_Init_Advanced:
0x0622	0x0012      	RETURN      0
; end of _SPI1_Init_Advanced
_UART_Write_Text:
;__Lib_UART_c67.c,123 :: 		
;__Lib_UART_c67.c,124 :: 		
0x0624	0x0104      	MOVLB       4
0x0626	0x6B69      	CLRF        UART_Write_Text_counter_L0, 1
;__Lib_UART_c67.c,126 :: 		
0x0628	0xFFE9C466  	MOVFF       FARG_UART_Write_Text_uart_text, FSR0L
0x062C	0xFFEAC467  	MOVFF       FARG_UART_Write_Text_uart_text+1, FSR0H
0x0630	0xF468CFEE  	MOVFF       POSTINC0, UART_Write_Text_data__L0
;__Lib_UART_c67.c,127 :: 		
L_UART_Write_Text16:
0x0634	0x5168      	MOVF        UART_Write_Text_data__L0, 0, 1
0x0636	0x0A00      	XORLW       0
0x0638	0xE00E      	BZ          L_UART_Write_Text17
;__Lib_UART_c67.c,128 :: 		
0x063A	0xF474C468  	MOVFF       UART_Write_Text_data__L0, FARG_UART_Write__data
0x063E	0xDFB9      	RCALL       _UART_Write
;__Lib_UART_c67.c,129 :: 		
0x0640	0x0104      	MOVLB       4
0x0642	0x2B69      	INCF        UART_Write_Text_counter_L0, 1, 1
;__Lib_UART_c67.c,130 :: 		
0x0644	0x5169      	MOVF        UART_Write_Text_counter_L0, 0, 1
0x0646	0x2566      	ADDWF       FARG_UART_Write_Text_uart_text, 0, 1
0x0648	0x6EE9      	MOVWF       FSR0L 
0x064A	0x0E00      	MOVLW       0
0x064C	0x2167      	ADDWFC      FARG_UART_Write_Text_uart_text+1, 0, 1
0x064E	0x6EEA      	MOVWF       FSR0H 
0x0650	0xF468CFEE  	MOVFF       POSTINC0, UART_Write_Text_data__L0
;__Lib_UART_c67.c,131 :: 		
0x0654	0xD7EF      	BRA         L_UART_Write_Text16
L_UART_Write_Text17:
;__Lib_UART_c67.c,132 :: 		
L_end_UART_Write_Text:
0x0656	0x0012      	RETURN      0
; end of _UART_Write_Text
___CC2DW:
;__Lib_System.c,21 :: 		
;__Lib_System.c,23 :: 		
_CC2DL_Loop1:
;__Lib_System.c,24 :: 		
0x0658	0x0009      	TBLRD*+
;__Lib_System.c,25 :: 		
0x065A	0xFFE6CFF5  	MOVFF       TABLAT, POSTINC1
;__Lib_System.c,26 :: 		
0x065E	0x0600      	DECF        R0, 1, 0
;__Lib_System.c,27 :: 		
0x0660	0xE1FB      	BNZ         _CC2DL_Loop1
;__Lib_System.c,28 :: 		
0x0662	0x0601      	DECF        R1, 1, 0
;__Lib_System.c,29 :: 		
0x0664	0xE1F9      	BNZ         _CC2DL_Loop1
;__Lib_System.c,31 :: 		
L_end___CC2DW:
0x0666	0x0012      	RETURN      0
; end of ___CC2DW
_codeToRam:
;soundrec.c,90 :: 		char* codeToRam(const char* ctxt)
;soundrec.c,94 :: 		for(i =0; txt[i] = ctxt[i]; i++);
0x0668	0x6A03      	CLRF        R3 
L_codeToRam0:
0x066A	0x0E47      	MOVLW       codeToRam_txt_L0
0x066C	0x6E01      	MOVWF       R1 
0x066E	0x0E04      	MOVLW       hi_addr(codeToRam_txt_L0)
0x0670	0x6E02      	MOVWF       R2 
0x0672	0x5003      	MOVF        R3, 0 
0x0674	0x2601      	ADDWF       R1, 1 
0x0676	0xB0D8      	BTFSC       STATUS, 0 
0x0678	0x2A02      	INCF        R2, 1 
0x067A	0x5003      	MOVF        R3, 0 
0x067C	0x0104      	MOVLB       4
0x067E	0x2566      	ADDWF       FARG_codeToRam_ctxt, 0, 1
0x0680	0x6EF6      	MOVWF       4086 
0x0682	0x0E00      	MOVLW       0
0x0684	0x2167      	ADDWFC      FARG_codeToRam_ctxt+1, 0, 1
0x0686	0x6EF7      	MOVWF       TBLPTRH 
0x0688	0x0E00      	MOVLW       0
0x068A	0x2168      	ADDWFC      FARG_codeToRam_ctxt+2, 0, 1
0x068C	0x6EF8      	MOVWF       TBLPTRU 
0x068E	0x0009      	TBLRD*+
0x0690	0xF000CFF5  	MOVFF       TABLAT, R0
0x0694	0xFFE1C001  	MOVFF       R1, FSR1L
0x0698	0xFFE2C002  	MOVFF       R2, FSR1H
0x069C	0xFFE6C000  	MOVFF       R0, POSTINC1
0x06A0	0xFFE9C001  	MOVFF       R1, FSR0L
0x06A4	0xFFEAC002  	MOVFF       R2, FSR0H
0x06A8	0x52EE      	MOVF        POSTINC0, 1 
0x06AA	0xE002      	BZ          L_codeToRam1
0x06AC	0x2A03      	INCF        R3, 1 
0x06AE	0xD7DD      	BRA         L_codeToRam0
L_codeToRam1:
;soundrec.c,96 :: 		return txt;
0x06B0	0x0E47      	MOVLW       codeToRam_txt_L0
0x06B2	0x6E00      	MOVWF       R0 
0x06B4	0x0E04      	MOVLW       hi_addr(codeToRam_txt_L0)
0x06B6	0x6E01      	MOVWF       R1 
;soundrec.c,97 :: 		}
L_end_codeToRam:
0x06B8	0x0012      	RETURN      0
; end of _codeToRam
_UART1_Init:
;__Lib_UART_c67.c,15 :: 		
;__Lib_UART_c67.c,18 :: 		
0x06BA	0x0E34      	MOVLW       _UART1_Write
0x06BC	0x6E33      	MOVWF       _UART_Wr_Ptr 
0x06BE	0x0E02      	MOVLW       hi_addr(_UART1_Write)
0x06C0	0x6E34      	MOVWF       _UART_Wr_Ptr+1 
0x06C2	0x0E80      	MOVLW       FARG_UART1_Write_data_
0x06C4	0x6E35      	MOVWF       _UART_Wr_Ptr+2 
0x06C6	0x0E04      	MOVLW       hi_addr(FARG_UART1_Write_data_)
0x06C8	0x6E36      	MOVWF       _UART_Wr_Ptr+3 
;__Lib_UART_c67.c,19 :: 		
0x06CA	0x0EFF      	MOVLW       _UART1_Read
0x06CC	0x6E2F      	MOVWF       _UART_Rd_Ptr 
0x06CE	0x0EFF      	MOVLW       hi_addr(_UART1_Read)
0x06D0	0x6E30      	MOVWF       _UART_Rd_Ptr+1 
0x06D2	0x0E00      	MOVLW       0
0x06D4	0x6E31      	MOVWF       _UART_Rd_Ptr+2 
0x06D6	0x0E00      	MOVLW       0
0x06D8	0x6E32      	MOVWF       _UART_Rd_Ptr+3 
;__Lib_UART_c67.c,20 :: 		
0x06DA	0x0EFF      	MOVLW       _UART1_Data_Ready
0x06DC	0x0104      	MOVLB       4
0x06DE	0x6F5B      	MOVWF       _UART_Rdy_Ptr, 1
0x06E0	0x0EFF      	MOVLW       hi_addr(_UART1_Data_Ready)
0x06E2	0x6F5C      	MOVWF       _UART_Rdy_Ptr+1, 1
0x06E4	0x0E00      	MOVLW       0
0x06E6	0x6F5D      	MOVWF       _UART_Rdy_Ptr+2, 1
0x06E8	0x0E00      	MOVLW       0
0x06EA	0x6F5E      	MOVWF       _UART_Rdy_Ptr+3, 1
;__Lib_UART_c67.c,21 :: 		
0x06EC	0x0EFF      	MOVLW       _UART1_Tx_Idle
0x06EE	0x6F5F      	MOVWF       _UART_Tx_Idle_Ptr, 1
0x06F0	0x0EFF      	MOVLW       hi_addr(_UART1_Tx_Idle)
0x06F2	0x6F60      	MOVWF       _UART_Tx_Idle_Ptr+1, 1
0x06F4	0x0E00      	MOVLW       0
0x06F6	0x6F61      	MOVWF       _UART_Tx_Idle_Ptr+2, 1
0x06F8	0x0E00      	MOVLW       0
0x06FA	0x6F62      	MOVWF       _UART_Tx_Idle_Ptr+3, 1
;__Lib_UART_c67.c,23 :: 		
0x06FC	0x8AAC      	BSF         TXSTA, 5 
;__Lib_UART_c67.c,24 :: 		
0x06FE	0x0E90      	MOVLW       144
0x0700	0x6EAB      	MOVWF       RCSTA 
;__Lib_UART_c67.c,25 :: 		
0x0702	0x8E94      	BSF         TRISC7_bit, BitPos(TRISC7_bit+0) 
;__Lib_UART_c67.c,26 :: 		
0x0704	0x9C94      	BCF         TRISC6_bit, BitPos(TRISC6_bit+0) 
;__Lib_UART_c67.c,28 :: 		
L_UART1_Init0:
0x0706	0xAA9E      	BTFSS       PIR1, 5 
0x0708	0xD003      	BRA         L_UART1_Init1
;__Lib_UART_c67.c,29 :: 		
0x070A	0xF000CFAE  	MOVFF       RCREG, R0
0x070E	0xD7FB      	BRA         L_UART1_Init0
L_UART1_Init1:
;__Lib_UART_c67.c,30 :: 		
L_end_UART1_Init:
0x0710	0x0012      	RETURN      0
; end of _UART1_Init
_adcInit:
;adc.c,51 :: 		void adcInit(void)
;adc.c,53 :: 		ADCON1 = 0x0e;
0x0712	0x0E0E      	MOVLW       14
0x0714	0x6EC1      	MOVWF       ADCON1 
;adc.c,54 :: 		ADCON2 = 0x2d;
0x0716	0x0E2D      	MOVLW       45
0x0718	0x6EC0      	MOVWF       ADCON2 
;adc.c,56 :: 		ADCON0 |= (1 << ADON);
0x071A	0x80C2      	BSF         ADCON0, 0 
;adc.c,60 :: 		}
L_end_adcInit:
0x071C	0x0012      	RETURN      0
; end of _adcInit
_IntToStr:
;__Lib_Conversions.c,146 :: 		
;__Lib_Conversions.c,152 :: 		
0x071E	0x0104      	MOVLB       4
0x0720	0x6B6C      	CLRF        IntToStr_negative_L0, 1
0x0722	0x6B6D      	CLRF        IntToStr_negative_L0+1, 1
;__Lib_Conversions.c,153 :: 		
0x0724	0xF46EC466  	MOVFF       FARG_IntToStr_input, IntToStr_inword_L0
0x0728	0xF46FC467  	MOVFF       FARG_IntToStr_input+1, IntToStr_inword_L0+1
;__Lib_Conversions.c,154 :: 		
0x072C	0x0E80      	MOVLW       128
0x072E	0x1967      	XORWF       FARG_IntToStr_input+1, 0, 1
0x0730	0x6E00      	MOVWF       R0 
0x0732	0x0E80      	MOVLW       128
0x0734	0x5C00      	SUBWF       R0, 0 
0x0736	0xE102      	BNZ         L__IntToStr115
0x0738	0x0E00      	MOVLW       0
0x073A	0x5D66      	SUBWF       FARG_IntToStr_input, 0, 1
L__IntToStr115:
0x073C	0xE20B      	BC          L_IntToStr23
;__Lib_Conversions.c,155 :: 		
0x073E	0x0E01      	MOVLW       1
0x0740	0x6F6C      	MOVWF       IntToStr_negative_L0, 1
0x0742	0x0E00      	MOVLW       0
0x0744	0x6F6D      	MOVWF       IntToStr_negative_L0+1, 1
;__Lib_Conversions.c,156 :: 		
0x0746	0x5166      	MOVF        FARG_IntToStr_input, 0, 1
0x0748	0x0800      	SUBLW       0
0x074A	0x6F6E      	MOVWF       IntToStr_inword_L0, 1
0x074C	0xF46FC467  	MOVFF       FARG_IntToStr_input+1, IntToStr_inword_L0+1
0x0750	0x0E00      	MOVLW       0
0x0752	0x576F      	SUBFWB      IntToStr_inword_L0+1, 1, 1
;__Lib_Conversions.c,157 :: 		
L_IntToStr23:
;__Lib_Conversions.c,158 :: 		
0x0754	0xF474C46E  	MOVFF       IntToStr_inword_L0, FARG_WordToStr_input
0x0758	0xF475C46F  	MOVFF       IntToStr_inword_L0+1, FARG_WordToStr_input+1
0x075C	0xF476C468  	MOVFF       FARG_IntToStr_output, FARG_WordToStr_output
0x0760	0xF477C469  	MOVFF       FARG_IntToStr_output+1, FARG_WordToStr_output+1
0x0764	0xDEDD      	RCALL       _WordToStr
;__Lib_Conversions.c,160 :: 		
0x0766	0x0E06      	MOVLW       6
0x0768	0x6F6A      	MOVWF       IntToStr_i_L0, 1
0x076A	0x0E00      	MOVLW       0
0x076C	0x6F6B      	MOVWF       IntToStr_i_L0+1, 1
;__Lib_Conversions.c,161 :: 		
L_IntToStr24:
0x076E	0x0E00      	MOVLW       0
0x0770	0x6E00      	MOVWF       R0 
0x0772	0x516B      	MOVF        IntToStr_i_L0+1, 0, 1
0x0774	0x5C00      	SUBWF       R0, 0 
0x0776	0xE102      	BNZ         L__IntToStr116
0x0778	0x516A      	MOVF        IntToStr_i_L0, 0, 1
0x077A	0x0800      	SUBLW       0
L__IntToStr116:
0x077C	0xE219      	BC          L_IntToStr25
;__Lib_Conversions.c,162 :: 		
0x077E	0x516A      	MOVF        IntToStr_i_L0, 0, 1
0x0780	0x2568      	ADDWF       FARG_IntToStr_output, 0, 1
0x0782	0x6EE1      	MOVWF       FSR1L 
0x0784	0x516B      	MOVF        IntToStr_i_L0+1, 0, 1
0x0786	0x2169      	ADDWFC      FARG_IntToStr_output+1, 0, 1
0x0788	0x6EE2      	MOVWF       FSR1H 
0x078A	0x0E01      	MOVLW       1
0x078C	0x5D6A      	SUBWF       IntToStr_i_L0, 0, 1
0x078E	0x6E00      	MOVWF       R0 
0x0790	0x0E00      	MOVLW       0
0x0792	0x596B      	SUBWFB      IntToStr_i_L0+1, 0, 1
0x0794	0x6E01      	MOVWF       R1 
0x0796	0x5000      	MOVF        R0, 0 
0x0798	0x2568      	ADDWF       FARG_IntToStr_output, 0, 1
0x079A	0x6EE9      	MOVWF       FSR0L 
0x079C	0x5001      	MOVF        R1, 0 
0x079E	0x2169      	ADDWFC      FARG_IntToStr_output+1, 0, 1
0x07A0	0x6EEA      	MOVWF       FSR0H 
0x07A2	0xFFE6CFEE  	MOVFF       POSTINC0, POSTINC1
;__Lib_Conversions.c,163 :: 		
0x07A6	0x0E01      	MOVLW       1
0x07A8	0x5F6A      	SUBWF       IntToStr_i_L0, 1, 1
0x07AA	0x0E00      	MOVLW       0
0x07AC	0x5B6B      	SUBWFB      IntToStr_i_L0+1, 1, 1
;__Lib_Conversions.c,164 :: 		
0x07AE	0xD7DF      	BRA         L_IntToStr24
L_IntToStr25:
;__Lib_Conversions.c,165 :: 		
0x07B0	0xFFE1C468  	MOVFF       FARG_IntToStr_output, FSR1L
0x07B4	0xFFE2C469  	MOVFF       FARG_IntToStr_output+1, FSR1H
0x07B8	0x0E20      	MOVLW       32
0x07BA	0x6EE6      	MOVWF       POSTINC1 
;__Lib_Conversions.c,166 :: 		
0x07BC	0x516C      	MOVF        IntToStr_negative_L0, 0, 1
0x07BE	0x116D      	IORWF       IntToStr_negative_L0+1, 0, 1
0x07C0	0xE01A      	BZ          L_IntToStr26
;__Lib_Conversions.c,167 :: 		
0x07C2	0x6B6A      	CLRF        IntToStr_i_L0, 1
0x07C4	0x6B6B      	CLRF        IntToStr_i_L0+1, 1
;__Lib_Conversions.c,168 :: 		
L_IntToStr27:
0x07C6	0x516A      	MOVF        IntToStr_i_L0, 0, 1
0x07C8	0x2568      	ADDWF       FARG_IntToStr_output, 0, 1
0x07CA	0x6EE9      	MOVWF       FSR0L 
0x07CC	0x516B      	MOVF        IntToStr_i_L0+1, 0, 1
0x07CE	0x2169      	ADDWFC      FARG_IntToStr_output+1, 0, 1
0x07D0	0x6EEA      	MOVWF       FSR0H 
0x07D2	0x50EE      	MOVF        POSTINC0, 0 
0x07D4	0x0A20      	XORLW       32
0x07D6	0xE103      	BNZ         L_IntToStr28
0x07D8	0x4B6A      	INFSNZ      IntToStr_i_L0, 1, 1
0x07DA	0x2B6B      	INCF        IntToStr_i_L0+1, 1, 1
0x07DC	0xD7F4      	BRA         L_IntToStr27
L_IntToStr28:
;__Lib_Conversions.c,169 :: 		
0x07DE	0x0E01      	MOVLW       1
0x07E0	0x5F6A      	SUBWF       IntToStr_i_L0, 1, 1
0x07E2	0x0E00      	MOVLW       0
0x07E4	0x5B6B      	SUBWFB      IntToStr_i_L0+1, 1, 1
;__Lib_Conversions.c,170 :: 		
0x07E6	0x516A      	MOVF        IntToStr_i_L0, 0, 1
0x07E8	0x2568      	ADDWF       FARG_IntToStr_output, 0, 1
0x07EA	0x6EE1      	MOVWF       FSR1L 
0x07EC	0x516B      	MOVF        IntToStr_i_L0+1, 0, 1
0x07EE	0x2169      	ADDWFC      FARG_IntToStr_output+1, 0, 1
0x07F0	0x6EE2      	MOVWF       FSR1H 
0x07F2	0x0E2D      	MOVLW       45
0x07F4	0x6EE6      	MOVWF       POSTINC1 
L_IntToStr26:
;__Lib_Conversions.c,171 :: 		
L_end_IntToStr:
0x07F6	0x0012      	RETURN      0
; end of _IntToStr
_Mmc_Write_Sector:
;__Lib_Mmc.c,276 :: 		
;__Lib_Mmc.c,280 :: 		
0x07F8	0xDD2D      	RCALL       __Lib_Mmc_Mmc_Select
;__Lib_Mmc.c,282 :: 		
0x07FA	0x0E00      	MOVLW       0
0x07FC	0x0A00      	XORLW       0
0x07FE	0xE102      	BNZ         L__Mmc_Write_Sector95
0x0800	0x0E04      	MOVLW       4
0x0802	0x1826      	XORWF       __Lib_Mmc_cardType, 0 
L__Mmc_Write_Sector95:
0x0804	0xE109      	BNZ         L_Mmc_Write_Sector37
;__Lib_Mmc.c,283 :: 		
0x0806	0xF46EC466  	MOVFF       FARG_Mmc_Write_Sector_sector, Mmc_Write_Sector_byte_start_L0
0x080A	0xF46FC467  	MOVFF       FARG_Mmc_Write_Sector_sector+1, Mmc_Write_Sector_byte_start_L0+1
0x080E	0xF470C468  	MOVFF       FARG_Mmc_Write_Sector_sector+2, Mmc_Write_Sector_byte_start_L0+2
0x0812	0xF471C469  	MOVFF       FARG_Mmc_Write_Sector_sector+3, Mmc_Write_Sector_byte_start_L0+3
0x0816	0xD014      	BRA         L_Mmc_Write_Sector38
L_Mmc_Write_Sector37:
;__Lib_Mmc.c,285 :: 		
0x0818	0x0E09      	MOVLW       9
0x081A	0x6E00      	MOVWF       R0 
0x081C	0xF46EC466  	MOVFF       FARG_Mmc_Write_Sector_sector, Mmc_Write_Sector_byte_start_L0
0x0820	0xF46FC467  	MOVFF       FARG_Mmc_Write_Sector_sector+1, Mmc_Write_Sector_byte_start_L0+1
0x0824	0xF470C468  	MOVFF       FARG_Mmc_Write_Sector_sector+2, Mmc_Write_Sector_byte_start_L0+2
0x0828	0xF471C469  	MOVFF       FARG_Mmc_Write_Sector_sector+3, Mmc_Write_Sector_byte_start_L0+3
0x082C	0x5000      	MOVF        R0, 0 
L__Mmc_Write_Sector96:
0x082E	0xE008      	BZ          L__Mmc_Write_Sector97
0x0830	0x0104      	MOVLB       4
0x0832	0x376E      	RLCF        Mmc_Write_Sector_byte_start_L0, 1, 1
0x0834	0x916E      	BCF         Mmc_Write_Sector_byte_start_L0, 0, 1
0x0836	0x376F      	RLCF        Mmc_Write_Sector_byte_start_L0+1, 1, 1
0x0838	0x3770      	RLCF        Mmc_Write_Sector_byte_start_L0+2, 1, 1
0x083A	0x3771      	RLCF        Mmc_Write_Sector_byte_start_L0+3, 1, 1
0x083C	0x0FFF      	ADDLW       255
0x083E	0xD7F7      	BRA         L__Mmc_Write_Sector96
L__Mmc_Write_Sector97:
L_Mmc_Write_Sector38:
0x0840	0x0104      	MOVLB       4
;__Lib_Mmc.c,288 :: 		
0x0842	0x0E18      	MOVLW       24
0x0844	0x6F80      	MOVWF       FARG___Lib_Mmc_Mmc_Send_Command_partial_cmm, 1
0x0846	0xF481C46E  	MOVFF       Mmc_Write_Sector_byte_start_L0, FARG___Lib_Mmc_Mmc_Send_Command_content
0x084A	0xF482C46F  	MOVFF       Mmc_Write_Sector_byte_start_L0+1, FARG___Lib_Mmc_Mmc_Send_Command_content+1
0x084E	0xF483C470  	MOVFF       Mmc_Write_Sector_byte_start_L0+2, FARG___Lib_Mmc_Mmc_Send_Command_content+2
0x0852	0xF484C471  	MOVFF       Mmc_Write_Sector_byte_start_L0+3, FARG___Lib_Mmc_Mmc_Send_Command_content+3
0x0856	0x0EFF      	MOVLW       255
0x0858	0x6F85      	MOVWF       FARG___Lib_Mmc_Mmc_Send_Command_crc, 1
0x085A	0xDC76      	RCALL       __Lib_Mmc_Mmc_Send_Command
0x085C	0x5200      	MOVF        R0, 1 
0x085E	0xE004      	BZ          L_Mmc_Write_Sector39
;__Lib_Mmc.c,290 :: 		
0x0860	0xDCDC      	RCALL       __Lib_Mmc_Mmc_DeSelect
;__Lib_Mmc.c,291 :: 		
0x0862	0x0E01      	MOVLW       1
0x0864	0x6E00      	MOVWF       R0 
0x0866	0xD08C      	BRA         L_end_Mmc_Write_Sector
;__Lib_Mmc.c,292 :: 		
L_Mmc_Write_Sector39:
;__Lib_Mmc.c,296 :: 		
0x0868	0xFFE1C245  	MOVFF       _SPI_Rd_Ptr+2, FSR1L
0x086C	0xFFE2C246  	MOVFF       _SPI_Rd_Ptr+3, FSR1H
0x0870	0x0EFF      	MOVLW       255
0x0872	0x6EE6      	MOVWF       POSTINC1 
0x0874	0xF000C243  	MOVFF       _SPI_Rd_Ptr, R0
0x0878	0xF001C244  	MOVFF       _SPI_Rd_Ptr+1, R1
0x087C	0xDC59      	RCALL       _____DoIFC
;__Lib_Mmc.c,297 :: 		
0x087E	0xFFE1C245  	MOVFF       _SPI_Rd_Ptr+2, FSR1L
0x0882	0xFFE2C246  	MOVFF       _SPI_Rd_Ptr+3, FSR1H
0x0886	0x0EFF      	MOVLW       255
0x0888	0x6EE6      	MOVWF       POSTINC1 
0x088A	0xF000C243  	MOVFF       _SPI_Rd_Ptr, R0
0x088E	0xF001C244  	MOVFF       _SPI_Rd_Ptr+1, R1
0x0892	0xDC4E      	RCALL       _____DoIFC
;__Lib_Mmc.c,300 :: 		
0x0894	0xFFE1C245  	MOVFF       _SPI_Rd_Ptr+2, FSR1L
0x0898	0xFFE2C246  	MOVFF       _SPI_Rd_Ptr+3, FSR1H
0x089C	0x0EFE      	MOVLW       254
0x089E	0x6EE6      	MOVWF       POSTINC1 
0x08A0	0xF000C243  	MOVFF       _SPI_Rd_Ptr, R0
0x08A4	0xF001C244  	MOVFF       _SPI_Rd_Ptr+1, R1
0x08A8	0xDC43      	RCALL       _____DoIFC
;__Lib_Mmc.c,303 :: 		
0x08AA	0x0104      	MOVLB       4
0x08AC	0x6B6C      	CLRF        Mmc_Write_Sector_i_L0, 1
0x08AE	0x6B6D      	CLRF        Mmc_Write_Sector_i_L0+1, 1
L_Mmc_Write_Sector40:
0x08B0	0x516D      	MOVF        Mmc_Write_Sector_i_L0+1, 0, 1
0x08B2	0x0801      	SUBLW       1
0x08B4	0xE102      	BNZ         L__Mmc_Write_Sector98
0x08B6	0x516C      	MOVF        Mmc_Write_Sector_i_L0, 0, 1
0x08B8	0x08FF      	SUBLW       255
L__Mmc_Write_Sector98:
0x08BA	0xE315      	BNC         L_Mmc_Write_Sector41
;__Lib_Mmc.c,304 :: 		
0x08BC	0x516C      	MOVF        Mmc_Write_Sector_i_L0, 0, 1
0x08BE	0x256A      	ADDWF       FARG_Mmc_Write_Sector_dbuff, 0, 1
0x08C0	0x6EE9      	MOVWF       FSR0L 
0x08C2	0x516D      	MOVF        Mmc_Write_Sector_i_L0+1, 0, 1
0x08C4	0x216B      	ADDWFC      FARG_Mmc_Write_Sector_dbuff+1, 0, 1
0x08C6	0x6EEA      	MOVWF       FSR0H 
0x08C8	0xFFE1C245  	MOVFF       _SPI_Rd_Ptr+2, FSR1L
0x08CC	0xFFE2C246  	MOVFF       _SPI_Rd_Ptr+3, FSR1H
0x08D0	0xFFE6CFEE  	MOVFF       POSTINC0, POSTINC1
0x08D4	0xF000C243  	MOVFF       _SPI_Rd_Ptr, R0
0x08D8	0xF001C244  	MOVFF       _SPI_Rd_Ptr+1, R1
0x08DC	0xDC29      	RCALL       _____DoIFC
;__Lib_Mmc.c,303 :: 		
0x08DE	0x0104      	MOVLB       4
0x08E0	0x4B6C      	INFSNZ      Mmc_Write_Sector_i_L0, 1, 1
0x08E2	0x2B6D      	INCF        Mmc_Write_Sector_i_L0+1, 1, 1
;__Lib_Mmc.c,305 :: 		
0x08E4	0xD7E5      	BRA         L_Mmc_Write_Sector40
L_Mmc_Write_Sector41:
;__Lib_Mmc.c,308 :: 		
0x08E6	0xFFE1C245  	MOVFF       _SPI_Rd_Ptr+2, FSR1L
0x08EA	0xFFE2C246  	MOVFF       _SPI_Rd_Ptr+3, FSR1H
0x08EE	0x0EFF      	MOVLW       255
0x08F0	0x6EE6      	MOVWF       POSTINC1 
0x08F2	0xF000C243  	MOVFF       _SPI_Rd_Ptr, R0
0x08F6	0xF001C244  	MOVFF       _SPI_Rd_Ptr+1, R1
0x08FA	0xDC1A      	RCALL       _____DoIFC
;__Lib_Mmc.c,309 :: 		
0x08FC	0xFFE1C245  	MOVFF       _SPI_Rd_Ptr+2, FSR1L
0x0900	0xFFE2C246  	MOVFF       _SPI_Rd_Ptr+3, FSR1H
0x0904	0x0EFF      	MOVLW       255
0x0906	0x6EE6      	MOVWF       POSTINC1 
0x0908	0xF000C243  	MOVFF       _SPI_Rd_Ptr, R0
0x090C	0xF001C244  	MOVFF       _SPI_Rd_Ptr+1, R1
0x0910	0xDC0F      	RCALL       _____DoIFC
;__Lib_Mmc.c,312 :: 		
0x0912	0xFFE1C245  	MOVFF       _SPI_Rd_Ptr+2, FSR1L
0x0916	0xFFE2C246  	MOVFF       _SPI_Rd_Ptr+3, FSR1H
0x091A	0x0EFF      	MOVLW       255
0x091C	0x6EE6      	MOVWF       POSTINC1 
0x091E	0xF000C243  	MOVFF       _SPI_Rd_Ptr, R0
0x0922	0xF001C244  	MOVFF       _SPI_Rd_Ptr+1, R1
0x0926	0xDC04      	RCALL       _____DoIFC
0x0928	0xF46CC000  	MOVFF       R0, Mmc_Write_Sector_i_L0
0x092C	0x0E00      	MOVLW       0
0x092E	0x0104      	MOVLB       4
0x0930	0x6F6D      	MOVWF       Mmc_Write_Sector_i_L0+1, 1
;__Lib_Mmc.c,313 :: 		
0x0932	0x0E1F      	MOVLW       31
0x0934	0x156C      	ANDWF       Mmc_Write_Sector_i_L0, 0, 1
0x0936	0x6E01      	MOVWF       R1 
0x0938	0xF002C46D  	MOVFF       Mmc_Write_Sector_i_L0+1, R2
0x093C	0x0E00      	MOVLW       0
0x093E	0x1602      	ANDWF       R2, 1 
0x0940	0xF46CC001  	MOVFF       R1, Mmc_Write_Sector_i_L0
0x0944	0xF46DC002  	MOVFF       R2, Mmc_Write_Sector_i_L0+1
;__Lib_Mmc.c,314 :: 		
0x0948	0x0E00      	MOVLW       0
0x094A	0x1802      	XORWF       R2, 0 
0x094C	0xE102      	BNZ         L__Mmc_Write_Sector99
0x094E	0x0E05      	MOVLW       5
0x0950	0x1801      	XORWF       R1, 0 
L__Mmc_Write_Sector99:
0x0952	0xE004      	BZ          L_Mmc_Write_Sector43
;__Lib_Mmc.c,316 :: 		
0x0954	0xDC62      	RCALL       __Lib_Mmc_Mmc_DeSelect
;__Lib_Mmc.c,317 :: 		
0x0956	0x0E02      	MOVLW       2
0x0958	0x6E00      	MOVWF       R0 
0x095A	0xD012      	BRA         L_end_Mmc_Write_Sector
;__Lib_Mmc.c,318 :: 		
L_Mmc_Write_Sector43:
;__Lib_Mmc.c,320 :: 		
L_Mmc_Write_Sector44:
0x095C	0xFFE1C245  	MOVFF       _SPI_Rd_Ptr+2, FSR1L
0x0960	0xFFE2C246  	MOVFF       _SPI_Rd_Ptr+3, FSR1H
0x0964	0x0EFF      	MOVLW       255
0x0966	0x6EE6      	MOVWF       POSTINC1 
0x0968	0xF000C243  	MOVFF       _SPI_Rd_Ptr, R0
0x096C	0xF001C244  	MOVFF       _SPI_Rd_Ptr+1, R1
0x0970	0xF000EC98  	CALL        _____DoIFC, 0
0x0974	0x5000      	MOVF        R0, 0 
0x0976	0x0AFF      	XORLW       255
0x0978	0xE001      	BZ          L_Mmc_Write_Sector45
;__Lib_Mmc.c,321 :: 		
0x097A	0xD7F0      	BRA         L_Mmc_Write_Sector44
L_Mmc_Write_Sector45:
;__Lib_Mmc.c,323 :: 		
0x097C	0xDC4E      	RCALL       __Lib_Mmc_Mmc_DeSelect
;__Lib_Mmc.c,326 :: 		
0x097E	0x6A00      	CLRF        R0 
;__Lib_Mmc.c,327 :: 		
L_end_Mmc_Write_Sector:
0x0980	0x0012      	RETURN      0
; end of _Mmc_Write_Sector
_timer1Config:
;soundrec.c,400 :: 		void timer1Config(void)
;soundrec.c,402 :: 		PIE1 = (1 << TMR1IE);
0x0982	0x0E01      	MOVLW       1
0x0984	0x6E9D      	MOVWF       PIE1 
;soundrec.c,404 :: 		TMR1H = 0xfe;
0x0986	0x0EFE      	MOVLW       254
0x0988	0x6ECF      	MOVWF       TMR1H 
;soundrec.c,405 :: 		TMR1L = 0xc7;
0x098A	0x0EC7      	MOVLW       199
0x098C	0x6ECE      	MOVWF       TMR1L 
;soundrec.c,406 :: 		}
L_end_timer1Config:
0x098E	0x0012      	RETURN      0
; end of _timer1Config
_Mmc_Read_Sector:
;__Lib_Mmc.c,231 :: 		
;__Lib_Mmc.c,236 :: 		
0x0990	0xDC61      	RCALL       __Lib_Mmc_Mmc_Select
;__Lib_Mmc.c,238 :: 		
0x0992	0x0E00      	MOVLW       0
0x0994	0x0A00      	XORLW       0
0x0996	0xE102      	BNZ         L__Mmc_Read_Sector90
0x0998	0x0E04      	MOVLW       4
0x099A	0x1826      	XORWF       __Lib_Mmc_cardType, 0 
L__Mmc_Read_Sector90:
0x099C	0xE109      	BNZ         L_Mmc_Read_Sector29
;__Lib_Mmc.c,239 :: 		
0x099E	0xF46EC466  	MOVFF       FARG_Mmc_Read_Sector_sector, Mmc_Read_Sector_byte_start_L0
0x09A2	0xF46FC467  	MOVFF       FARG_Mmc_Read_Sector_sector+1, Mmc_Read_Sector_byte_start_L0+1
0x09A6	0xF470C468  	MOVFF       FARG_Mmc_Read_Sector_sector+2, Mmc_Read_Sector_byte_start_L0+2
0x09AA	0xF471C469  	MOVFF       FARG_Mmc_Read_Sector_sector+3, Mmc_Read_Sector_byte_start_L0+3
0x09AE	0xD014      	BRA         L_Mmc_Read_Sector30
L_Mmc_Read_Sector29:
;__Lib_Mmc.c,241 :: 		
0x09B0	0x0E09      	MOVLW       9
0x09B2	0x6E00      	MOVWF       R0 
0x09B4	0xF46EC466  	MOVFF       FARG_Mmc_Read_Sector_sector, Mmc_Read_Sector_byte_start_L0
0x09B8	0xF46FC467  	MOVFF       FARG_Mmc_Read_Sector_sector+1, Mmc_Read_Sector_byte_start_L0+1
0x09BC	0xF470C468  	MOVFF       FARG_Mmc_Read_Sector_sector+2, Mmc_Read_Sector_byte_start_L0+2
0x09C0	0xF471C469  	MOVFF       FARG_Mmc_Read_Sector_sector+3, Mmc_Read_Sector_byte_start_L0+3
0x09C4	0x5000      	MOVF        R0, 0 
L__Mmc_Read_Sector91:
0x09C6	0xE008      	BZ          L__Mmc_Read_Sector92
0x09C8	0x0104      	MOVLB       4
0x09CA	0x376E      	RLCF        Mmc_Read_Sector_byte_start_L0, 1, 1
0x09CC	0x916E      	BCF         Mmc_Read_Sector_byte_start_L0, 0, 1
0x09CE	0x376F      	RLCF        Mmc_Read_Sector_byte_start_L0+1, 1, 1
0x09D0	0x3770      	RLCF        Mmc_Read_Sector_byte_start_L0+2, 1, 1
0x09D2	0x3771      	RLCF        Mmc_Read_Sector_byte_start_L0+3, 1, 1
0x09D4	0x0FFF      	ADDLW       255
0x09D6	0xD7F7      	BRA         L__Mmc_Read_Sector91
L__Mmc_Read_Sector92:
L_Mmc_Read_Sector30:
0x09D8	0x0104      	MOVLB       4
;__Lib_Mmc.c,244 :: 		
0x09DA	0x0E11      	MOVLW       17
0x09DC	0x6F80      	MOVWF       FARG___Lib_Mmc_Mmc_Send_Command_partial_cmm, 1
0x09DE	0xF481C46E  	MOVFF       Mmc_Read_Sector_byte_start_L0, FARG___Lib_Mmc_Mmc_Send_Command_content
0x09E2	0xF482C46F  	MOVFF       Mmc_Read_Sector_byte_start_L0+1, FARG___Lib_Mmc_Mmc_Send_Command_content+1
0x09E6	0xF483C470  	MOVFF       Mmc_Read_Sector_byte_start_L0+2, FARG___Lib_Mmc_Mmc_Send_Command_content+2
0x09EA	0xF484C471  	MOVFF       Mmc_Read_Sector_byte_start_L0+3, FARG___Lib_Mmc_Mmc_Send_Command_content+3
0x09EE	0x0EFF      	MOVLW       255
0x09F0	0x6F85      	MOVWF       FARG___Lib_Mmc_Mmc_Send_Command_crc, 1
0x09F2	0xF000ECA4  	CALL        __Lib_Mmc_Mmc_Send_Command, 0
;__Lib_Mmc.c,245 :: 		
0x09F6	0x5200      	MOVF        R0, 1 
0x09F8	0xE004      	BZ          L_Mmc_Read_Sector31
;__Lib_Mmc.c,247 :: 		
0x09FA	0xDC0F      	RCALL       __Lib_Mmc_Mmc_DeSelect
;__Lib_Mmc.c,248 :: 		
0x09FC	0x0E01      	MOVLW       1
0x09FE	0x6E00      	MOVWF       R0 
0x0A00	0xD050      	BRA         L_end_Mmc_Read_Sector
;__Lib_Mmc.c,249 :: 		
L_Mmc_Read_Sector31:
;__Lib_Mmc.c,251 :: 		
L_Mmc_Read_Sector32:
0x0A02	0xFFE1C245  	MOVFF       _SPI_Rd_Ptr+2, FSR1L
0x0A06	0xFFE2C246  	MOVFF       _SPI_Rd_Ptr+3, FSR1H
0x0A0A	0x0EFF      	MOVLW       255
0x0A0C	0x6EE6      	MOVWF       POSTINC1 
0x0A0E	0xF000C243  	MOVFF       _SPI_Rd_Ptr, R0
0x0A12	0xF001C244  	MOVFF       _SPI_Rd_Ptr+1, R1
0x0A16	0xF000EC98  	CALL        _____DoIFC, 0
0x0A1A	0x5000      	MOVF        R0, 0 
0x0A1C	0x0AFE      	XORLW       254
0x0A1E	0xE001      	BZ          L_Mmc_Read_Sector33
;__Lib_Mmc.c,252 :: 		
0x0A20	0xD7F0      	BRA         L_Mmc_Read_Sector32
L_Mmc_Read_Sector33:
;__Lib_Mmc.c,255 :: 		
0x0A22	0x0104      	MOVLB       4
0x0A24	0x6B6C      	CLRF        Mmc_Read_Sector_i_L0, 1
0x0A26	0x6B6D      	CLRF        Mmc_Read_Sector_i_L0+1, 1
L_Mmc_Read_Sector34:
0x0A28	0x0E02      	MOVLW       2
0x0A2A	0x5D6D      	SUBWF       Mmc_Read_Sector_i_L0+1, 0, 1
0x0A2C	0xE102      	BNZ         L__Mmc_Read_Sector93
0x0A2E	0x0E00      	MOVLW       0
0x0A30	0x5D6C      	SUBWF       Mmc_Read_Sector_i_L0, 0, 1
L__Mmc_Read_Sector93:
0x0A32	0xE21C      	BC          L_Mmc_Read_Sector35
;__Lib_Mmc.c,257 :: 		
0x0A34	0x516C      	MOVF        Mmc_Read_Sector_i_L0, 0, 1
0x0A36	0x256A      	ADDWF       FARG_Mmc_Read_Sector_dbuff, 0, 1
0x0A38	0x6F72      	MOVWF       FLOC__Mmc_Read_Sector, 1
0x0A3A	0x516D      	MOVF        Mmc_Read_Sector_i_L0+1, 0, 1
0x0A3C	0x216B      	ADDWFC      FARG_Mmc_Read_Sector_dbuff+1, 0, 1
0x0A3E	0x6F73      	MOVWF       FLOC__Mmc_Read_Sector+1, 1
0x0A40	0xFFE1C245  	MOVFF       _SPI_Rd_Ptr+2, FSR1L
0x0A44	0xFFE2C246  	MOVFF       _SPI_Rd_Ptr+3, FSR1H
0x0A48	0x0EFF      	MOVLW       255
0x0A4A	0x6EE6      	MOVWF       POSTINC1 
0x0A4C	0xF000C243  	MOVFF       _SPI_Rd_Ptr, R0
0x0A50	0xF001C244  	MOVFF       _SPI_Rd_Ptr+1, R1
0x0A54	0xF000EC98  	CALL        _____DoIFC, 0
0x0A58	0xFFE1C472  	MOVFF       FLOC__Mmc_Read_Sector, FSR1L
0x0A5C	0xFFE2C473  	MOVFF       FLOC__Mmc_Read_Sector+1, FSR1H
0x0A60	0xFFE6C000  	MOVFF       R0, POSTINC1
;__Lib_Mmc.c,255 :: 		
0x0A64	0x0104      	MOVLB       4
0x0A66	0x4B6C      	INFSNZ      Mmc_Read_Sector_i_L0, 1, 1
0x0A68	0x2B6D      	INCF        Mmc_Read_Sector_i_L0+1, 1, 1
;__Lib_Mmc.c,258 :: 		
0x0A6A	0xD7DE      	BRA         L_Mmc_Read_Sector34
L_Mmc_Read_Sector35:
;__Lib_Mmc.c,261 :: 		
0x0A6C	0xFFE1C245  	MOVFF       _SPI_Rd_Ptr+2, FSR1L
0x0A70	0xFFE2C246  	MOVFF       _SPI_Rd_Ptr+3, FSR1H
0x0A74	0x0EFF      	MOVLW       255
0x0A76	0x6EE6      	MOVWF       POSTINC1 
0x0A78	0xF000C243  	MOVFF       _SPI_Rd_Ptr, R0
0x0A7C	0xF001C244  	MOVFF       _SPI_Rd_Ptr+1, R1
0x0A80	0xF000EC98  	CALL        _____DoIFC, 0
;__Lib_Mmc.c,262 :: 		
0x0A84	0xFFE1C245  	MOVFF       _SPI_Rd_Ptr+2, FSR1L
0x0A88	0xFFE2C246  	MOVFF       _SPI_Rd_Ptr+3, FSR1H
0x0A8C	0x0EFF      	MOVLW       255
0x0A8E	0x6EE6      	MOVWF       POSTINC1 
0x0A90	0xF000C243  	MOVFF       _SPI_Rd_Ptr, R0
0x0A94	0xF001C244  	MOVFF       _SPI_Rd_Ptr+1, R1
0x0A98	0xF000EC98  	CALL        _____DoIFC, 0
;__Lib_Mmc.c,264 :: 		
0x0A9C	0xF001EC0D  	CALL        __Lib_Mmc_Mmc_DeSelect, 0
;__Lib_Mmc.c,267 :: 		
0x0AA0	0x6A00      	CLRF        R0 
;__Lib_Mmc.c,268 :: 		
L_end_Mmc_Read_Sector:
0x0AA2	0x0012      	RETURN      0
; end of _Mmc_Read_Sector
_specialEventTriggerSetup:
;adc.c,22 :: 		void specialEventTriggerSetup(void)
;adc.c,25 :: 		CCP2CON = (1 << CCP2M3) | (1 << CCP2M1) | (1 << CCP2M0);
0x0AA4	0x0E0B      	MOVLW       11
0x0AA6	0x6EBA      	MOVWF       CCP2CON 
;adc.c,29 :: 		T3CON = (1 << T3CCP2) | (1 << T3CKPS1) | (1 << T3CKPS0);
0x0AA8	0x0E70      	MOVLW       112
0x0AAA	0x6EB1      	MOVWF       T3CON 
;adc.c,32 :: 		CCPR2H = 0x3d;
0x0AAC	0x0E3D      	MOVLW       61
0x0AAE	0x6EBC      	MOVWF       CCPR2H 
;adc.c,33 :: 		CCPR2L = 0x09;
0x0AB0	0x0E09      	MOVLW       9
0x0AB2	0x6EBB      	MOVWF       CCPR2L 
;adc.c,34 :: 		}
L_end_specialEventTriggerSetup:
0x0AB4	0x0012      	RETURN      0
; end of _specialEventTriggerSetup
_mmcBuiltinInit:
;soundrec.c,304 :: 		void mmcBuiltinInit(void)
;soundrec.c,308 :: 		_SPI_CLK_IDLE_LOW, _SPI_LOW_2_HIGH);
0x0AB6	0x0E02      	MOVLW       2
0x0AB8	0x0104      	MOVLB       4
0x0ABA	0x6F74      	MOVWF       FARG_SPI1_Init_Advanced_master, 1
0x0ABC	0x6B75      	CLRF        FARG_SPI1_Init_Advanced_data_sample, 1
0x0ABE	0x6B76      	CLRF        FARG_SPI1_Init_Advanced_clock_idle, 1
0x0AC0	0x0E01      	MOVLW       1
0x0AC2	0x6F77      	MOVWF       FARG_SPI1_Init_Advanced_transmit_edge, 1
0x0AC4	0xDD82      	RCALL       _SPI1_Init_Advanced
;soundrec.c,311 :: 		while (MMC_Init() != 0)
L_mmcBuiltinInit49:
0x0AC6	0xDC8A      	RCALL       _Mmc_Init
0x0AC8	0x5000      	MOVF        R0, 0 
0x0ACA	0x0A00      	XORLW       0
0x0ACC	0xE001      	BZ          L_mmcBuiltinInit50
;soundrec.c,313 :: 		}
0x0ACE	0xD7FB      	BRA         L_mmcBuiltinInit49
L_mmcBuiltinInit50:
;soundrec.c,317 :: 		_SPI_CLK_IDLE_LOW, _SPI_LOW_2_HIGH);
0x0AD0	0x6B74      	CLRF        FARG_SPI1_Init_Advanced_master, 1
0x0AD2	0x6B75      	CLRF        FARG_SPI1_Init_Advanced_data_sample, 1
0x0AD4	0x6B76      	CLRF        FARG_SPI1_Init_Advanced_clock_idle, 1
0x0AD6	0x0E01      	MOVLW       1
0x0AD8	0x6F77      	MOVWF       FARG_SPI1_Init_Advanced_transmit_edge, 1
0x0ADA	0xDD77      	RCALL       _SPI1_Init_Advanced
;soundrec.c,318 :: 		}
L_end_mmcBuiltinInit:
0x0ADC	0x0012      	RETURN      0
; end of _mmcBuiltinInit
_main:
0x0ADE	0xF009EC71  	CALL        4834, 0
;soundrec.c,99 :: 		void main()
;soundrec.c,105 :: 		INTCON2 &= ~(1 << 7); // nRBPU = 0
0x0AE2	0x0E7F      	MOVLW       127
0x0AE4	0x16F1      	ANDWF       INTCON2, 1 
;soundrec.c,107 :: 		ptr = &buffer0[0];
0x0AE6	0x0E47      	MOVLW       _buffer0
0x0AE8	0x6E37      	MOVWF       soundrec_ptr 
0x0AEA	0x0E02      	MOVLW       hi_addr(_buffer0)
0x0AEC	0x6E38      	MOVWF       soundrec_ptr+1 
;soundrec.c,108 :: 		currentBuffer = 0;
0x0AEE	0x6A27      	CLRF        _currentBuffer 
;soundrec.c,109 :: 		adcInit();
0x0AF0	0xDE10      	RCALL       _adcInit
;soundrec.c,110 :: 		Delay_ms(100);
0x0AF2	0x0E03      	MOVLW       3
0x0AF4	0x6E0B      	MOVWF       R11, 0
0x0AF6	0x0E8A      	MOVLW       138
0x0AF8	0x6E0C      	MOVWF       R12, 0
0x0AFA	0x0E55      	MOVLW       85
0x0AFC	0x6E0D      	MOVWF       R13, 0
L_main3:
0x0AFE	0x2E0D      	DECFSZ      R13, 1, 0
0x0B00	0xD7FE      	BRA         L_main3
0x0B02	0x2E0C      	DECFSZ      R12, 1, 0
0x0B04	0xD7FC      	BRA         L_main3
0x0B06	0x2E0B      	DECFSZ      R11, 1, 0
0x0B08	0xD7FA      	BRA         L_main3
0x0B0A	0x0000      	NOP
0x0B0C	0x0000      	NOP
;soundrec.c,115 :: 		TRISD = 0x00; // output for DAC0808
0x0B0E	0x6A95      	CLRF        TRISD 
;soundrec.c,117 :: 		TRISB = (1 << RB0) | (1 << RB1); // B0, B1 input; remains output
0x0B10	0x0E03      	MOVLW       3
0x0B12	0x6E93      	MOVWF       TRISB 
;soundrec.c,118 :: 		TRISC &= ~(1 << 2); // output for CS pin
0x0B14	0x9494      	BCF         TRISC, 2 
;soundrec.c,121 :: 		LATD = 0x40;
0x0B16	0x0E40      	MOVLW       64
0x0B18	0x6E8C      	MOVWF       LATD 
;soundrec.c,123 :: 		UART1_Init(9600);
0x0B1A	0x86B8      	BSF         BAUDCON, 3, 0
0x0B1C	0x0E02      	MOVLW       2
0x0B1E	0x6EB0      	MOVWF       SPBRGH 
0x0B20	0x0E08      	MOVLW       8
0x0B22	0x6EAF      	MOVWF       SPBRG 
0x0B24	0x84AC      	BSF         TXSTA, 2, 0
0x0B26	0xDDC9      	RCALL       _UART1_Init
;soundrec.c,124 :: 		UWR(codeToRam(uart_welcome));
0x0B28	0x0EC8      	MOVLW       _uart_welcome
0x0B2A	0x6F66      	MOVWF       FARG_codeToRam_ctxt, 1
0x0B2C	0x0E12      	MOVLW       hi_addr(_uart_welcome)
0x0B2E	0x6F67      	MOVWF       FARG_codeToRam_ctxt+1, 1
0x0B30	0x0E00      	MOVLW       higher_addr(_uart_welcome)
0x0B32	0x6F68      	MOVWF       FARG_codeToRam_ctxt+2, 1
0x0B34	0xDD99      	RCALL       _codeToRam
0x0B36	0xF466C000  	MOVFF       R0, FARG_UART_Write_Text_uart_text
0x0B3A	0xF467C001  	MOVFF       R1, FARG_UART_Write_Text_uart_text+1
0x0B3E	0xDD72      	RCALL       _UART_Write_Text
0x0B40	0x0E0D      	MOVLW       13
0x0B42	0x6F74      	MOVWF       FARG_UART_Write__data, 1
0x0B44	0xDD36      	RCALL       _UART_Write
0x0B46	0x0E0A      	MOVLW       10
0x0B48	0x0104      	MOVLB       4
0x0B4A	0x6F74      	MOVWF       FARG_UART_Write__data, 1
0x0B4C	0xDD32      	RCALL       _UART_Write
;soundrec.c,125 :: 		mmcBuiltinInit();
0x0B4E	0xDFB3      	RCALL       _mmcBuiltinInit
;soundrec.c,126 :: 		specialEventTriggerSetup();
0x0B50	0xDFA9      	RCALL       _specialEventTriggerSetup
;soundrec.c,127 :: 		timer1Config();
0x0B52	0xDF17      	RCALL       _timer1Config
;soundrec.c,134 :: 		INTCON |= (1 << GIE) | (1 << PEIE);	/* Global interrupt */
0x0B54	0x0EC0      	MOVLW       192
0x0B56	0x12F2      	IORWF       INTCON, 1 
;soundrec.c,136 :: 		for (;;)        					/* Repeat forever */
L_main4:
;soundrec.c,138 :: 		while (SLCT != 0)
L_main7:
0x0B58	0xA081      	BTFSS       RB0_bit, BitPos(RB0_bit+0) 
0x0B5A	0xD001      	BRA         L_main8
;soundrec.c,140 :: 		}
0x0B5C	0xD7FD      	BRA         L_main7
L_main8:
0x0B5E	0x0104      	MOVLB       4
;soundrec.c,142 :: 		UWR(codeToRam(uart_menu));
0x0B60	0x0E87      	MOVLW       _uart_menu
0x0B62	0x6F66      	MOVWF       FARG_codeToRam_ctxt, 1
0x0B64	0x0E12      	MOVLW       hi_addr(_uart_menu)
0x0B66	0x6F67      	MOVWF       FARG_codeToRam_ctxt+1, 1
0x0B68	0x0E00      	MOVLW       higher_addr(_uart_menu)
0x0B6A	0x6F68      	MOVWF       FARG_codeToRam_ctxt+2, 1
0x0B6C	0xDD7D      	RCALL       _codeToRam
0x0B6E	0xF466C000  	MOVFF       R0, FARG_UART_Write_Text_uart_text
0x0B72	0xF467C001  	MOVFF       R1, FARG_UART_Write_Text_uart_text+1
0x0B76	0xDD56      	RCALL       _UART_Write_Text
0x0B78	0x0E0D      	MOVLW       13
0x0B7A	0x6F74      	MOVWF       FARG_UART_Write__data, 1
0x0B7C	0xDD1A      	RCALL       _UART_Write
0x0B7E	0x0E0A      	MOVLW       10
0x0B80	0x0104      	MOVLB       4
0x0B82	0x6F74      	MOVWF       FARG_UART_Write__data, 1
0x0B84	0xDD16      	RCALL       _UART_Write
;soundrec.c,144 :: 		while (OK)	/* OK not pressed */
L_main9:
0x0B86	0xA281      	BTFSS       RB1_bit, BitPos(RB1_bit+0) 
0x0B88	0xD0D2      	BRA         L_main10
;soundrec.c,146 :: 		if (!SLCT)	/* SLCT */
0x0B8A	0xB081      	BTFSC       RB0_bit, BitPos(RB0_bit+0) 
0x0B8C	0xD022      	BRA         L_main11
;soundrec.c,148 :: 		Delay_ms(300);
0x0B8E	0x0E08      	MOVLW       8
0x0B90	0x6E0B      	MOVWF       R11, 0
0x0B92	0x0E9D      	MOVLW       157
0x0B94	0x6E0C      	MOVWF       R12, 0
0x0B96	0x0E05      	MOVLW       5
0x0B98	0x6E0D      	MOVWF       R13, 0
L_main12:
0x0B9A	0x2E0D      	DECFSZ      R13, 1, 0
0x0B9C	0xD7FE      	BRA         L_main12
0x0B9E	0x2E0C      	DECFSZ      R12, 1, 0
0x0BA0	0xD7FC      	BRA         L_main12
0x0BA2	0x2E0B      	DECFSZ      R11, 1, 0
0x0BA4	0xD7FA      	BRA         L_main12
0x0BA6	0x0000      	NOP
0x0BA8	0x0000      	NOP
;soundrec.c,149 :: 		mode++;
0x0BAA	0x0E01      	MOVLW       1
0x0BAC	0x2428      	ADDWF       _mode, 0 
0x0BAE	0x6E00      	MOVWF       R0 
0x0BB0	0x0E00      	MOVLW       0
0x0BB2	0x2029      	ADDWFC      _mode+1, 0 
0x0BB4	0x6E01      	MOVWF       R1 
0x0BB6	0xF028C000  	MOVFF       R0, _mode
0x0BBA	0xF029C001  	MOVFF       R1, _mode+1
;soundrec.c,150 :: 		if (mode == 5)
0x0BBE	0x0E00      	MOVLW       0
0x0BC0	0x1829      	XORWF       _mode+1, 0 
0x0BC2	0xE102      	BNZ         L__main64
0x0BC4	0x0E05      	MOVLW       5
0x0BC6	0x1828      	XORWF       _mode, 0 
L__main64:
0x0BC8	0xE104      	BNZ         L_main13
;soundrec.c,152 :: 		mode = 1;
0x0BCA	0x0E01      	MOVLW       1
0x0BCC	0x6E28      	MOVWF       _mode 
0x0BCE	0x0E00      	MOVLW       0
0x0BD0	0x6E29      	MOVWF       _mode+1 
;soundrec.c,153 :: 		}
L_main13:
;soundrec.c,154 :: 		}
L_main11:
;soundrec.c,156 :: 		if ((mode == 1) & (lastMode != mode))
0x0BD2	0x0E00      	MOVLW       0
0x0BD4	0x1829      	XORWF       _mode+1, 0 
0x0BD6	0xE102      	BNZ         L__main65
0x0BD8	0x0E01      	MOVLW       1
0x0BDA	0x1828      	XORWF       _mode, 0 
L__main65:
0x0BDC	0x0E01      	MOVLW       1
0x0BDE	0xA4D8      	BTFSS       STATUS, 2 
0x0BE0	0x0E00      	MOVLW       0
0x0BE2	0x6E01      	MOVWF       R1 
0x0BE4	0x0E00      	MOVLW       0
0x0BE6	0x1829      	XORWF       _mode+1, 0 
0x0BE8	0xE103      	BNZ         L__main66
0x0BEA	0x5028      	MOVF        _mode, 0 
0x0BEC	0x0104      	MOVLB       4
0x0BEE	0x1963      	XORWF       main_lastMode_L0, 0, 1
L__main66:
0x0BF0	0x0E00      	MOVLW       0
0x0BF2	0xA4D8      	BTFSS       STATUS, 2 
0x0BF4	0x0E01      	MOVLW       1
0x0BF6	0x6E00      	MOVWF       R0 
0x0BF8	0x5001      	MOVF        R1, 0 
0x0BFA	0x1600      	ANDWF       R0, 1 
0x0BFC	0xE015      	BZ          L_main14
;soundrec.c,158 :: 		UWR(codeToRam(uart_record));
0x0BFE	0x0104      	MOVLB       4
0x0C00	0x0ED0      	MOVLW       _uart_record
0x0C02	0x6F66      	MOVWF       FARG_codeToRam_ctxt, 1
0x0C04	0x0E12      	MOVLW       hi_addr(_uart_record)
0x0C06	0x6F67      	MOVWF       FARG_codeToRam_ctxt+1, 1
0x0C08	0x0E00      	MOVLW       higher_addr(_uart_record)
0x0C0A	0x6F68      	MOVWF       FARG_codeToRam_ctxt+2, 1
0x0C0C	0xDD2D      	RCALL       _codeToRam
0x0C0E	0xF466C000  	MOVFF       R0, FARG_UART_Write_Text_uart_text
0x0C12	0xF467C001  	MOVFF       R1, FARG_UART_Write_Text_uart_text+1
0x0C16	0xDD06      	RCALL       _UART_Write_Text
0x0C18	0x0E0D      	MOVLW       13
0x0C1A	0x6F74      	MOVWF       FARG_UART_Write__data, 1
0x0C1C	0xDCCA      	RCALL       _UART_Write
0x0C1E	0x0E0A      	MOVLW       10
0x0C20	0x0104      	MOVLB       4
0x0C22	0x6F74      	MOVWF       FARG_UART_Write__data, 1
0x0C24	0xDCC6      	RCALL       _UART_Write
;soundrec.c,159 :: 		}
0x0C26	0xD080      	BRA         L_main15
L_main14:
;soundrec.c,160 :: 		else if ((mode == 2) & (lastMode != mode))
0x0C28	0x0E00      	MOVLW       0
0x0C2A	0x1829      	XORWF       _mode+1, 0 
0x0C2C	0xE102      	BNZ         L__main67
0x0C2E	0x0E02      	MOVLW       2
0x0C30	0x1828      	XORWF       _mode, 0 
L__main67:
0x0C32	0x0E01      	MOVLW       1
0x0C34	0xA4D8      	BTFSS       STATUS, 2 
0x0C36	0x0E00      	MOVLW       0
0x0C38	0x6E01      	MOVWF       R1 
0x0C3A	0x0E00      	MOVLW       0
0x0C3C	0x1829      	XORWF       _mode+1, 0 
0x0C3E	0xE103      	BNZ         L__main68
0x0C40	0x5028      	MOVF        _mode, 0 
0x0C42	0x0104      	MOVLB       4
0x0C44	0x1963      	XORWF       main_lastMode_L0, 0, 1
L__main68:
0x0C46	0x0E00      	MOVLW       0
0x0C48	0xA4D8      	BTFSS       STATUS, 2 
0x0C4A	0x0E01      	MOVLW       1
0x0C4C	0x6E00      	MOVWF       R0 
0x0C4E	0x5001      	MOVF        R1, 0 
0x0C50	0x1600      	ANDWF       R0, 1 
0x0C52	0xE015      	BZ          L_main16
;soundrec.c,162 :: 		UWR(codeToRam(uart_play));
0x0C54	0x0104      	MOVLB       4
0x0C56	0x0EDC      	MOVLW       _uart_play
0x0C58	0x6F66      	MOVWF       FARG_codeToRam_ctxt, 1
0x0C5A	0x0E12      	MOVLW       hi_addr(_uart_play)
0x0C5C	0x6F67      	MOVWF       FARG_codeToRam_ctxt+1, 1
0x0C5E	0x0E00      	MOVLW       higher_addr(_uart_play)
0x0C60	0x6F68      	MOVWF       FARG_codeToRam_ctxt+2, 1
0x0C62	0xDD02      	RCALL       _codeToRam
0x0C64	0xF466C000  	MOVFF       R0, FARG_UART_Write_Text_uart_text
0x0C68	0xF467C001  	MOVFF       R1, FARG_UART_Write_Text_uart_text+1
0x0C6C	0xDCDB      	RCALL       _UART_Write_Text
0x0C6E	0x0E0D      	MOVLW       13
0x0C70	0x6F74      	MOVWF       FARG_UART_Write__data, 1
0x0C72	0xDC9F      	RCALL       _UART_Write
0x0C74	0x0E0A      	MOVLW       10
0x0C76	0x0104      	MOVLB       4
0x0C78	0x6F74      	MOVWF       FARG_UART_Write__data, 1
0x0C7A	0xDC9B      	RCALL       _UART_Write
;soundrec.c,163 :: 		}
0x0C7C	0xD055      	BRA         L_main17
L_main16:
;soundrec.c,164 :: 		else if ((mode == 3) & (lastMode != mode))
0x0C7E	0x0E00      	MOVLW       0
0x0C80	0x1829      	XORWF       _mode+1, 0 
0x0C82	0xE102      	BNZ         L__main69
0x0C84	0x0E03      	MOVLW       3
0x0C86	0x1828      	XORWF       _mode, 0 
L__main69:
0x0C88	0x0E01      	MOVLW       1
0x0C8A	0xA4D8      	BTFSS       STATUS, 2 
0x0C8C	0x0E00      	MOVLW       0
0x0C8E	0x6E01      	MOVWF       R1 
0x0C90	0x0E00      	MOVLW       0
0x0C92	0x1829      	XORWF       _mode+1, 0 
0x0C94	0xE103      	BNZ         L__main70
0x0C96	0x5028      	MOVF        _mode, 0 
0x0C98	0x0104      	MOVLB       4
0x0C9A	0x1963      	XORWF       main_lastMode_L0, 0, 1
L__main70:
0x0C9C	0x0E00      	MOVLW       0
0x0C9E	0xA4D8      	BTFSS       STATUS, 2 
0x0CA0	0x0E01      	MOVLW       1
0x0CA2	0x6E00      	MOVWF       R0 
0x0CA4	0x5001      	MOVF        R1, 0 
0x0CA6	0x1600      	ANDWF       R0, 1 
0x0CA8	0xE015      	BZ          L_main18
;soundrec.c,166 :: 		UWR(codeToRam(uart_trackList));
0x0CAA	0x0104      	MOVLB       4
0x0CAC	0x0EAD      	MOVLW       _uart_trackList
0x0CAE	0x6F66      	MOVWF       FARG_codeToRam_ctxt, 1
0x0CB0	0x0E12      	MOVLW       hi_addr(_uart_trackList)
0x0CB2	0x6F67      	MOVWF       FARG_codeToRam_ctxt+1, 1
0x0CB4	0x0E00      	MOVLW       higher_addr(_uart_trackList)
0x0CB6	0x6F68      	MOVWF       FARG_codeToRam_ctxt+2, 1
0x0CB8	0xDCD7      	RCALL       _codeToRam
0x0CBA	0xF466C000  	MOVFF       R0, FARG_UART_Write_Text_uart_text
0x0CBE	0xF467C001  	MOVFF       R1, FARG_UART_Write_Text_uart_text+1
0x0CC2	0xDCB0      	RCALL       _UART_Write_Text
0x0CC4	0x0E0D      	MOVLW       13
0x0CC6	0x6F74      	MOVWF       FARG_UART_Write__data, 1
0x0CC8	0xDC74      	RCALL       _UART_Write
0x0CCA	0x0E0A      	MOVLW       10
0x0CCC	0x0104      	MOVLB       4
0x0CCE	0x6F74      	MOVWF       FARG_UART_Write__data, 1
0x0CD0	0xDC70      	RCALL       _UART_Write
;soundrec.c,167 :: 		}
0x0CD2	0xD02A      	BRA         L_main19
L_main18:
;soundrec.c,168 :: 		else if ((mode == 4) & (lastMode != mode))
0x0CD4	0x0E00      	MOVLW       0
0x0CD6	0x1829      	XORWF       _mode+1, 0 
0x0CD8	0xE102      	BNZ         L__main71
0x0CDA	0x0E04      	MOVLW       4
0x0CDC	0x1828      	XORWF       _mode, 0 
L__main71:
0x0CDE	0x0E01      	MOVLW       1
0x0CE0	0xA4D8      	BTFSS       STATUS, 2 
0x0CE2	0x0E00      	MOVLW       0
0x0CE4	0x6E01      	MOVWF       R1 
0x0CE6	0x0E00      	MOVLW       0
0x0CE8	0x1829      	XORWF       _mode+1, 0 
0x0CEA	0xE103      	BNZ         L__main72
0x0CEC	0x5028      	MOVF        _mode, 0 
0x0CEE	0x0104      	MOVLB       4
0x0CF0	0x1963      	XORWF       main_lastMode_L0, 0, 1
L__main72:
0x0CF2	0x0E00      	MOVLW       0
0x0CF4	0xA4D8      	BTFSS       STATUS, 2 
0x0CF6	0x0E01      	MOVLW       1
0x0CF8	0x6E00      	MOVWF       R0 
0x0CFA	0x5001      	MOVF        R1, 0 
0x0CFC	0x1600      	ANDWF       R0, 1 
0x0CFE	0xE014      	BZ          L_main20
;soundrec.c,170 :: 		UWR(codeToRam(uart_changeSampleRate));
0x0D00	0x0104      	MOVLB       4
0x0D02	0x0E64      	MOVLW       _uart_changeSampleRate
0x0D04	0x6F66      	MOVWF       FARG_codeToRam_ctxt, 1
0x0D06	0x0E12      	MOVLW       hi_addr(_uart_changeSampleRate)
0x0D08	0x6F67      	MOVWF       FARG_codeToRam_ctxt+1, 1
0x0D0A	0x0E00      	MOVLW       higher_addr(_uart_changeSampleRate)
0x0D0C	0x6F68      	MOVWF       FARG_codeToRam_ctxt+2, 1
0x0D0E	0xDCAC      	RCALL       _codeToRam
0x0D10	0xF466C000  	MOVFF       R0, FARG_UART_Write_Text_uart_text
0x0D14	0xF467C001  	MOVFF       R1, FARG_UART_Write_Text_uart_text+1
0x0D18	0xDC85      	RCALL       _UART_Write_Text
0x0D1A	0x0E0D      	MOVLW       13
0x0D1C	0x6F74      	MOVWF       FARG_UART_Write__data, 1
0x0D1E	0xDC49      	RCALL       _UART_Write
0x0D20	0x0E0A      	MOVLW       10
0x0D22	0x0104      	MOVLB       4
0x0D24	0x6F74      	MOVWF       FARG_UART_Write__data, 1
0x0D26	0xDC45      	RCALL       _UART_Write
;soundrec.c,171 :: 		}
L_main20:
L_main19:
L_main17:
L_main15:
;soundrec.c,173 :: 		lastMode = mode;
0x0D28	0xF463C028  	MOVFF       _mode, main_lastMode_L0
;soundrec.c,174 :: 		}
0x0D2C	0xD72C      	BRA         L_main9
L_main10:
;soundrec.c,177 :: 		if (mode == 1)
0x0D2E	0x0E00      	MOVLW       0
0x0D30	0x1829      	XORWF       _mode+1, 0 
0x0D32	0xE102      	BNZ         L__main73
0x0D34	0x0E01      	MOVLW       1
0x0D36	0x1828      	XORWF       _mode, 0 
L__main73:
0x0D38	0xA4D8      	BTFSS       STATUS, 2 
0x0D3A	0xD10E      	BRA         L_main21
;soundrec.c,180 :: 		UWR(codeToRam(uart_writing));
0x0D3C	0x0EC0      	MOVLW       _uart_writing
0x0D3E	0x0104      	MOVLB       4
0x0D40	0x6F66      	MOVWF       FARG_codeToRam_ctxt, 1
0x0D42	0x0E12      	MOVLW       hi_addr(_uart_writing)
0x0D44	0x6F67      	MOVWF       FARG_codeToRam_ctxt+1, 1
0x0D46	0x0E00      	MOVLW       higher_addr(_uart_writing)
0x0D48	0x6F68      	MOVWF       FARG_codeToRam_ctxt+2, 1
0x0D4A	0xDC8E      	RCALL       _codeToRam
0x0D4C	0xF466C000  	MOVFF       R0, FARG_UART_Write_Text_uart_text
0x0D50	0xF467C001  	MOVFF       R1, FARG_UART_Write_Text_uart_text+1
0x0D54	0xDC67      	RCALL       _UART_Write_Text
0x0D56	0x0E0D      	MOVLW       13
0x0D58	0x6F74      	MOVWF       FARG_UART_Write__data, 1
0x0D5A	0xDC2B      	RCALL       _UART_Write
0x0D5C	0x0E0A      	MOVLW       10
0x0D5E	0x0104      	MOVLB       4
0x0D60	0x6F74      	MOVWF       FARG_UART_Write__data, 1
0x0D62	0xDC27      	RCALL       _UART_Write
;soundrec.c,181 :: 		ptr = buffer0;
0x0D64	0x0E47      	MOVLW       _buffer0
0x0D66	0x6E37      	MOVWF       soundrec_ptr 
0x0D68	0x0E02      	MOVLW       hi_addr(_buffer0)
0x0D6A	0x6E38      	MOVWF       soundrec_ptr+1 
;soundrec.c,182 :: 		ptrIndex = 0;
0x0D6C	0x6A1B      	CLRF        soundrec_ptrIndex 
0x0D6E	0x6A1C      	CLRF        soundrec_ptrIndex+1 
;soundrec.c,183 :: 		sectorIndex = 0;
0x0D70	0x6A1D      	CLRF        _sectorIndex 
0x0D72	0x6A1E      	CLRF        _sectorIndex+1 
0x0D74	0x6A1F      	CLRF        _sectorIndex+2 
0x0D76	0x6A20      	CLRF        _sectorIndex+3 
;soundrec.c,184 :: 		bufferFull = 0;
0x0D78	0x6A25      	CLRF        _bufferFull 
;soundrec.c,186 :: 		T1CON = (1 << TMR1ON);
0x0D7A	0x0E01      	MOVLW       1
0x0D7C	0x6ECD      	MOVWF       T1CON 
;soundrec.c,187 :: 		while (SLCT)				/* Wait until SLCT pressed */
L_main22:
0x0D7E	0xA081      	BTFSS       RB0_bit, BitPos(RB0_bit+0) 
0x0D80	0xD091      	BRA         L_main23
;soundrec.c,189 :: 		if (bufferFull == 1)
0x0D82	0x5025      	MOVF        _bufferFull, 0 
0x0D84	0x0A01      	XORLW       1
0x0D86	0xA4D8      	BTFSS       STATUS, 2 
0x0D88	0xD08C      	BRA         L_main24
;soundrec.c,191 :: 		bufferFull = 0;
0x0D8A	0x6A25      	CLRF        _bufferFull 
;soundrec.c,192 :: 		if (currentBuffer)	/* Write buffer 0 */
0x0D8C	0x5227      	MOVF        _currentBuffer, 1 
0x0D8E	0xE044      	BZ          L_main25
;soundrec.c,194 :: 		if (Mmc_Write_Sector(sectorIndex++, buffer0) != 0)
0x0D90	0xF004C01D  	MOVFF       _sectorIndex, R4
0x0D94	0xF005C01E  	MOVFF       _sectorIndex+1, R5
0x0D98	0xF006C01F  	MOVFF       _sectorIndex+2, R6
0x0D9C	0xF007C020  	MOVFF       _sectorIndex+3, R7
0x0DA0	0x0E01      	MOVLW       1
0x0DA2	0x241D      	ADDWF       _sectorIndex, 0 
0x0DA4	0x6E00      	MOVWF       R0 
0x0DA6	0x0E00      	MOVLW       0
0x0DA8	0x201E      	ADDWFC      _sectorIndex+1, 0 
0x0DAA	0x6E01      	MOVWF       R1 
0x0DAC	0x0E00      	MOVLW       0
0x0DAE	0x201F      	ADDWFC      _sectorIndex+2, 0 
0x0DB0	0x6E02      	MOVWF       R2 
0x0DB2	0x0E00      	MOVLW       0
0x0DB4	0x2020      	ADDWFC      _sectorIndex+3, 0 
0x0DB6	0x6E03      	MOVWF       R3 
0x0DB8	0xF01DC000  	MOVFF       R0, _sectorIndex
0x0DBC	0xF01EC001  	MOVFF       R1, _sectorIndex+1
0x0DC0	0xF01FC002  	MOVFF       R2, _sectorIndex+2
0x0DC4	0xF020C003  	MOVFF       R3, _sectorIndex+3
0x0DC8	0xF466C004  	MOVFF       R4, FARG_Mmc_Write_Sector_sector
0x0DCC	0xF467C005  	MOVFF       R5, FARG_Mmc_Write_Sector_sector+1
0x0DD0	0xF468C006  	MOVFF       R6, FARG_Mmc_Write_Sector_sector+2
0x0DD4	0xF469C007  	MOVFF       R7, FARG_Mmc_Write_Sector_sector+3
0x0DD8	0x0E47      	MOVLW       _buffer0
0x0DDA	0x0104      	MOVLB       4
0x0DDC	0x6F6A      	MOVWF       FARG_Mmc_Write_Sector_dbuff, 1
0x0DDE	0x0E02      	MOVLW       hi_addr(_buffer0)
0x0DE0	0x6F6B      	MOVWF       FARG_Mmc_Write_Sector_dbuff+1, 1
0x0DE2	0xDD0A      	RCALL       _Mmc_Write_Sector
0x0DE4	0x5000      	MOVF        R0, 0 
0x0DE6	0x0A00      	XORLW       0
0x0DE8	0xE016      	BZ          L_main26
;soundrec.c,196 :: 		UWR(codeToRam(uart_errorWrite));
0x0DEA	0x0E95      	MOVLW       _uart_errorWrite
0x0DEC	0x0104      	MOVLB       4
0x0DEE	0x6F66      	MOVWF       FARG_codeToRam_ctxt, 1
0x0DF0	0x0E12      	MOVLW       hi_addr(_uart_errorWrite)
0x0DF2	0x6F67      	MOVWF       FARG_codeToRam_ctxt+1, 1
0x0DF4	0x0E00      	MOVLW       higher_addr(_uart_errorWrite)
0x0DF6	0x6F68      	MOVWF       FARG_codeToRam_ctxt+2, 1
0x0DF8	0xDC37      	RCALL       _codeToRam
0x0DFA	0xF466C000  	MOVFF       R0, FARG_UART_Write_Text_uart_text
0x0DFE	0xF467C001  	MOVFF       R1, FARG_UART_Write_Text_uart_text+1
0x0E02	0xDC10      	RCALL       _UART_Write_Text
0x0E04	0x0E0D      	MOVLW       13
0x0E06	0x6F74      	MOVWF       FARG_UART_Write__data, 1
0x0E08	0xF002ECD9  	CALL        _UART_Write, 0
0x0E0C	0x0E0A      	MOVLW       10
0x0E0E	0x0104      	MOVLB       4
0x0E10	0x6F74      	MOVWF       FARG_UART_Write__data, 1
0x0E12	0xF002ECD9  	CALL        _UART_Write, 0
;soundrec.c,197 :: 		}
L_main26:
;soundrec.c,198 :: 		}
0x0E16	0xD045      	BRA         L_main27
L_main25:
;soundrec.c,201 :: 		if (Mmc_Write_Sector(sectorIndex++, buffer1) != 0)
0x0E18	0xF004C01D  	MOVFF       _sectorIndex, R4
0x0E1C	0xF005C01E  	MOVFF       _sectorIndex+1, R5
0x0E20	0xF006C01F  	MOVFF       _sectorIndex+2, R6
0x0E24	0xF007C020  	MOVFF       _sectorIndex+3, R7
0x0E28	0x0E01      	MOVLW       1
0x0E2A	0x241D      	ADDWF       _sectorIndex, 0 
0x0E2C	0x6E00      	MOVWF       R0 
0x0E2E	0x0E00      	MOVLW       0
0x0E30	0x201E      	ADDWFC      _sectorIndex+1, 0 
0x0E32	0x6E01      	MOVWF       R1 
0x0E34	0x0E00      	MOVLW       0
0x0E36	0x201F      	ADDWFC      _sectorIndex+2, 0 
0x0E38	0x6E02      	MOVWF       R2 
0x0E3A	0x0E00      	MOVLW       0
0x0E3C	0x2020      	ADDWFC      _sectorIndex+3, 0 
0x0E3E	0x6E03      	MOVWF       R3 
0x0E40	0xF01DC000  	MOVFF       R0, _sectorIndex
0x0E44	0xF01EC001  	MOVFF       R1, _sectorIndex+1
0x0E48	0xF01FC002  	MOVFF       R2, _sectorIndex+2
0x0E4C	0xF020C003  	MOVFF       R3, _sectorIndex+3
0x0E50	0xF466C004  	MOVFF       R4, FARG_Mmc_Write_Sector_sector
0x0E54	0xF467C005  	MOVFF       R5, FARG_Mmc_Write_Sector_sector+1
0x0E58	0xF468C006  	MOVFF       R6, FARG_Mmc_Write_Sector_sector+2
0x0E5C	0xF469C007  	MOVFF       R7, FARG_Mmc_Write_Sector_sector+3
0x0E60	0x0E39      	MOVLW       _buffer1
0x0E62	0x0104      	MOVLB       4
0x0E64	0x6F6A      	MOVWF       FARG_Mmc_Write_Sector_dbuff, 1
0x0E66	0x0E00      	MOVLW       hi_addr(_buffer1)
0x0E68	0x6F6B      	MOVWF       FARG_Mmc_Write_Sector_dbuff+1, 1
0x0E6A	0xDCC6      	RCALL       _Mmc_Write_Sector
0x0E6C	0x5000      	MOVF        R0, 0 
0x0E6E	0x0A00      	XORLW       0
0x0E70	0xE018      	BZ          L_main28
;soundrec.c,203 :: 		UWR(codeToRam(uart_errorWrite));
0x0E72	0x0E95      	MOVLW       _uart_errorWrite
0x0E74	0x0104      	MOVLB       4
0x0E76	0x6F66      	MOVWF       FARG_codeToRam_ctxt, 1
0x0E78	0x0E12      	MOVLW       hi_addr(_uart_errorWrite)
0x0E7A	0x6F67      	MOVWF       FARG_codeToRam_ctxt+1, 1
0x0E7C	0x0E00      	MOVLW       higher_addr(_uart_errorWrite)
0x0E7E	0x6F68      	MOVWF       FARG_codeToRam_ctxt+2, 1
0x0E80	0xF003EC34  	CALL        _codeToRam, 0
0x0E84	0xF466C000  	MOVFF       R0, FARG_UART_Write_Text_uart_text
0x0E88	0xF467C001  	MOVFF       R1, FARG_UART_Write_Text_uart_text+1
0x0E8C	0xF003EC12  	CALL        _UART_Write_Text, 0
0x0E90	0x0E0D      	MOVLW       13
0x0E92	0x6F74      	MOVWF       FARG_UART_Write__data, 1
0x0E94	0xF002ECD9  	CALL        _UART_Write, 0
0x0E98	0x0E0A      	MOVLW       10
0x0E9A	0x0104      	MOVLB       4
0x0E9C	0x6F74      	MOVWF       FARG_UART_Write__data, 1
0x0E9E	0xF002ECD9  	CALL        _UART_Write, 0
;soundrec.c,204 :: 		}
L_main28:
;soundrec.c,205 :: 		}
L_main27:
;soundrec.c,206 :: 		}
L_main24:
;soundrec.c,207 :: 		}
0x0EA2	0xD76D      	BRA         L_main22
L_main23:
;soundrec.c,208 :: 		T1CON &= ~(1 << TMR1ON);
0x0EA4	0x90CD      	BCF         T1CON, 0 
;soundrec.c,209 :: 		Delay_ms(500);
0x0EA6	0x0E0D      	MOVLW       13
0x0EA8	0x6E0B      	MOVWF       R11, 0
0x0EAA	0x0EAF      	MOVLW       175
0x0EAC	0x6E0C      	MOVWF       R12, 0
0x0EAE	0x0EB6      	MOVLW       182
0x0EB0	0x6E0D      	MOVWF       R13, 0
L_main29:
0x0EB2	0x2E0D      	DECFSZ      R13, 1, 0
0x0EB4	0xD7FE      	BRA         L_main29
0x0EB6	0x2E0C      	DECFSZ      R12, 1, 0
0x0EB8	0xD7FC      	BRA         L_main29
0x0EBA	0x2E0B      	DECFSZ      R11, 1, 0
0x0EBC	0xD7FA      	BRA         L_main29
0x0EBE	0x0000      	NOP
;soundrec.c,212 :: 		intToStr(sectorIndex, text);
0x0EC0	0xF466C01D  	MOVFF       _sectorIndex, FARG_IntToStr_input
0x0EC4	0xF467C01E  	MOVFF       _sectorIndex+1, FARG_IntToStr_input+1
0x0EC8	0x0E39      	MOVLW       _text
0x0ECA	0x0104      	MOVLB       4
0x0ECC	0x6F68      	MOVWF       FARG_IntToStr_output, 1
0x0ECE	0x0E02      	MOVLW       hi_addr(_text)
0x0ED0	0x6F69      	MOVWF       FARG_IntToStr_output+1, 1
0x0ED2	0xDC25      	RCALL       _IntToStr
;soundrec.c,213 :: 		UWR(codeToRam(uart_done));
0x0ED4	0x0ED7      	MOVLW       _uart_done
0x0ED6	0x6F66      	MOVWF       FARG_codeToRam_ctxt, 1
0x0ED8	0x0E12      	MOVLW       hi_addr(_uart_done)
0x0EDA	0x6F67      	MOVWF       FARG_codeToRam_ctxt+1, 1
0x0EDC	0x0E00      	MOVLW       higher_addr(_uart_done)
0x0EDE	0x6F68      	MOVWF       FARG_codeToRam_ctxt+2, 1
0x0EE0	0xF003EC34  	CALL        _codeToRam, 0
0x0EE4	0xF466C000  	MOVFF       R0, FARG_UART_Write_Text_uart_text
0x0EE8	0xF467C001  	MOVFF       R1, FARG_UART_Write_Text_uart_text+1
0x0EEC	0xF003EC12  	CALL        _UART_Write_Text, 0
0x0EF0	0x0E0D      	MOVLW       13
0x0EF2	0x6F74      	MOVWF       FARG_UART_Write__data, 1
0x0EF4	0xF002ECD9  	CALL        _UART_Write, 0
0x0EF8	0x0E0A      	MOVLW       10
0x0EFA	0x0104      	MOVLB       4
0x0EFC	0x6F74      	MOVWF       FARG_UART_Write__data, 1
0x0EFE	0xF002ECD9  	CALL        _UART_Write, 0
;soundrec.c,214 :: 		UWR(text);
0x0F02	0x0E39      	MOVLW       _text
0x0F04	0x0104      	MOVLB       4
0x0F06	0x6F66      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x0F08	0x0E02      	MOVLW       hi_addr(_text)
0x0F0A	0x6F67      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x0F0C	0xF003EC12  	CALL        _UART_Write_Text, 0
0x0F10	0x0E0D      	MOVLW       13
0x0F12	0x6F74      	MOVWF       FARG_UART_Write__data, 1
0x0F14	0xF002ECD9  	CALL        _UART_Write, 0
0x0F18	0x0E0A      	MOVLW       10
0x0F1A	0x0104      	MOVLB       4
0x0F1C	0x6F74      	MOVWF       FARG_UART_Write__data, 1
0x0F1E	0xF002ECD9  	CALL        _UART_Write, 0
;soundrec.c,215 :: 		intToStr(adcCount, text);
0x0F22	0xF466C021  	MOVFF       _adcCount, FARG_IntToStr_input
0x0F26	0xF467C022  	MOVFF       _adcCount+1, FARG_IntToStr_input+1
0x0F2A	0x0E39      	MOVLW       _text
0x0F2C	0x0104      	MOVLB       4
0x0F2E	0x6F68      	MOVWF       FARG_IntToStr_output, 1
0x0F30	0x0E02      	MOVLW       hi_addr(_text)
0x0F32	0x6F69      	MOVWF       FARG_IntToStr_output+1, 1
0x0F34	0xF003EC8F  	CALL        _IntToStr, 0
;soundrec.c,216 :: 		UWR(text);
0x0F38	0x0E39      	MOVLW       _text
0x0F3A	0x6F66      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x0F3C	0x0E02      	MOVLW       hi_addr(_text)
0x0F3E	0x6F67      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x0F40	0xF003EC12  	CALL        _UART_Write_Text, 0
0x0F44	0x0E0D      	MOVLW       13
0x0F46	0x6F74      	MOVWF       FARG_UART_Write__data, 1
0x0F48	0xF002ECD9  	CALL        _UART_Write, 0
0x0F4C	0x0E0A      	MOVLW       10
0x0F4E	0x0104      	MOVLB       4
0x0F50	0x6F74      	MOVWF       FARG_UART_Write__data, 1
0x0F52	0xF002ECD9  	CALL        _UART_Write, 0
;soundrec.c,217 :: 		}
0x0F56	0xD178      	BRA         L_main30
L_main21:
;soundrec.c,220 :: 		else if (mode == 2)
0x0F58	0x0E00      	MOVLW       0
0x0F5A	0x1829      	XORWF       _mode+1, 0 
0x0F5C	0xE102      	BNZ         L__main74
0x0F5E	0x0E02      	MOVLW       2
0x0F60	0x1828      	XORWF       _mode, 0 
L__main74:
0x0F62	0xA4D8      	BTFSS       STATUS, 2 
0x0F64	0xD10A      	BRA         L_main31
;soundrec.c,223 :: 		UWR(codeToRam(uart_reading));
0x0F66	0x0EB8      	MOVLW       _uart_reading
0x0F68	0x0104      	MOVLB       4
0x0F6A	0x6F66      	MOVWF       FARG_codeToRam_ctxt, 1
0x0F6C	0x0E12      	MOVLW       hi_addr(_uart_reading)
0x0F6E	0x6F67      	MOVWF       FARG_codeToRam_ctxt+1, 1
0x0F70	0x0E00      	MOVLW       higher_addr(_uart_reading)
0x0F72	0x6F68      	MOVWF       FARG_codeToRam_ctxt+2, 1
0x0F74	0xF003EC34  	CALL        _codeToRam, 0
0x0F78	0xF466C000  	MOVFF       R0, FARG_UART_Write_Text_uart_text
0x0F7C	0xF467C001  	MOVFF       R1, FARG_UART_Write_Text_uart_text+1
0x0F80	0xF003EC12  	CALL        _UART_Write_Text, 0
0x0F84	0x0E0D      	MOVLW       13
0x0F86	0x6F74      	MOVWF       FARG_UART_Write__data, 1
0x0F88	0xF002ECD9  	CALL        _UART_Write, 0
0x0F8C	0x0E0A      	MOVLW       10
0x0F8E	0x0104      	MOVLB       4
0x0F90	0x6F74      	MOVWF       FARG_UART_Write__data, 1
0x0F92	0xF002ECD9  	CALL        _UART_Write, 0
;soundrec.c,224 :: 		ptr = buffer0;
0x0F96	0x0E47      	MOVLW       _buffer0
0x0F98	0x6E37      	MOVWF       soundrec_ptr 
0x0F9A	0x0E02      	MOVLW       hi_addr(_buffer0)
0x0F9C	0x6E38      	MOVWF       soundrec_ptr+1 
;soundrec.c,225 :: 		ptrIndex = 0;
0x0F9E	0x6A1B      	CLRF        soundrec_ptrIndex 
0x0FA0	0x6A1C      	CLRF        soundrec_ptrIndex+1 
;soundrec.c,226 :: 		sectorIndex = 0;
0x0FA2	0x6A1D      	CLRF        _sectorIndex 
0x0FA4	0x6A1E      	CLRF        _sectorIndex+1 
0x0FA6	0x6A1F      	CLRF        _sectorIndex+2 
0x0FA8	0x6A20      	CLRF        _sectorIndex+3 
;soundrec.c,227 :: 		bufferFull = 0;
0x0FAA	0x6A25      	CLRF        _bufferFull 
;soundrec.c,228 :: 		currentBuffer = 0;
0x0FAC	0x6A27      	CLRF        _currentBuffer 
;soundrec.c,231 :: 		if (Mmc_Read_Sector(sectorIndex, buffer0) != 0)
0x0FAE	0xF466C01D  	MOVFF       _sectorIndex, FARG_Mmc_Read_Sector_sector
0x0FB2	0xF467C01E  	MOVFF       _sectorIndex+1, FARG_Mmc_Read_Sector_sector+1
0x0FB6	0xF468C01F  	MOVFF       _sectorIndex+2, FARG_Mmc_Read_Sector_sector+2
0x0FBA	0xF469C020  	MOVFF       _sectorIndex+3, FARG_Mmc_Read_Sector_sector+3
0x0FBE	0x0E47      	MOVLW       _buffer0
0x0FC0	0x0104      	MOVLB       4
0x0FC2	0x6F6A      	MOVWF       FARG_Mmc_Read_Sector_dbuff, 1
0x0FC4	0x0E02      	MOVLW       hi_addr(_buffer0)
0x0FC6	0x6F6B      	MOVWF       FARG_Mmc_Read_Sector_dbuff+1, 1
0x0FC8	0xDCE3      	RCALL       _Mmc_Read_Sector
0x0FCA	0x5000      	MOVF        R0, 0 
0x0FCC	0x0A00      	XORLW       0
0x0FCE	0xE018      	BZ          L_main32
;soundrec.c,233 :: 		UWR(codeToRam(uart_initReadError));
0x0FD0	0x0E4C      	MOVLW       _uart_initReadError
0x0FD2	0x0104      	MOVLB       4
0x0FD4	0x6F66      	MOVWF       FARG_codeToRam_ctxt, 1
0x0FD6	0x0E12      	MOVLW       hi_addr(_uart_initReadError)
0x0FD8	0x6F67      	MOVWF       FARG_codeToRam_ctxt+1, 1
0x0FDA	0x0E00      	MOVLW       higher_addr(_uart_initReadError)
0x0FDC	0x6F68      	MOVWF       FARG_codeToRam_ctxt+2, 1
0x0FDE	0xF003EC34  	CALL        _codeToRam, 0
0x0FE2	0xF466C000  	MOVFF       R0, FARG_UART_Write_Text_uart_text
0x0FE6	0xF467C001  	MOVFF       R1, FARG_UART_Write_Text_uart_text+1
0x0FEA	0xF003EC12  	CALL        _UART_Write_Text, 0
0x0FEE	0x0E0D      	MOVLW       13
0x0FF0	0x6F74      	MOVWF       FARG_UART_Write__data, 1
0x0FF2	0xF002ECD9  	CALL        _UART_Write, 0
0x0FF6	0x0E0A      	MOVLW       10
0x0FF8	0x0104      	MOVLB       4
0x0FFA	0x6F74      	MOVWF       FARG_UART_Write__data, 1
0x0FFC	0xF002ECD9  	CALL        _UART_Write, 0
;soundrec.c,234 :: 		}
L_main32:
;soundrec.c,237 :: 		T1CON |= (1 << TMR1ON);
0x1000	0x80CD      	BSF         T1CON, 0 
;soundrec.c,243 :: 		while (SLCT)				/* Wait until SLCT pressed */
L_main33:
0x1002	0xA081      	BTFSS       RB0_bit, BitPos(RB0_bit+0) 
0x1004	0xD093      	BRA         L_main34
;soundrec.c,245 :: 		if (bufferFull == 1)
0x1006	0x5025      	MOVF        _bufferFull, 0 
0x1008	0x0A01      	XORLW       1
0x100A	0xA4D8      	BTFSS       STATUS, 2 
0x100C	0xD08E      	BRA         L_main35
;soundrec.c,247 :: 		bufferFull = 0;
0x100E	0x6A25      	CLRF        _bufferFull 
;soundrec.c,248 :: 		if (currentBuffer)	/* Read buffer 0 */
0x1010	0x5227      	MOVF        _currentBuffer, 1 
0x1012	0xE046      	BZ          L_main36
;soundrec.c,250 :: 		if (Mmc_Read_Sector(sectorIndex++, buffer0) != 0)
0x1014	0xF004C01D  	MOVFF       _sectorIndex, R4
0x1018	0xF005C01E  	MOVFF       _sectorIndex+1, R5
0x101C	0xF006C01F  	MOVFF       _sectorIndex+2, R6
0x1020	0xF007C020  	MOVFF       _sectorIndex+3, R7
0x1024	0x0E01      	MOVLW       1
0x1026	0x241D      	ADDWF       _sectorIndex, 0 
0x1028	0x6E00      	MOVWF       R0 
0x102A	0x0E00      	MOVLW       0
0x102C	0x201E      	ADDWFC      _sectorIndex+1, 0 
0x102E	0x6E01      	MOVWF       R1 
0x1030	0x0E00      	MOVLW       0
0x1032	0x201F      	ADDWFC      _sectorIndex+2, 0 
0x1034	0x6E02      	MOVWF       R2 
0x1036	0x0E00      	MOVLW       0
0x1038	0x2020      	ADDWFC      _sectorIndex+3, 0 
0x103A	0x6E03      	MOVWF       R3 
0x103C	0xF01DC000  	MOVFF       R0, _sectorIndex
0x1040	0xF01EC001  	MOVFF       R1, _sectorIndex+1
0x1044	0xF01FC002  	MOVFF       R2, _sectorIndex+2
0x1048	0xF020C003  	MOVFF       R3, _sectorIndex+3
0x104C	0xF466C004  	MOVFF       R4, FARG_Mmc_Read_Sector_sector
0x1050	0xF467C005  	MOVFF       R5, FARG_Mmc_Read_Sector_sector+1
0x1054	0xF468C006  	MOVFF       R6, FARG_Mmc_Read_Sector_sector+2
0x1058	0xF469C007  	MOVFF       R7, FARG_Mmc_Read_Sector_sector+3
0x105C	0x0E47      	MOVLW       _buffer0
0x105E	0x0104      	MOVLB       4
0x1060	0x6F6A      	MOVWF       FARG_Mmc_Read_Sector_dbuff, 1
0x1062	0x0E02      	MOVLW       hi_addr(_buffer0)
0x1064	0x6F6B      	MOVWF       FARG_Mmc_Read_Sector_dbuff+1, 1
0x1066	0xDC94      	RCALL       _Mmc_Read_Sector
0x1068	0x5000      	MOVF        R0, 0 
0x106A	0x0A00      	XORLW       0
0x106C	0xE018      	BZ          L_main37
;soundrec.c,252 :: 		UWR(codeToRam(uart_errorRead));
0x106E	0x0EA2      	MOVLW       _uart_errorRead
0x1070	0x0104      	MOVLB       4
0x1072	0x6F66      	MOVWF       FARG_codeToRam_ctxt, 1
0x1074	0x0E12      	MOVLW       hi_addr(_uart_errorRead)
0x1076	0x6F67      	MOVWF       FARG_codeToRam_ctxt+1, 1
0x1078	0x0E00      	MOVLW       higher_addr(_uart_errorRead)
0x107A	0x6F68      	MOVWF       FARG_codeToRam_ctxt+2, 1
0x107C	0xF003EC34  	CALL        _codeToRam, 0
0x1080	0xF466C000  	MOVFF       R0, FARG_UART_Write_Text_uart_text
0x1084	0xF467C001  	MOVFF       R1, FARG_UART_Write_Text_uart_text+1
0x1088	0xF003EC12  	CALL        _UART_Write_Text, 0
0x108C	0x0E0D      	MOVLW       13
0x108E	0x6F74      	MOVWF       FARG_UART_Write__data, 1
0x1090	0xF002ECD9  	CALL        _UART_Write, 0
0x1094	0x0E0A      	MOVLW       10
0x1096	0x0104      	MOVLB       4
0x1098	0x6F74      	MOVWF       FARG_UART_Write__data, 1
0x109A	0xF002ECD9  	CALL        _UART_Write, 0
;soundrec.c,253 :: 		}
L_main37:
;soundrec.c,254 :: 		}
0x109E	0xD045      	BRA         L_main38
L_main36:
;soundrec.c,257 :: 		if (Mmc_Read_Sector(sectorIndex++, buffer1) != 0)
0x10A0	0xF004C01D  	MOVFF       _sectorIndex, R4
0x10A4	0xF005C01E  	MOVFF       _sectorIndex+1, R5
0x10A8	0xF006C01F  	MOVFF       _sectorIndex+2, R6
0x10AC	0xF007C020  	MOVFF       _sectorIndex+3, R7
0x10B0	0x0E01      	MOVLW       1
0x10B2	0x241D      	ADDWF       _sectorIndex, 0 
0x10B4	0x6E00      	MOVWF       R0 
0x10B6	0x0E00      	MOVLW       0
0x10B8	0x201E      	ADDWFC      _sectorIndex+1, 0 
0x10BA	0x6E01      	MOVWF       R1 
0x10BC	0x0E00      	MOVLW       0
0x10BE	0x201F      	ADDWFC      _sectorIndex+2, 0 
0x10C0	0x6E02      	MOVWF       R2 
0x10C2	0x0E00      	MOVLW       0
0x10C4	0x2020      	ADDWFC      _sectorIndex+3, 0 
0x10C6	0x6E03      	MOVWF       R3 
0x10C8	0xF01DC000  	MOVFF       R0, _sectorIndex
0x10CC	0xF01EC001  	MOVFF       R1, _sectorIndex+1
0x10D0	0xF01FC002  	MOVFF       R2, _sectorIndex+2
0x10D4	0xF020C003  	MOVFF       R3, _sectorIndex+3
0x10D8	0xF466C004  	MOVFF       R4, FARG_Mmc_Read_Sector_sector
0x10DC	0xF467C005  	MOVFF       R5, FARG_Mmc_Read_Sector_sector+1
0x10E0	0xF468C006  	MOVFF       R6, FARG_Mmc_Read_Sector_sector+2
0x10E4	0xF469C007  	MOVFF       R7, FARG_Mmc_Read_Sector_sector+3
0x10E8	0x0E39      	MOVLW       _buffer1
0x10EA	0x0104      	MOVLB       4
0x10EC	0x6F6A      	MOVWF       FARG_Mmc_Read_Sector_dbuff, 1
0x10EE	0x0E00      	MOVLW       hi_addr(_buffer1)
0x10F0	0x6F6B      	MOVWF       FARG_Mmc_Read_Sector_dbuff+1, 1
0x10F2	0xDC4E      	RCALL       _Mmc_Read_Sector
0x10F4	0x5000      	MOVF        R0, 0 
0x10F6	0x0A00      	XORLW       0
0x10F8	0xE018      	BZ          L_main39
;soundrec.c,259 :: 		UWR(codeToRam(uart_errorRead));
0x10FA	0x0EA2      	MOVLW       _uart_errorRead
0x10FC	0x0104      	MOVLB       4
0x10FE	0x6F66      	MOVWF       FARG_codeToRam_ctxt, 1
0x1100	0x0E12      	MOVLW       hi_addr(_uart_errorRead)
0x1102	0x6F67      	MOVWF       FARG_codeToRam_ctxt+1, 1
0x1104	0x0E00      	MOVLW       higher_addr(_uart_errorRead)
0x1106	0x6F68      	MOVWF       FARG_codeToRam_ctxt+2, 1
0x1108	0xF003EC34  	CALL        _codeToRam, 0
0x110C	0xF466C000  	MOVFF       R0, FARG_UART_Write_Text_uart_text
0x1110	0xF467C001  	MOVFF       R1, FARG_UART_Write_Text_uart_text+1
0x1114	0xF003EC12  	CALL        _UART_Write_Text, 0
0x1118	0x0E0D      	MOVLW       13
0x111A	0x6F74      	MOVWF       FARG_UART_Write__data, 1
0x111C	0xF002ECD9  	CALL        _UART_Write, 0
0x1120	0x0E0A      	MOVLW       10
0x1122	0x0104      	MOVLB       4
0x1124	0x6F74      	MOVWF       FARG_UART_Write__data, 1
0x1126	0xF002ECD9  	CALL        _UART_Write, 0
;soundrec.c,260 :: 		}
L_main39:
;soundrec.c,261 :: 		}
L_main38:
;soundrec.c,262 :: 		}
L_main35:
;soundrec.c,263 :: 		}
0x112A	0xD76B      	BRA         L_main33
L_main34:
;soundrec.c,266 :: 		T1CON &= ~(1 << TMR1ON);
0x112C	0x90CD      	BCF         T1CON, 0 
;soundrec.c,271 :: 		Delay_ms(500);
0x112E	0x0E0D      	MOVLW       13
0x1130	0x6E0B      	MOVWF       R11, 0
0x1132	0x0EAF      	MOVLW       175
0x1134	0x6E0C      	MOVWF       R12, 0
0x1136	0x0EB6      	MOVLW       182
0x1138	0x6E0D      	MOVWF       R13, 0
L_main40:
0x113A	0x2E0D      	DECFSZ      R13, 1, 0
0x113C	0xD7FE      	BRA         L_main40
0x113E	0x2E0C      	DECFSZ      R12, 1, 0
0x1140	0xD7FC      	BRA         L_main40
0x1142	0x2E0B      	DECFSZ      R11, 1, 0
0x1144	0xD7FA      	BRA         L_main40
0x1146	0x0000      	NOP
;soundrec.c,273 :: 		UWR(codeToRam(uart_done));
0x1148	0x0ED7      	MOVLW       _uart_done
0x114A	0x0104      	MOVLB       4
0x114C	0x6F66      	MOVWF       FARG_codeToRam_ctxt, 1
0x114E	0x0E12      	MOVLW       hi_addr(_uart_done)
0x1150	0x6F67      	MOVWF       FARG_codeToRam_ctxt+1, 1
0x1152	0x0E00      	MOVLW       higher_addr(_uart_done)
0x1154	0x6F68      	MOVWF       FARG_codeToRam_ctxt+2, 1
0x1156	0xF003EC34  	CALL        _codeToRam, 0
0x115A	0xF466C000  	MOVFF       R0, FARG_UART_Write_Text_uart_text
0x115E	0xF467C001  	MOVFF       R1, FARG_UART_Write_Text_uart_text+1
0x1162	0xF003EC12  	CALL        _UART_Write_Text, 0
0x1166	0x0E0D      	MOVLW       13
0x1168	0x6F74      	MOVWF       FARG_UART_Write__data, 1
0x116A	0xF002ECD9  	CALL        _UART_Write, 0
0x116E	0x0E0A      	MOVLW       10
0x1170	0x0104      	MOVLB       4
0x1172	0x6F74      	MOVWF       FARG_UART_Write__data, 1
0x1174	0xF002ECD9  	CALL        _UART_Write, 0
;soundrec.c,274 :: 		}
0x1178	0xD067      	BRA         L_main41
L_main31:
;soundrec.c,277 :: 		else if (mode == 3)
0x117A	0x0E00      	MOVLW       0
0x117C	0x1829      	XORWF       _mode+1, 0 
0x117E	0xE102      	BNZ         L__main75
0x1180	0x0E03      	MOVLW       3
0x1182	0x1828      	XORWF       _mode, 0 
L__main75:
0x1184	0xE161      	BNZ         L_main42
;soundrec.c,280 :: 		for (i = 0; i < 512; i++)
0x1186	0x0104      	MOVLB       4
0x1188	0x6B64      	CLRF        main_i_L0, 1
0x118A	0x6B65      	CLRF        main_i_L0+1, 1
L_main43:
0x118C	0x0E02      	MOVLW       2
0x118E	0x5D65      	SUBWF       main_i_L0+1, 0, 1
0x1190	0xE102      	BNZ         L__main76
0x1192	0x0E00      	MOVLW       0
0x1194	0x5D64      	SUBWF       main_i_L0, 0, 1
L__main76:
0x1196	0xE211      	BC          L_main44
;soundrec.c,282 :: 		buffer0[i] = 0;
0x1198	0x0E47      	MOVLW       _buffer0
0x119A	0x2564      	ADDWF       main_i_L0, 0, 1
0x119C	0x6EE1      	MOVWF       FSR1L 
0x119E	0x0E02      	MOVLW       hi_addr(_buffer0)
0x11A0	0x2165      	ADDWFC      main_i_L0+1, 0, 1
0x11A2	0x6EE2      	MOVWF       FSR1H 
0x11A4	0x6AE6      	CLRF        POSTINC1 
;soundrec.c,283 :: 		buffer1[i] = 0;
0x11A6	0x0E39      	MOVLW       _buffer1
0x11A8	0x2564      	ADDWF       main_i_L0, 0, 1
0x11AA	0x6EE1      	MOVWF       FSR1L 
0x11AC	0x0E00      	MOVLW       hi_addr(_buffer1)
0x11AE	0x2165      	ADDWFC      main_i_L0+1, 0, 1
0x11B0	0x6EE2      	MOVWF       FSR1H 
0x11B2	0x6AE6      	CLRF        POSTINC1 
;soundrec.c,280 :: 		for (i = 0; i < 512; i++)
0x11B4	0x4B64      	INFSNZ      main_i_L0, 1, 1
0x11B6	0x2B65      	INCF        main_i_L0+1, 1, 1
;soundrec.c,284 :: 		}
0x11B8	0xD7E9      	BRA         L_main43
L_main44:
;soundrec.c,287 :: 		Mmc_Read_Sector(5, buffer0);
0x11BA	0x0E05      	MOVLW       5
0x11BC	0x6F66      	MOVWF       FARG_Mmc_Read_Sector_sector, 1
0x11BE	0x0E00      	MOVLW       0
0x11C0	0x6F67      	MOVWF       FARG_Mmc_Read_Sector_sector+1, 1
0x11C2	0x6F68      	MOVWF       FARG_Mmc_Read_Sector_sector+2, 1
0x11C4	0x6F69      	MOVWF       FARG_Mmc_Read_Sector_sector+3, 1
0x11C6	0x0E47      	MOVLW       _buffer0
0x11C8	0x6F6A      	MOVWF       FARG_Mmc_Read_Sector_dbuff, 1
0x11CA	0x0E02      	MOVLW       hi_addr(_buffer0)
0x11CC	0x6F6B      	MOVWF       FARG_Mmc_Read_Sector_dbuff+1, 1
0x11CE	0xF004ECC8  	CALL        _Mmc_Read_Sector, 0
;soundrec.c,288 :: 		Mmc_Read_Sector(10, buffer1);
0x11D2	0x0E0A      	MOVLW       10
0x11D4	0x0104      	MOVLB       4
0x11D6	0x6F66      	MOVWF       FARG_Mmc_Read_Sector_sector, 1
0x11D8	0x0E00      	MOVLW       0
0x11DA	0x6F67      	MOVWF       FARG_Mmc_Read_Sector_sector+1, 1
0x11DC	0x6F68      	MOVWF       FARG_Mmc_Read_Sector_sector+2, 1
0x11DE	0x6F69      	MOVWF       FARG_Mmc_Read_Sector_sector+3, 1
0x11E0	0x0E39      	MOVLW       _buffer1
0x11E2	0x6F6A      	MOVWF       FARG_Mmc_Read_Sector_dbuff, 1
0x11E4	0x0E00      	MOVLW       hi_addr(_buffer1)
0x11E6	0x6F6B      	MOVWF       FARG_Mmc_Read_Sector_dbuff+1, 1
0x11E8	0xF004ECC8  	CALL        _Mmc_Read_Sector, 0
;soundrec.c,291 :: 		for (i = 0; i < 512; i++)
0x11EC	0x0104      	MOVLB       4
0x11EE	0x6B64      	CLRF        main_i_L0, 1
0x11F0	0x6B65      	CLRF        main_i_L0+1, 1
L_main46:
0x11F2	0x0E02      	MOVLW       2
0x11F4	0x5D65      	SUBWF       main_i_L0+1, 0, 1
0x11F6	0xE102      	BNZ         L__main77
0x11F8	0x0E00      	MOVLW       0
0x11FA	0x5D64      	SUBWF       main_i_L0, 0, 1
L__main77:
0x11FC	0xE225      	BC          L_main47
;soundrec.c,293 :: 		intToStr(buffer0[i], text);
0x11FE	0x0E47      	MOVLW       _buffer0
0x1200	0x2564      	ADDWF       main_i_L0, 0, 1
0x1202	0x6EE9      	MOVWF       FSR0L 
0x1204	0x0E02      	MOVLW       hi_addr(_buffer0)
0x1206	0x2165      	ADDWFC      main_i_L0+1, 0, 1
0x1208	0x6EEA      	MOVWF       FSR0H 
0x120A	0xF000CFEE  	MOVFF       POSTINC0, R0
0x120E	0xF466C000  	MOVFF       R0, FARG_IntToStr_input
0x1212	0x0E00      	MOVLW       0
0x1214	0x6F67      	MOVWF       FARG_IntToStr_input+1, 1
0x1216	0x0E39      	MOVLW       _text
0x1218	0x6F68      	MOVWF       FARG_IntToStr_output, 1
0x121A	0x0E02      	MOVLW       hi_addr(_text)
0x121C	0x6F69      	MOVWF       FARG_IntToStr_output+1, 1
0x121E	0xF003EC8F  	CALL        _IntToStr, 0
;soundrec.c,294 :: 		UWR(text);
0x1222	0x0E39      	MOVLW       _text
0x1224	0x6F66      	MOVWF       FARG_UART_Write_Text_uart_text, 1
0x1226	0x0E02      	MOVLW       hi_addr(_text)
0x1228	0x6F67      	MOVWF       FARG_UART_Write_Text_uart_text+1, 1
0x122A	0xF003EC12  	CALL        _UART_Write_Text, 0
0x122E	0x0E0D      	MOVLW       13
0x1230	0x6F74      	MOVWF       FARG_UART_Write__data, 1
0x1232	0xF002ECD9  	CALL        _UART_Write, 0
0x1236	0x0E0A      	MOVLW       10
0x1238	0x0104      	MOVLB       4
0x123A	0x6F74      	MOVWF       FARG_UART_Write__data, 1
0x123C	0xF002ECD9  	CALL        _UART_Write, 0
;soundrec.c,291 :: 		for (i = 0; i < 512; i++)
0x1240	0x0104      	MOVLB       4
0x1242	0x4B64      	INFSNZ      main_i_L0, 1, 1
0x1244	0x2B65      	INCF        main_i_L0+1, 1, 1
;soundrec.c,295 :: 		}
0x1246	0xD7D5      	BRA         L_main46
L_main47:
;soundrec.c,296 :: 		}
L_main42:
L_main41:
L_main30:
;soundrec.c,301 :: 		}
0x1248	0xD487      	BRA         L_main4
;soundrec.c,302 :: 		}
L_end_main:
0x124A	0xD7FF      	BRA         $+0
; end of _main
0x12E2	0xF01BEE10  	LFSR        1, 27
0x12E6	0x0E10      	MOVLW       16
0x12E8	0x6E00      	MOVWF       R0 
0x12EA	0x0E01      	MOVLW       1
0x12EC	0x6E01      	MOVWF       R1 
0x12EE	0x0E77      	MOVLW       119
0x12F0	0x6EF6      	MOVWF       4086 
0x12F2	0x0E12      	MOVLW       18
0x12F4	0x6EF7      	MOVWF       TBLPTRH 
0x12F6	0x0E00      	MOVLW       0
0x12F8	0x6EF8      	MOVWF       TBLPTRU 
0x12FA	0xF003EC2C  	CALL        1624, 0
0x12FE	0x0012      	RETURN      0
;soundrec.c,23 :: _uart_initReadError
0x124C	0x6E49 ;_uart_initReadError+0
0x124E	0x7469 ;_uart_initReadError+2
0x1250	0x6169 ;_uart_initReadError+4
0x1252	0x206C ;_uart_initReadError+6
0x1254	0x7562 ;_uart_initReadError+8
0x1256	0x6666 ;_uart_initReadError+10
0x1258	0x7265 ;_uart_initReadError+12
0x125A	0x6E69 ;_uart_initReadError+14
0x125C	0x2067 ;_uart_initReadError+16
0x125E	0x7265 ;_uart_initReadError+18
0x1260	0x6F72 ;_uart_initReadError+20
0x1262	0x0072 ;_uart_initReadError+22
; end of _uart_initReadError
;soundrec.c,20 :: _uart_changeSampleRate
0x1264	0x6843 ;_uart_changeSampleRate+0
0x1266	0x6E61 ;_uart_changeSampleRate+2
0x1268	0x6567 ;_uart_changeSampleRate+4
0x126A	0x7320 ;_uart_changeSampleRate+6
0x126C	0x6D61 ;_uart_changeSampleRate+8
0x126E	0x6C70 ;_uart_changeSampleRate+10
0x1270	0x2065 ;_uart_changeSampleRate+12
0x1272	0x6172 ;_uart_changeSampleRate+14
0x1274	0x6574 ;_uart_changeSampleRate+16
0x1276	0x00 ;_uart_changeSampleRate+18
; end of _uart_changeSampleRate
;soundrec.c,0 :: ?ICSsoundrec_ptrIndex
0x1277	0x0000 ;?ICSsoundrec_ptrIndex+0
; end of ?ICSsoundrec_ptrIndex
;soundrec.c,0 :: ?ICS_sectorIndex
0x1279	0x0000 ;?ICS_sectorIndex+0
0x127B	0x0000 ;?ICS_sectorIndex+2
; end of ?ICS_sectorIndex
;soundrec.c,0 :: ?ICS_adcCount
0x127D	0x0000 ;?ICS_adcCount+0
0x127F	0x0000 ;?ICS_adcCount+2
; end of ?ICS_adcCount
;soundrec.c,0 :: ?ICS_bufferFull
0x1281	0x00 ;?ICS_bufferFull+0
; end of ?ICS_bufferFull
;__Lib_Mmc.c,0 :: ?ICS__Lib_Mmc_cardType
0x1282	0x00 ;?ICS__Lib_Mmc_cardType+0
; end of ?ICS__Lib_Mmc_cardType
;soundrec.c,0 :: ?ICS_currentBuffer
0x1283	0x00 ;?ICS_currentBuffer+0
; end of ?ICS_currentBuffer
;soundrec.c,0 :: ?ICS_mode
0x1284	0x0000 ;?ICS_mode+0
; end of ?ICS_mode
;soundrec.c,0 :: ?ICS_adcResult
0x1286	0x00 ;?ICS_adcResult+0
; end of ?ICS_adcResult
;soundrec.c,11 :: _uart_menu
0x1287	0x6553 ;_uart_menu+0
0x1289	0x656C ;_uart_menu+2
0x128B	0x7463 ;_uart_menu+4
0x128D	0x6120 ;_uart_menu+6
0x128F	0x6D20 ;_uart_menu+8
0x1291	0x6E65 ;_uart_menu+10
0x1293	0x0075 ;_uart_menu+12
; end of _uart_menu
;soundrec.c,16 :: _uart_errorWrite
0x1295	0x7257 ;_uart_errorWrite+0
0x1297	0x7469 ;_uart_errorWrite+2
0x1299	0x2065 ;_uart_errorWrite+4
0x129B	0x7265 ;_uart_errorWrite+6
0x129D	0x6F72 ;_uart_errorWrite+8
0x129F	0x2172 ;_uart_errorWrite+10
0x12A1	0x00 ;_uart_errorWrite+12
; end of _uart_errorWrite
;soundrec.c,17 :: _uart_errorRead
0x12A2	0x6552 ;_uart_errorRead+0
0x12A4	0x6461 ;_uart_errorRead+2
0x12A6	0x6520 ;_uart_errorRead+4
0x12A8	0x7272 ;_uart_errorRead+6
0x12AA	0x726F ;_uart_errorRead+8
0x12AC	0x00 ;_uart_errorRead+10
; end of _uart_errorRead
;soundrec.c,19 :: _uart_trackList
0x12AD	0x7254 ;_uart_trackList+0
0x12AF	0x6361 ;_uart_trackList+2
0x12B1	0x206B ;_uart_trackList+4
0x12B3	0x696C ;_uart_trackList+6
0x12B5	0x7473 ;_uart_trackList+8
0x12B7	0x00 ;_uart_trackList+10
; end of _uart_trackList
;soundrec.c,22 :: _uart_reading
0x12B8	0x6552 ;_uart_reading+0
0x12BA	0x6461 ;_uart_reading+2
0x12BC	0x6E69 ;_uart_reading+4
0x12BE	0x0067 ;_uart_reading+6
; end of _uart_reading
;soundrec.c,21 :: _uart_writing
0x12C0	0x7257 ;_uart_writing+0
0x12C2	0x7469 ;_uart_writing+2
0x12C4	0x6E69 ;_uart_writing+4
0x12C6	0x0067 ;_uart_writing+6
; end of _uart_writing
;soundrec.c,12 :: _uart_welcome
0x12C8	0x6557 ;_uart_welcome+0
0x12CA	0x636C ;_uart_welcome+2
0x12CC	0x6D6F ;_uart_welcome+4
0x12CE	0x0065 ;_uart_welcome+6
; end of _uart_welcome
;soundrec.c,14 :: _uart_record
0x12D0	0x6552 ;_uart_record+0
0x12D2	0x6F63 ;_uart_record+2
0x12D4	0x6472 ;_uart_record+4
0x12D6	0x00 ;_uart_record+6
; end of _uart_record
;soundrec.c,18 :: _uart_done
0x12D7	0x6F44 ;_uart_done+0
0x12D9	0x656E ;_uart_done+2
0x12DB	0x00 ;_uart_done+4
; end of _uart_done
;soundrec.c,13 :: _uart_play
0x12DC	0x6C50 ;_uart_play+0
0x12DE	0x7961 ;_uart_play+2
0x12E0	0x00 ;_uart_play+4
; end of _uart_play
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0008     [278]    _interrupt
0x011E      [18]    _SPI1_Read
0x0130      [24]    _____DoIFC
0x0148     [210]    __Lib_Mmc_Mmc_Send_Command
0x021A      [26]    __Lib_Mmc_Mmc_DeSelect
0x0234      [14]    _UART1_Write
0x0242      [18]    _SPI1_Write
0x0254       [4]    __Lib_Mmc_Mmc_Select
0x0258     [334]    __Lib_Mmc_Mmc_UnIdle
0x03A6      [54]    _Div_16x16_U
0x03DC     [324]    _Mmc_Init
0x0520     [146]    _WordToStr
0x05B2      [24]    _UART_Write
0x05CA      [90]    _SPI1_Init_Advanced
0x0624      [52]    _UART_Write_Text
0x0658      [16]    ___CC2DW
0x0668      [82]    _codeToRam
0x06BA      [88]    _UART1_Init
0x0712      [12]    _adcInit
0x071E     [218]    _IntToStr
0x07F8     [394]    _Mmc_Write_Sector
0x0982      [14]    _timer1Config
0x0990     [276]    _Mmc_Read_Sector
0x0AA4      [18]    _specialEventTriggerSetup
0x0AB6      [40]    _mmcBuiltinInit
0x0ADE    [1902]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    EEPROM_Write_SaveINTCON_L0
0x0000       [1]    R0
0x0000       [1]    __Lib_SoftI2C_PutZerosToLATSda_temp_sda_L0
0x0000       [1]    UART1_Init_tmp_L0
0x0000       [1]    FLASH_Erase_64_SaveINTCON_L0
0x0000       [1]    __Lib_SoftI2C_PutZerosToLATScl_temp_scl_L0
0x0000       [1]    SPI1_Write_tmp_L0
0x0001       [1]    I2C1_Rd_tmp_L0
0x0001       [2]    FLASH_Read_N_Bytes_i_L0
0x0001       [1]    FLASH_Write_32_i_L0
0x0001       [1]    UART1_Read___tmp_UART1_Read_L0
0x0001       [1]    __Lib_PS2_Wait_Falling_nsample_L0
0x0001       [1]    ispunct_rslt_L0
0x0001       [1]    R1
0x0001       [1]    FLASH_Erase_Write_64_i_L0
0x0002       [2]    memchr_s_L0
0x0002       [2]    memcpy_dd_L0
0x0002       [1]    FLASH_Erase_Write_64_j_L0
0x0002       [1]    R2
0x0002       [2]    strlen_cp_L0
0x0002       [2]    memset_pp_L0
0x0002       [1]    FLASH_Write_32_SaveINTCON_L0
0x0003       [1]    MM_Init_i_L0
0x0003       [1]    FLASH_Erase_Write_64_SaveINTCON_L0
0x0003       [2]    MM_TotalFreeMemSize_Tot_L0
0x0003       [2]    __Lib_MmcFat16_f16_toInt_l_L0
0x0003       [1]    codeToRam_i_L0
0x0003       [2]    Ltrim_original_L0
0x0003       [1]    R3
0x0003       [2]    memmove_tt_L0
0x0004       [2]    strcpy_cp_L0
0x0004       [1]    R4
0x0004       [2]    strcat_cp_L0
0x0004       [2]    strncat_cp_L0
0x0004       [2]    strncpy_cp_L0
0x0004       [2]    memcpy_ss_L0
0x0004       [2]    __Lib_MemManager_MM_GetMemAlign_P_L0
0x0004       [2]    frexp_pom_L0
0x0005       [2]    LongIntToHex_input_half_L0
0x0005       [1]    MM_TotalFreeMemSize_i_L0
0x0005       [2]    LongWordToHex_input_half_L0
0x0005       [1]    R5
0x0005       [2]    Ltrim_p_L0
0x0005       [2]    memmove_ff_L0
0x0006       [1]    R6
0x0006       [1]    __Lib_MemManager_MM_GetMemAlign_i_L0
0x0007       [1]    R7
0x0008       [1]    R8
0x0009       [4]    __Lib_MmcFat16_f16_toLong_l_L0
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x001B       [2]    soundrec_ptrIndex
0x001D       [4]    _sectorIndex
0x0021       [4]    _adcCount
0x0025       [1]    _bufferFull
0x0026       [1]    __Lib_Mmc_cardType
0x0027       [1]    _currentBuffer
0x0028       [2]    _mode
0x002A       [1]    _adcResult
0x002B       [4]    _SPI_Wr_Ptr
0x002F       [4]    _UART_Rd_Ptr
0x0033       [4]    _UART_Wr_Ptr
0x0037       [2]    soundrec_ptr
0x0039     [512]    _buffer1
0x0239      [10]    _text
0x0243       [4]    _SPI_Rd_Ptr
0x0247     [512]    _buffer0
0x0447      [20]    codeToRam_txt_L0
0x045B       [4]    _UART_Rdy_Ptr
0x045F       [4]    _UART_Tx_Idle_Ptr
0x0463       [1]    main_lastMode_L0
0x0464       [2]    main_i_L0
0x0466       [2]    FARG_UART_Write_Text_uart_text
0x0466       [4]    FARG_Mmc_Read_Sector_sector
0x0466       [4]    FARG_Mmc_Write_Sector_sector
0x0466       [2]    FARG_IntToStr_input
0x0466       [3]    FARG_codeToRam_ctxt
0x0468       [1]    UART_Write_Text_data__L0
0x0468       [2]    FARG_IntToStr_output
0x0469       [1]    UART_Write_Text_counter_L0
0x046A       [2]    FARG_Mmc_Write_Sector_dbuff
0x046A       [2]    FARG_Mmc_Read_Sector_dbuff
0x046A       [2]    IntToStr_i_L0
0x046C       [2]    IntToStr_negative_L0
0x046C       [2]    Mmc_Write_Sector_i_L0
0x046C       [2]    Mmc_Read_Sector_i_L0
0x046E       [2]    IntToStr_inword_L0
0x046E       [4]    Mmc_Write_Sector_byte_start_L0
0x046E       [4]    Mmc_Read_Sector_byte_start_L0
0x0472       [2]    FLOC__Mmc_Read_Sector
0x0474       [2]    Mmc_Init_cnt_L0
0x0474       [1]    FARG_SPI1_Init_Advanced_master
0x0474       [2]    FARG_WordToStr_input
0x0474       [1]    FARG_UART_Write__data
0x0475       [1]    FARG_SPI1_Init_Advanced_data_sample
0x0476       [1]    FARG_SPI1_Init_Advanced_clock_idle
0x0476       [2]    FARG_WordToStr_output
0x0476       [1]    Mmc_Init_response_L0
0x0477       [1]    FARG_SPI1_Init_Advanced_transmit_edge
0x0478       [1]    WordToStr_len_L0
0x0479       [2]    FLOC__WordToStr
0x047B       [1]    FARG___Lib_Mmc_Mmc_UnIdle_ctype
0x047C       [2]    __Lib_Mmc_Mmc_UnIdle_cnt_L0
0x047E       [1]    __Lib_Mmc_Mmc_UnIdle_response_L0
0x047F       [1]    __Lib_Mmc_Mmc_UnIdle_response2_L0
0x0480       [1]    FARG___Lib_Mmc_Mmc_Send_Command_partial_cmm
0x0480       [1]    FARG_SPI1_Write_data_
0x0480       [1]    FARG_UART1_Write_data_
0x0481       [4]    FARG___Lib_Mmc_Mmc_Send_Command_content
0x0485       [1]    FARG___Lib_Mmc_Mmc_Send_Command_crc
0x0486       [1]    __Lib_Mmc_Mmc_Send_Command_response_L0
0x0487       [2]    __Lib_Mmc_Mmc_Send_Command_timeout_L0
0x0489       [1]    FARG_SPI1_Read_buffer
0x0F81       [0]    RB0_bit
0x0F81       [0]    RB1_bit
0x0F8B       [0]    Mmc_Chip_Select
0x0F8B       [0]    LATC2_bit
0x0F8C       [1]    LATD
0x0F93       [1]    TRISB
0x0F94       [0]    TRISC3_bit
0x0F94       [0]    TRISC2_bit
0x0F94       [0]    Mmc_Chip_Select_Direction
0x0F94       [1]    TRISC
0x0F94       [0]    TRISC4_bit
0x0F94       [0]    TRISC6_bit
0x0F94       [0]    TRISC5_bit
0x0F94       [0]    TRISC7_bit
0x0F95       [1]    TRISD
0x0F9D       [1]    PIE1
0x0F9E       [1]    PIR1
0x0FAB       [1]    RCSTA
0x0FAC       [1]    TXSTA
0x0FAD       [1]    TXREG
0x0FAE       [1]    RCREG
0x0FAF       [1]    SPBRG
0x0FB0       [1]    SPBRGH
0x0FB1       [1]    T3CON
0x0FB8       [1]    BAUDCON
0x0FBA       [1]    CCP2CON
0x0FBB       [1]    CCPR2L
0x0FBC       [1]    CCPR2H
0x0FC0       [1]    ADCON2
0x0FC1       [1]    ADCON1
0x0FC2       [1]    ADCON0
0x0FC2       [0]    GO_bit
0x0FC4       [1]    ADRESH
0x0FC6       [1]    SSPCON1
0x0FC7       [1]    SSPSTAT
0x0FC9       [1]    SSPBUF
0x0FCD       [1]    T1CON
0x0FCE       [1]    TMR1L
0x0FCF       [1]    TMR1H
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [2]    FSR1
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF1       [1]    INTCON2
0x0FF2       [1]    INTCON
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
0x0FFD       [1]    TOSL
0x0FFE       [1]    TOSH
0x0FFF       [1]    TOSU
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x124C      [24]    _uart_initReadError
0x1264      [19]    _uart_changeSampleRate
0x1277       [2]    ?ICSsoundrec_ptrIndex
0x1279       [4]    ?ICS_sectorIndex
0x127D       [4]    ?ICS_adcCount
0x1281       [1]    ?ICS_bufferFull
0x1282       [1]    ?ICS__Lib_Mmc_cardType
0x1283       [1]    ?ICS_currentBuffer
0x1284       [2]    ?ICS_mode
0x1286       [1]    ?ICS_adcResult
0x1287      [14]    _uart_menu
0x1295      [13]    _uart_errorWrite
0x12A2      [11]    _uart_errorRead
0x12AD      [11]    _uart_trackList
0x12B8       [8]    _uart_reading
0x12C0       [8]    _uart_writing
0x12C8       [8]    _uart_welcome
0x12D0       [7]    _uart_record
0x12D7       [5]    _uart_done
0x12DC       [5]    _uart_play
//** Label List: ** 
//----------------------------------------------
  L_adcRead0
  L_adcRead1
  L_end_adcRead
  _adcRead
  L_end_specialEventTriggerSetup
  _specialEventTriggerSetup
  L_end_specialEventTriggerStart
  _specialEventTriggerStart
  L_end_adcInit
  _adcInit
  L_codeToRam0
  L_codeToRam1
  L_codeToRam2
  L_main3
  L_main4
  L_main5
  L_main6
  L_main7
  L_main8
  L_main9
  L_main10
  L_main11
  L_main12
  L_main13
  L_main14
  L_main15
  L_main16
  L_main17
  L_main18
  L_main19
  L_main20
  L_main21
  L_main22
  L_main23
  L_main24
  L_main25
  L_main26
  L_main27
  L_main28
  L_main29
  L_main30
  L_main31
  L_main32
  L_main33
  L_main34
  L_main35
  L_main36
  L_main37
  L_main38
  L_main39
  L_main40
  L_main41
  L_main42
  L_main43
  L_main44
  L_main45
  L_main46
  L_main47
  L_main48
  L_mmcBuiltinInit49
  L_mmcBuiltinInit50
  L_interrupt51
  L_interrupt52
  L_interrupt53
  L_interrupt54
  L_interrupt55
  L_interrupt56
  L_interrupt57
  L_interrupt58
  L_interrupt59
  L_interrupt60
  L_interrupt61
  L_end_codeToRam
  _codeToRam
  L_end_main
  _main
  L__main64
  L__main65
  L__main66
  L__main67
  L__main68
  L__main69
  L__main70
  L__main71
  L__main72
  L__main73
  L__main74
  L__main75
  L__main76
  L__main77
  L_end_mmcBuiltinInit
  _mmcBuiltinInit
  L_end_interrupt
  _interrupt
  L__interrupt80
  L__interrupt81
  L__interrupt82
  L__interrupt83
  L__interrupt84
  L_end_timer1Config
  _timer1Config
  L_end_pwmConfig
  _pwmConfig
  L_end_pwmStart
  _pwmStart
  L_end_pwmStop
  _pwmStop
  L_end_pwmChangeDutyCycle
  _pwmChangeDutyCycle
  L_ByteToStr0
  L_ByteToStr1
  L_ByteToStr2
  L_ByteToStr3
  L_ByteToStr4
  L_ByteToStr5
  L_WordToStr6
  L_WordToStr7
  L_WordToStr8
  L_WordToStr9
  L_WordToStr10
  L_WordToStr11
  L_WordToStrWithZeros12
  L_WordToStrWithZeros13
  L_WordToStrWithZeros14
  L_WordToStrWithZeros15
  L_WordToStrWithZeros16
  L_ShortToStr17
  L_ShortToStr18
  L_ShortToStr19
  L_ShortToStr20
  L_ShortToStr21
  L_ShortToStr22
  L_IntToStr23
  L_IntToStr24
  L_IntToStr25
  L_IntToStr26
  L_IntToStr27
  L_IntToStr28
  L_IntToStrWithZeros29
  L_IntToStrWithZeros30
  L_IntToStrWithZeros31
  L_IntToStrWithZeros32
  L_IntToStrWithZeros33
  L_IntToStrWithZeros34
  L_IntToStrWithZeros35
  L_IntToStrWithZeros36
  L_IntToStrWithZeros37
  L_LongWordToStr38
  L_LongWordToStr39
  L_LongWordToStr40
  L_LongWordToStr41
  L_LongWordToStr42
  L_LongWordToStr43
  L_LongWordToStrWithZeros44
  L_LongWordToStrWithZeros45
  L_LongWordToStrWithZeros46
  L_LongWordToStrWithZeros47
  L_LongWordToStrWithZeros48
  L_LongToStr49
  L_LongToStr50
  L_LongToStr51
  L_LongToStr52
  L_LongToStr53
  L_LongToStr54
  L_LongIntToStrWithZeros55
  L_LongIntToStrWithZeros56
  L_LongIntToStrWithZeros57
  L_LongIntToStrWithZeros58
  L_LongIntToStrWithZeros59
  L_LongIntToStrWithZeros60
  L_LongIntToStrWithZeros61
  L_LongIntToStrWithZeros62
  L_LongIntToStrWithZeros63
  L_Dec2Bcd64
  L_Dec2Bcd65
  L_Rtrim66
  L_Rtrim67
  L_Rtrim68
  L_Rtrim69
  L_Ltrim70
  L_Ltrim71
  L_Ltrim72
  L_Ltrim73
  L_Ltrim74
  L_Ltrim75
  L_FloatToStr76
  L_FloatToStr77
  L_FloatToStr78
  L_FloatToStr79
  L_FloatToStr80
  L_FloatToStr81
  L_FloatToStr82
  L_FloatToStr83
  L_FloatToStr84
  L_FloatToStr85
  L_FloatToStr86
  L_FloatToStr87
  L_FloatToStr88
  L_FloatToStr89
  L_FloatToStr90
  L_FloatToStr91
  L_FloatToStr92
  L_FloatToStr93
  L_FloatToStr94
  L_FloatToStr95
  L_FloatToStr96
  L_FloatToStr97
  L__Rtrim98
  L__Ltrim99
  L__FloatToStr100
  L_end_ByteToHex
  _ByteToHex
  L_end_ShortToHex
  _ShortToHex
  L_end_WordToHex
  _WordToHex
  L_end_IntToHex
  _IntToHex
  L_end_LongWordToHex
  _LongWordToHex
  L_end_LongIntToHex
  _LongIntToHex
  L_end_ByteToStr
  _ByteToStr
  L_end_WordToStr
  _WordToStr
  L__WordToStr109
  L_end_WordToStrWithZeros
  _WordToStrWithZeros
  L__WordToStrWithZeros111
  L_end_ShortToStr
  _ShortToStr
  L__ShortToStr113
  L_end_IntToStr
  _IntToStr
  L__IntToStr115
  L__IntToStr116
  L_end_IntToStrWithZeros
  _IntToStrWithZeros
  L__IntToStrWithZeros118
  L__IntToStrWithZeros119
  L__IntToStrWithZeros120
  L_end_LongWordToStr
  _LongWordToStr
  L__LongWordToStr122
  L__LongWordToStr123
  L_end_LongWordToStrWithZeros
  _LongWordToStrWithZeros
  L__LongWordToStrWithZeros125
  L_end_LongToStr
  _LongToStr
  L__LongToStr127
  L__LongToStr128
  L_end_LongIntToStrWithZeros
  _LongIntToStrWithZeros
  L__LongIntToStrWithZeros130
  L__LongIntToStrWithZeros131
  L__LongIntToStrWithZeros132
  L_end_Dec2Bcd
  _Dec2Bcd
  L_end_Bcd2Dec
  _Bcd2Dec
  L_end_Bcd2Dec16
  _Bcd2Dec16
  L__Bcd2Dec16136
  L__Bcd2Dec16137
  L_end_Dec2Bcd16
  _Dec2Bcd16
  L__Dec2Bcd16139
  L__Dec2Bcd16140
  L_end_Rtrim
  _Rtrim
  L__Rtrim142
  L_end_Ltrim
  _Ltrim
  L_end_FloatToStr
  _FloatToStr
  L__FloatToStr145
  L__FloatToStr146
  L__FloatToStr147
  L__FloatToStr148
  L__FloatToStr149
  L_Div_16x16_S0
  L_Div_16x16_S1
  LOOPS3232A
  SADD22LA
  SOK22LA
  SADD22L8
  SOK22L8
  LOOPS3232B
  SADD22LB
  SOK22LB
  SADD22L16
  SOK22L16
  LOOPS3232C
  SADD22LC
  SOK22LC
  SADD22L24
  SOK22L24
  LOOPS3232D
  SADD22LD
  SOK22LD
  SOK22L
  L_Div_32x32_S6
  L_Div_32x32_S7
  L_Div_32x32_S8
  L_Div_32x32_S9
  FXD3232S
  END_ALL
  CA3232S
  C3232SX
  C3232SX1
  C3232S
  C3232S2
  C3232SX4
  C3232SOK
  C3232SX3
  C3232SX2
  avoid_comfrem
  LOOPU3232A
  UADD22LA
  UOK22LA
  UADD22L8
  UOK22L8
  LOOPU3232B
  UADD22LB
  UOK22LB
  UADD22L16
  UOK22L16
  LOOPU3232C
  UADD22LC
  UOK22LC
  UADD22L24
  UOK22L24
  LOOPU3232D
  UADD22LD
  UOK22LD
  UOK22L
  _NEXT
  _EXIT2
  _LOOP
  _EXIT1
  _IF_FIRST
  _IF_SECOND
  _INVERCE_FIRST
  _MULT
  _INBERSE_SECOND
  _EXIT
  L_end_Div_8x8_U
  _Div_8x8_U
  L_end_Div_16x16_U
  _Div_16x16_U
  L_end_Div_16x16_S_L
  _Div_16x16_S_L
  L_end_Div_16x16_S
  _Div_16x16_S
  L_end_Div_8x8_S
  _Div_8x8_S
  L_end_Mul_8x8_S
  _Mul_8x8_S
  L_end_Mul_16x16_U
  _Mul_16x16_U
  L_end_Mul_16x16_S
  _Mul_16x16_S
  L_end_SDIV3232L
  _SDIV3232L
  L_end_COMFREM
  _COMFREM
  L_end_Div_32x32_S
  _Div_32x32_S
  L_end_Div_32x32_U
  _Div_32x32_U
  L_end_Mul_32x32_U
  _Mul_32x32_U
  L_end_Mul_32x32_S
  _Mul_32x32_S
  L___Lib_Mmc_Mmc_Send_Command0
  L___Lib_Mmc_Mmc_Send_Command1
  L___Lib_Mmc_Mmc_Send_Command2
  L___Lib_Mmc_Mmc_Send_Command3
  L___Lib_Mmc_Mmc_Send_Command4
  L___Lib_Mmc_Mmc_UnIdle5
  L___Lib_Mmc_Mmc_UnIdle6
  L___Lib_Mmc_Mmc_UnIdle7
  L___Lib_Mmc_Mmc_UnIdle8
  L___Lib_Mmc_Mmc_UnIdle9
  L___Lib_Mmc_Mmc_UnIdle10
  L___Lib_Mmc_Mmc_UnIdle11
  L___Lib_Mmc_Mmc_UnIdle12
  L___Lib_Mmc_Mmc_UnIdle13
  L___Lib_Mmc_Mmc_UnIdle14
  L___Lib_Mmc_Mmc_UnIdle15
  L___Lib_Mmc_Mmc_UnIdle16
  L___Lib_Mmc_Mmc_UnIdle17
  L___Lib_Mmc_Mmc_UnIdle18
  L_Mmc_Init19
  L_Mmc_Init20
  L_Mmc_Init21
  L_Mmc_Init22
  L_Mmc_Init23
  L_Mmc_Init24
  L_Mmc_Init25
  L_Mmc_Init26
  L_Mmc_Init27
  L_Mmc_Init28
  L_Mmc_Read_Sector29
  L_Mmc_Read_Sector30
  L_Mmc_Read_Sector31
  L_Mmc_Read_Sector32
  L_Mmc_Read_Sector33
  L_Mmc_Read_Sector34
  L_Mmc_Read_Sector35
  L_Mmc_Read_Sector36
  L_Mmc_Write_Sector37
  L_Mmc_Write_Sector38
  L_Mmc_Write_Sector39
  L_Mmc_Write_Sector40
  L_Mmc_Write_Sector41
  L_Mmc_Write_Sector42
  L_Mmc_Write_Sector43
  L_Mmc_Write_Sector44
  L_Mmc_Write_Sector45
  L_Mmc_Read_Cid46
  L_Mmc_Read_Cid47
  L_Mmc_Read_Cid48
  L_Mmc_Read_Cid49
  L_Mmc_Read_Cid50
  L_Mmc_Read_Cid51
  L_Mmc_Read_Csd52
  L_Mmc_Read_Csd53
  L_Mmc_Read_Csd54
  L_Mmc_Read_Csd55
  L_Mmc_Read_Csd56
  L_Mmc_Read_Csd57
  L___Lib_Mmc_Mmc_Wait_Data_Ready58
  L___Lib_Mmc_Mmc_Wait_Data_Ready59
  L_Mmc_Multi_Read_Start60
  L_Mmc_Multi_Read_Start61
  L_Mmc_Multi_Read_Start62
  L_Mmc_Multi_Read_Sector63
  L_Mmc_Multi_Read_Sector64
  L_Mmc_Multi_Read_Sector65
  L_Mmc_Multi_Read_Stop66
  L_Mmc_Multi_Read_Stop67
  L_Mmc_Multi_Read_Stop68
  L_Mmc_Multi_Read_Stop69
  L_Mmc_Multi_Read_Stop70
  L_Mmc_Multi_Read_Stop71
  L_Mmc_Multi_Read_Stop72
  L_Mmc_Multi_Read_Stop73
  L_Mmc_Multi_Read_Stop74
  L___Lib_Mmc_Mmc_Send_Command75
  L__Mmc_Multi_Read_Stop76
  L_end_Mmc_Select
  __Lib_Mmc_Mmc_Select
  L_end_Mmc_DeSelect
  __Lib_Mmc_Mmc_DeSelect
  L_end_Mmc_Send_Command
  __Lib_Mmc_Mmc_Send_Command
  L___Lib_Mmc_Mmc_Send_Command80
  L_end_Mmc_UnIdle
  __Lib_Mmc_Mmc_UnIdle
  L___Lib_Mmc_Mmc_UnIdle82
  L___Lib_Mmc_Mmc_UnIdle83
  L___Lib_Mmc_Mmc_UnIdle84
  L_end_Mmc_Init
  _Mmc_Init
  L__Mmc_Init86
  L__Mmc_Init87
  L__Mmc_Init88
  L_end_Mmc_Read_Sector
  _Mmc_Read_Sector
  L__Mmc_Read_Sector90
  L__Mmc_Read_Sector91
  L__Mmc_Read_Sector92
  L__Mmc_Read_Sector93
  L_end_Mmc_Write_Sector
  _Mmc_Write_Sector
  L__Mmc_Write_Sector95
  L__Mmc_Write_Sector96
  L__Mmc_Write_Sector97
  L__Mmc_Write_Sector98
  L__Mmc_Write_Sector99
  L_end_Mmc_Read_Cid
  _Mmc_Read_Cid
  L_end_Mmc_Read_Csd
  _Mmc_Read_Csd
  L_end_Mmc_Wait_Data_Ready
  __Lib_Mmc_Mmc_Wait_Data_Ready
  L_end_Mmc_Multi_Read_Start
  _Mmc_Multi_Read_Start
  L__Mmc_Multi_Read_Start104
  L__Mmc_Multi_Read_Start105
  L__Mmc_Multi_Read_Start106
  L_end_Mmc_Multi_Read_Sector
  _Mmc_Multi_Read_Sector
  L__Mmc_Multi_Read_Sector108
  L_end_Mmc_Multi_Read_Stop
  _Mmc_Multi_Read_Stop
  L__Mmc_Multi_Read_Stop110
  L_SPI1_Init_Advanced0
  L_SPI1_Init_Advanced1
  L_SPI1_Init_Advanced2
  L_SPI1_Init_Advanced3
  L_SPI1_Init_Advanced4
  L_SPI1_Init_Advanced5
  L_SPI1_Read6
  L_SPI1_Read7
  L_SPI1_Write8
  L_SPI1_Write9
  L_end_SPI1_Init
  _SPI1_Init
  L_end_SPI1_Init_Advanced
  _SPI1_Init_Advanced
  L_end_SPI1_Read
  _SPI1_Read
  L_end_SPI1_Write
  _SPI1_Write
  L_end_SPI_Set_Active
  _SPI_Set_Active
  L_end_SPI_Read
  _SPI_Read
  L_end_SPI_Write
  _SPI_Write
  _CC2D_Loop1
  _CC2DL_Loop1
  L_loopCA2AWs
  L_loopCCA2AWs
  L_loopCS2Ss
  L_CS2Send
  L_loopCCS2Ss
  L_CCS2Send
  L_loopFZinSWs
  L_longjmp7
  L_end___CC2D
  ___CC2D
  L_end___CC2DW
  ___CC2DW
  L_end___CA2AW
  ___CA2AW
  L_end___CCA2AW
  ___CCA2AW
  L_end___CS2S
  ___CS2S
  L_end___CCS2S
  ___CCS2S
  L_end___FZinS
  ___FZinS
  L_end_____DoIFC
  _____DoIFC
  L_end_Swap
  _Swap
  L_end_setjmp
  _setjmp
  L_end_longjmp
  _longjmp
  L_UART1_Init0
  L_UART1_Init1
  L_UART1_Read2
  L_UART1_Write3
  L_UART1_Write4
  L_UART1_Write_Text5
  L_UART1_Write_Text6
  L_UART1_Read_Text7
  L_UART1_Read_Text8
  L_UART1_Read_Text9
  L_UART1_Read_Text10
  L_UART1_Read_Text11
  L_UART1_Read_Text12
  L_UART1_Read_Text13
  L_UART1_Read_Text14
  L_UART1_Read_Text15
  L_UART_Write_Text16
  L_UART_Write_Text17
  L_UART_Read_Text18
  L_UART_Read_Text19
  L_UART_Read_Text20
  L_UART_Read_Text21
  L_UART_Read_Text22
  L_UART_Read_Text23
  L_UART_Read_Text24
  L_UART_Read_Text25
  L_UART_Read_Text26
  L_end_UART1_Init
  _UART1_Init
  L_end_UART1_Data_Ready
  _UART1_Data_Ready
  L_end_UART1_Read
  _UART1_Read
  L_end_UART1_Tx_Idle
  _UART1_Tx_Idle
  L_end_UART1_Write
  _UART1_Write
  L_end_UART1_Write_Text
  _UART1_Write_Text
  L_end_UART1_Read_Text
  _UART1_Read_Text
  L_end_UART_Set_Active
  _UART_Set_Active
  L_end_UART_Write
  _UART_Write
  L_end_UART_Write_Text
  _UART_Write_Text
  L_end_UART_Read
  _UART_Read
  L_end_UART_Data_Ready
  _UART_Data_Ready
  L_end_UART_Read_Text
  _UART_Read_Text
  L_end_UART_Tx_Idle
  _UART_Tx_Idle
  L_codeToRam0
  L_codeToRam1
  L_codeToRam2
  L_main3
  L_main4
  L_main5
  L_main6
  L_main7
  L_main8
  L_main9
  L_main10
  L_main11
  L_main12
  L_main13
  L_main14
  L_main15
  L_main16
  L_main17
  L_main18
  L_main19
  L_main20
  L_main21
  L_main22
  L_main23
  L_main24
  L_main25
  L_main26
  L_main27
  L_main28
  L_main29
  L_main30
  L_main31
  L_main32
  L_main33
  L_main34
  L_main35
  L_main36
  L_main37
  L_main38
  L_main39
  L_main40
  L_main41
  L_main42
  L_main43
  L_main44
  L_main45
  L_main46
  L_main47
  L_main48
  L_mmcBuiltinInit49
  L_mmcBuiltinInit50
  L_interrupt51
  L_interrupt52
  L_interrupt53
  L_interrupt54
  L_interrupt55
  L_interrupt56
  L_interrupt57
  L_interrupt58
  L_interrupt59
  L_interrupt60
  L_interrupt61
  L_end_codeToRam
  _codeToRam
  L_end_main
  _main
  L__main64
  L__main65
  L__main66
  L__main67
  L__main68
  L__main69
  L__main70
  L__main71
  L__main72
  L__main73
  L__main74
  L__main75
  L__main76
  L__main77
  L_end_mmcBuiltinInit
  _mmcBuiltinInit
  L_end_interrupt
  _interrupt
  L__interrupt80
  L__interrupt81
  L__interrupt82
  L__interrupt83
  L__interrupt84
  L_end_timer1Config
  _timer1Config
  L_end_pwmConfig
  _pwmConfig
  L_end_pwmStart
  _pwmStart
  L_end_pwmStop
  _pwmStop
  L_end_pwmChangeDutyCycle
  _pwmChangeDutyCycle
